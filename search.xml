<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>这些年来购买过的虚拟服务和产品</title>
      <link href="/posts/818cc60a/"/>
      <url>/posts/818cc60a/</url>
      
        <content type="html"><![CDATA[<p>之前我的准则是绝对不在虚拟世界上花钱，所以游戏从来不充钱，软件全部用破解版，科学上网找各种免费的途径。但是渐渐地我觉得我们应该尊重作者的创造成果，支持作者开发出更好的软件，同时付费能够节省大量的时间精力，免去找破解软件或服务的繁琐。因此我开始尝试付费购买某些服务或软件。目前主要付费的有以下几种。</p><h1 id="购买软件或会员"><a href="#购买软件或会员" class="headerlink" title="购买软件或会员"></a>购买软件或会员</h1><h2 id="钱迹APP永久会员——128元"><a href="#钱迹APP永久会员——128元" class="headerlink" title="钱迹APP永久会员——128元"></a>钱迹APP永久会员——128元</h2><p><a href="https://qianjiapp.com/。" target="_blank" rel="noopener">https://qianjiapp.com/。</a>  </p><p>这是一款用来记账的APP。购买于2021年9月17日。</p><p>2019年来到上海后，发现自己花钱如流水。为了控制开销，开始记录自己的日常花费。几个月之后发现，即使每笔花费都不是那么的乱花，但是一个月加起来之后的总额还是那么的吓人。这可能就是大城市的生活吧。虽然记账以后并没有为我节省开支，但是对于自己每个月花的钱以及花费的分布有了更清晰的认识，因此记账的这个习惯就保留了下来。</p><p>之前用的记点点用来记录。无奈后来广告太多，一个记账APP的整体已经变成广告宣传，记账入口被设置在一起非常隐蔽的地方。因此开始寻找新的替代品。已经不记得从哪个地方知道了钱迹这款APP，用了几次后感觉效果非常不错。没有任何广告，UI设计漂亮，统计展示功能也完全符合我的要求，因此就转移到了这款APP上。更令我惊喜的是这款APP支持数据导入功能。虽然在官方没有支持我之前使用的记点点APP的数据导入，但是提供了一种标准的格式供任何数据可以导入。因此我用爬虫获取了我之前在记点点上一年多的数据，整理成官方的格式，最终将我从2019年来到上海之后的全部数据都导入到了钱迹中。</p><p>虽然上述提到的数据导入功能，以及记账的大部分功能免费版本都能够使用。但是在看到有会员计划后尤其时候终身会员的选择时，我还是有点心动了。不仅仅是会员可以使用多账本以及账单图片这两个我还算得上想要的功能以外，更重要的是买断制的会员，以及软件的零广告的承诺，让我有了想要支持作者创作的想法。终于在某天晚上，我脑子一热，就购买了终身VIP。价格也不是很贵吧，能够承受得起，就当是对独立开发者得支持了。当然不仅仅是支持，会员所提供的多账本功能，也让我在之后的使用中更加方便。希望这个软件能越做越好。</p><p>最后记录一下我近三年来的支出情况。我觉得不多也不少吧。</p><p><img src="https://s1.ax1x.com/2022/03/19/qAHOot.png" alt="账单"></p><h2 id="ishot-Pro-买断制——68元"><a href="#ishot-Pro-买断制——68元" class="headerlink" title="ishot Pro 买断制——68元"></a>ishot Pro 买断制——68元</h2><p><a href="https://www.better365.cn/ishot/multiwindowscreenshot.html。" target="_blank" rel="noopener">https://www.better365.cn/ishot/multiwindowscreenshot.html。</a></p><p>mac上用来截屏的工具。购买于2022年3月19日。</p><p>better365系列软件之一，之前使用过他家的自动切换输入法，在官网上看到了这个截屏软件于是也使用了一下。除了具有微信自带截图的一些功能（诸如标注、马赛克）之外，还可以进行长截屏，贴图，录屏，录制GIF等。之前一直都是免费使用的， 使用了几个月之后感觉良好。最吸引我的是长截屏功能，这个大家在手机上都使用过，mac上的长截屏之前我也用过snip，但还是使用了这个软件，谁让他的UI写的比snip好看呢。</p><p>在3月19日发现更新了收费版本，虽然免费版本的限制并不是很多，只是在录屏时不能录制内录声音（这个对我没影响，录屏都是用OBS，并且我还有loopback），长截图和带壳截图时会有水印（刚开始我觉得可以接受，因为snip的长截图也会有水印。但是看到水印以后觉得有点那啥，水印太大了。。。但是也能用）。不过最遗憾的是不能使用贴图功能了。虽然snipaste也支持贴图功能，但我不知道为啥就是想买这个的付费版本。原因可能也是因为和上面钱迹一样可以有买断版本，一次付钱终身使用？而且也是觉得作者开发的软件使用非常好，想要支持作者一波？一个曾经非常吝啬买这些虚拟产品的人，在今天突然非常想购买付费软件。终究还是没有抑制住内心的冲动，还是冲了。将来应该也不会后悔的吧。</p><h1 id="某些服务"><a href="#某些服务" class="headerlink" title="某些服务"></a>某些服务</h1><p>学习中难免需要使用科学上网，毕竟百度我是真的用不惯了，搜出来的结果就没有一条对我有用的。。。之前一直使用白嫖的，虽然免费，但是速度是真的慢，而且也实效的快。每次寻找也需要花费大量的时间。终于在某次突然觉醒了，决定使用付费服务。毕竟专业的事情还是得交给专业的人来做。自从使用付费服务以后体验效果好太多了，速度快，也不经常失效了。钱果然是个好东西啊，有钱好办事啊。</p><p>下面是我买过的两个服务。刚开始使用的是第一种服务，后来因为涨价于是赚到了第二个服务。</p><h2 id="speeder-三年多——239-8元"><a href="#speeder-三年多——239-8元" class="headerlink" title="speeder 三年多——239.8元"></a>speeder 三年多——239.8元</h2><p>这里是<a href="https://www.speeder.one/auth/register?code=HgGm" target="_blank" rel="noopener">官网</a>。我从2019年2月25号开始使用这家的服务，至今（2022年3月19日）仍然建在。我前前后后一共花费了239.8元。很稳，速度快，流量也还行。但是无奈越来越贵，最终我还是跑路了。</p><h2 id="xfss-两年——22-6元"><a href="#xfss-两年——22-6元" class="headerlink" title="xfss 两年——22.6元"></a>xfss 两年——22.6元</h2><p>这里是<a href="https://xfss.cc/#/register?code=yVx5w5FY" target="_blank" rel="noopener">官网</a>。便宜啊，而且也还稳定。在tg群里老板也经常和我们一起鬼混，服务态度也好。一块钱一个月。趁着做活动的时候一冲动就买了两年了。目前仍然建在。</p><h1 id="VPS-域名"><a href="#VPS-域名" class="headerlink" title="VPS+域名"></a>VPS+域名</h1><p>拥有一台云主机，拥有一个公网IP是我一直以来的梦想。奈何原来云服务器价格比较高，加之我曾经不再虚拟世界花钱的原则，所以一直没有购买。终于在2020年7月份的时候购买了我的第一台云服务器，使用阿里云学生优惠购买的轻量服务器，从此开启了折腾的道路。</p><p>目前已经有这么多台<a href="http://tz.zhangrui.cf/" target="_blank" rel="noopener">小鸡</a>了。。。</p><h2 id="阿里云学生机轻量服务器——100元"><a href="#阿里云学生机轻量服务器——100元" class="headerlink" title="阿里云学生机轻量服务器——100元"></a>阿里云学生机轻量服务器——100元</h2><p>购买于2020年7月份。当初买来的想法是搭建自己的博客，虽然最后博客是白嫖的githubpage，但是cdn的使用需要备案域名，而域名备案需要云服务器，因此这个轻量学生机买的还是值得的了。</p><p>有了这台云服务器后，我时不时在网上看看有没有好玩的开源系统之类的，就自己搭一个玩玩。在这过程中亲自体验到了docker的强大。一行docker run的命令搞定一切，既不用配置复杂的环境，也不用担心不同服务之间的版本冲突。进行迁移和重建的时候也是非常的迅速，docker真是个伟大的东西。</p><p>在搭建的网站的过程中，虽然和学习、科研相关的东西是一点没学到，但是摸鱼的技能还是提高了不少。ssl证书的申请与自动续期，http 301到https，nginx反代，各种乱七八糟的东西现在是摸的越来越多了。</p><h2 id="两个cn域名——30-300元"><a href="#两个cn域名——30-300元" class="headerlink" title="两个cn域名——30+300元"></a>两个cn域名——30+300元</h2><p>在2018年的时候看到腾讯云有域名的活动，30块钱可以买3年的cn域名，脑子一热就买了一个。结果当是没有云服务器没有备案，所以啥也没干成，就放在那里吃灰。。。虽然在2020年7月购买云服务器后给这个域名备案了，也有了域名使用的场景，但是由于两个月后又购买了一个10年的域名，考虑到这个域名过期后迁移麻烦，所以又没咋用了。。。</p><p>2020年9月份的时候在逛mjj论坛的时候看到了华为云上cn域名10年300元的活动，于是脑子一热又上车了。到手以后要想配合我国内的云服务器使用第一件事情当然是备案。在一顿猛如虎的操作以后马上就能用了。配合acm.sh的免费SSL证书，https访问也安排上了。十年时间看起来还是很长的吧。这个域名我还是用了很多的，不仅用来解析到自己的云服务器的各种服务，还用来解析到又拍云上做我博客的cdn域名，也给同学解析到七牛云上帮助他们白嫖七牛云的图床。甚至开了几个三级域名解析到学校的内网上，让自己访问实验室的某些服务更加方便。我觉得这个300块钱10年的域名还是非常值得的。</p><h2 id="垃圾openvz——6刀"><a href="#垃圾openvz——6刀" class="headerlink" title="垃圾openvz——6刀"></a>垃圾openvz——6刀</h2><p>购买于2021年7月17日。在tg的某个频道中看到了这条促销信息，1C512M的云服务器一年只要6刀，只要三十多块钱，还有一个公网IP，还能用来富强，其他该做的事也能做，这么好的车不是直接上。虽然评论区有人说这是ovz架构的垃圾，要买就买kvm的。但是当是年轻不懂这些，只知道有海外公网IP就冲了。但是买来之后完全不知道干啥。。建站的话这个速度肯定没有我国内的阿里云好，扶墙的话速度也没有我买的服务好，用来干啥呢。。。有段时间用来搭了个mtp玩玩，但是没过两天就封了，还把443端口给封了。后来就一直放在那里吃灰了。还好后来443端口又给解封了。。。</p><h2 id="rn新年促销——13刀"><a href="#rn新年促销——13刀" class="headerlink" title="rn新年促销——13刀"></a>rn新年促销——13刀</h2><p>购买于2021年12月25日。这是rn的新年套餐。当时看到价格也才八十多块钱一年，也就一顿饭的价格。虽然我已经有海外的vps了，但是这个是1C1G的，再也不是我512M的小内存了。而且这个是kvm架构的不是openvz的， kvm就代表着高贵。即使买来没用就放在那里呗。反正也就一顿饭的钱，可以买一年，比国内的便宜啊。再不买就没这么好的优惠了吧。。于是就冲了。果然，买来以后还是吃灰。。在后来用来扶墙时发现，线路效果还没有我6刀的OVZ好，这个是真的吃灰没用了。</p><h2 id="腾讯云轻量服务器——160元"><a href="#腾讯云轻量服务器——160元" class="headerlink" title="腾讯云轻量服务器——160元"></a>腾讯云轻量服务器——160元</h2><p>购买于2022年3月9日。在逛mjj论坛时看到有人出三年的腾讯云2C4G8M的轻量服务器，趁着现在的活动可以免费升级到4C4G8M。这个2C4G8M的轻量服务器是去年双十一的绝版套餐，现在已经停售了。近期又开放出免费升级的活动，不愧是良心云。论坛里很多人都在后悔双十一时没有撸到，现在看到有人出我又心动了。虽然我的阿里云服务器还要一年半以后才到期，但是这个便宜啊！即使买来没什么用，但是觉得便宜的东西不买就吃亏了。而且三年160元，也就少出去搓两顿的事情，于是我又冲了。。。果然和之前担心的一样，买回来以后的机器还是吃灰。。。没啥用啊，又浪费钱了。</p><p>不过以后有新的应用或者服务需要部署时我将会优先安排在这个腾讯云轻量上了。一来是因为他的到期时间更晚。二来是因为他的配置更高，用来跑docker这种耗内存的玩意儿更合适。三十因为阿里云轻量的内存占用已经到达90%多了，估计也跑不了多少了。所以现在的主力使用已经从阿里云轻量换到腾讯云轻量了。不过这下子阿里云轻量又成吃灰的了。唉，还是冲动消费啊。果然小鸡买来都是吃灰的啊。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RDMA中QP共享方法的整理</title>
      <link href="/posts/e87c49a0/"/>
      <url>/posts/e87c49a0/</url>
      
        <content type="html"><![CDATA[<p>下面总结了一下已有论文中给出的qp共享的方法。</p><h1 id="OSDI16-FaSST-Fast-Scalable-and-Simple-Distributed-Transactions-with-Two-sided-RDMA-Datagram-RPCs"><a href="#OSDI16-FaSST-Fast-Scalable-and-Simple-Distributed-Transactions-with-Two-sided-RDMA-Datagram-RPCs" class="headerlink" title="OSDI16- FaSST: Fast, Scalable and Simple Distributed Transactions with Two-sided (RDMA) Datagram RPCs"></a>OSDI16- FaSST: Fast, Scalable and Simple Distributed Transactions with Two-sided (RDMA) Datagram RPCs</h1><p>FaSST [24] shares QPs among threads, which subsequently lowers the CPU efﬁciency and performance due to the lock contention of QPs between threads.</p><h1 id="X-srq-improving-scalability-and-performance-of-multi-core-inﬁniband-clusters"><a href="#X-srq-improving-scalability-and-performance-of-multi-core-inﬁniband-clusters" class="headerlink" title="X-srq-improving scalability and performance of multi-core inﬁniband clusters"></a>X-srq-improving scalability and performance of multi-core inﬁniband clusters</h1><p>An alternative heuristic is the inclusion of a dedicated proxy thread that manages all receive and send requests [41]. However, switching to/from a dedicated proxy thread increases latency. Furthermore, it is difﬁcult to saturate the full network bandwidth with a single thread. Moreover, the proxy solution is not transparent to the underlying RDMA libraries.</p><h1 id="nsdi22-When-Cloud-Storage-Meets-RDMA"><a href="#nsdi22-When-Cloud-Storage-Meets-RDMA" class="headerlink" title="nsdi22-When Cloud Storage Meets RDMA"></a>nsdi22-When Cloud Storage Meets RDMA</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu20安装docker</title>
      <link href="/posts/cd03bf65/"/>
      <url>/posts/cd03bf65/</url>
      
        <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>来源自：<a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/ubuntu/</a></p><ol><li><p>首先卸载原来的docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove docker docker-engine docker.io containerd runc</code></pre></li></ol><ol start="2"><li><p>配置repository</p><ol><li><p>Update the <code>apt</code> package index and install packages to allow <code>apt</code> to use a repository over HTTPS:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> \    ca-certificates \    curl \    gnupg \    lsb-release</code></pre></li><li><p>Add Docker’s official GPG key:</p><pre><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</code></pre></li><li><p>Use the following command to set up the <strong>stable</strong> repository. To add the <strong>nightly</strong> or <strong>test</strong> repository, add the word <code>nightly</code> or <code>test</code> (or both) after the word <code>stable</code> in the commands below. <a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener">Learn about <strong>nightly</strong> and <strong>test</strong> channels</a>.</p><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">echo</span> \  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \  <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null</code></pre></li></ol></li></ol><ol start="3"><li><p>安装docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io</code></pre></li></ol><ol start="4"><li><p>如果需要安装指定版本</p><pre class=" language-bash"><code class="language-bash">apt-cache madison docker-ce<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce<span class="token operator">=</span><span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">></span> docker-ce-cli<span class="token operator">=</span><span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">></span> containerd.io</code></pre></li></ol><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h1><p>来源：<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a></p><ol><li><p>下载安装并赋予可执行权限</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> curl -L <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>"</span> -o /usr/local/bin/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre></li></ol><h1 id="docker-pull镜像时加速"><a href="#docker-pull镜像时加速" class="headerlink" title="docker pull镜像时加速"></a>docker pull镜像时加速</h1><p>我这里用的是阿里云的docker源镜像。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p  /etc/docker/vim /etc/docker/daemon.json</code></pre><p>在这个文件里写入下面的内容。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://yourlink.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>这个链接在阿里云的docker镜像里面会有。请百度搜索docker阿里云加速获取。</p><h1 id="docker配置代理"><a href="#docker配置代理" class="headerlink" title="docker配置代理"></a>docker配置代理</h1><p>以下内容摘抄于<a href="https://cloud.tencent.com/developer/article/1806455" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1806455</a></p><h2 id="Container-代理"><a href="#Container-代理" class="headerlink" title="Container 代理"></a><strong>Container 代理</strong></h2><p>在容器运行阶段，如果需要代理上网，则需要配置 <code>~/.docker/config.json</code>。以下配置，只在Docker 17.07及以上版本生效。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"proxies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"default"</span><span class="token operator">:</span>   <span class="token punctuation">{</span>     <span class="token property">"httpProxy"</span><span class="token operator">:</span> <span class="token string">"http://proxy.example.com:8080"</span><span class="token punctuation">,</span>     <span class="token property">"httpsProxy"</span><span class="token operator">:</span> <span class="token string">"http://proxy.example.com:8080"</span><span class="token punctuation">,</span>     <span class="token property">"noProxy"</span><span class="token operator">:</span> <span class="token string">"localhost,127.0.0.1,.example.com"</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以下是我的配置文件，我已经在vps上装好了clash</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"proxies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"default"</span><span class="token operator">:</span>   <span class="token punctuation">{</span>     <span class="token property">"httpProxy"</span><span class="token operator">:</span> <span class="token string">"http://172.18.0.1:7890"</span><span class="token punctuation">,</span>     <span class="token property">"httpsProxy"</span><span class="token operator">:</span> <span class="token string">"http://172.18.0.1:7890"</span><span class="token punctuation">,</span>     <span class="token property">"noProxy"</span><span class="token operator">:</span> <span class="token string">"localhost,127.0.0.1,"</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个是用户级的配置，除了 <code>proxies</code>，<code>docker login</code> 等相关信息也会在其中。而且还可以配置信息展示的格式、插件参数等。</p><h2 id="Docker-Build-代理"><a href="#Docker-Build-代理" class="headerlink" title="Docker Build 代理"></a><strong>Docker Build 代理</strong></h2><p>虽然 <code>docker build</code> 的本质，也是启动一个容器，但是环境会略有不同，用户级配置无效。在构建时，需要注入 <code>http_proxy</code> 等参数。</p><pre class=" language-javascript"><code class="language-javascript">docker build <span class="token punctuation">.</span> \    <span class="token operator">--</span>build<span class="token operator">-</span>arg <span class="token string">"HTTP_PROXY=http://proxy.example.com:8080/"</span> \    <span class="token operator">--</span>build<span class="token operator">-</span>arg <span class="token string">"HTTPS_PROXY=http://proxy.example.com:8080/"</span> \    <span class="token operator">--</span>build<span class="token operator">-</span>arg <span class="token string">"NO_PROXY=localhost,127.0.0.1,.example.com"</span> \    <span class="token operator">-</span>t your<span class="token operator">/</span>image<span class="token punctuation">:</span>tag</code></pre><p><strong>注意</strong>：无论是 <code>docker run</code> 还是 <code>docker build</code>，默认是网络隔绝的。如果代理使用的是 <code>localhost:3128</code> 这类，则会无效。这类仅限本地的代理，必须加上 <code>--network host</code> 才能正常使用。而一般则需要配置代理的外部IP，而且代理本身要开启 Gateway 模式。</p><h2 id="重启生效"><a href="#重启生效" class="headerlink" title="重启生效"></a><strong>重启生效</strong></h2><p>代理配置完成后，<code>reboot</code> 重启当然可以生效，但不重启也行。</p><p><code>docker build</code> 代理是在执行前设置的，所以修改后，下次执行立即生效。Container 代理的修改也是立即生效的，但是只针对以后启动的 Container，对已经启动的 Container 无效。</p><p><code>dockerd</code> 代理的修改比较特殊，它实际上是改 <code>systemd</code> 的配置，因此需要重载 <code>systemd</code> 并重启 <code>dockerd</code> 才能生效。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>家里产的茶叶</title>
      <link href="/posts/e1ceeb7b/"/>
      <url>/posts/e1ceeb7b/</url>
      
        <content type="html"><![CDATA[<p>逛v2ex的时候看到有朋友想买茶叶，于是我就小小的推荐了一下自己的产品。</p><blockquote><p><a href="https://www.v2ex.com/t/839206" target="_blank" rel="noopener">https://www.v2ex.com/t/839206</a></p><p>很可惜，需要科学上网才能打开这个网站。</p></blockquote><p>为了不占用论坛回复的太多空间，所以我将更多的图片放在这里了。</p><p>随便从手机里找几张图出来了，比较粗糙。。。</p><p><img src="https://s1.ax1x.com/2022/03/09/bfkIbt.jpg" alt="1"></p><p><img src="https://s1.ax1x.com/2022/03/09/bfk5DI.jpg" alt="2"><br><img src="https://s1.ax1x.com/2022/03/09/bfkTVP.jpg" alt="3"></p><p><img src="https://s1.ax1x.com/2022/03/09/bfkC1H.png" alt="image-20220309221727955"></p><p><img src="https://s1.ax1x.com/2022/03/09/bfkt4U.png" alt="image-20220309222130065"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>clash更新订阅时保留自己的规则</title>
      <link href="/posts/f42b65b0/"/>
      <url>/posts/f42b65b0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经常看到有朋友苦恼clash的订阅规则问题。由于机场的订阅规则并不能完全满足自己的要求，因此自己通常会修改配置文件加上自己的规则。然而当使用机场订阅配置时，自动更新之后会覆盖掉自己配置的规则，又需要重新更改，非常麻烦。今天又看到有朋友在吐槽:</p><blockquote><p><a href="https://www.v2ex.com/t/838078" target="_blank" rel="noopener">https://www.v2ex.com/t/838078</a></p><p>clash 我一直有个痛点，机场的一键订阅都是直接下载一个配置文件，然后我自己又会定义一套规则，我想在自己定义的规则里引用机场配置文件的 proxy ，这样就能既保持机场 proxy 配置自动更新，又能符合自己的需求。 但是 clash 好像用不了多个配置文件，也就不能在一个配置文件里引用另一个配置文件的 proxy 了，不知道有没有解决方案。</p></blockquote><p>实际上clash在Premium版本中已经提供了proxy-providers的功能，能够完美的解决这个问题。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>嫌麻烦的可以直接看后面的配置文件。</p><p>proxy-providers是提取指定URL或者指定文件中的proxies字段中的所有内容，即指提取订阅节点的信息，到当前文件中供我们使用。一下内容翻译自官方文档<a href="https://github.com/Dreamacro/clash/wiki/configuration#proxy-providers" target="_blank" rel="noopener">https://github.com/Dreamacro/clash/wiki/configuration#proxy-providers</a></p><blockquote><p>proxy-providers为用户提供动态加载代理服务器列表的能力，而不是将它们硬编码到配置文件中。目前有两个来源的proxy-providers加载服务器列表:</p><p>http:冲突在启动时从指定的URL加载服务器列表。如果设置了interval选项，则冲突定期从远程拉取服务器列表。<br>file:冲突在启动时从文件系统的指定位置加载服务器列表。<br>运行状况检查可用于这两种模式，其工作方式与代理组中的fallback完全相同。服务器列表文件的配置格式也与主配置文件完全相同:</p></blockquote><p>proxy-providers的格式为</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">proxy-providers</span><span class="token punctuation">:</span>  <span class="token key atrule">jichang1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># provider的名称，后期会用到</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./profiles/1626513136686.yml <span class="token comment" spellcheck="true"># 保存在本地文件的名字，可以随便取</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//XXXX  <span class="token comment" spellcheck="true"># 机场给你的订阅链接</span>    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">36000 </span><span class="token comment" spellcheck="true"># 每36000秒更新一次订阅</span>    <span class="token key atrule">health-check</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 是否自动进行latency-test</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//www.gstatic.com/generate_204      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">3600</span>  <span class="token key atrule">jichang2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 我们可以同时使用多个订阅链接获取多个proxies</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./profiles/1626513136686.yml <span class="token comment" spellcheck="true"># 保存在本地文件的名字，可以随便取</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//XXXX  <span class="token comment" spellcheck="true"># 机场给你的订阅链接</span>    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">36000 </span><span class="token comment" spellcheck="true"># 每36000秒更新一次订阅</span>    <span class="token key atrule">health-check</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 是否自动进行latency-test</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//www.gstatic.com/generate_204      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">3600</span></code></pre><p>这样我们就可以在后面使用</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">proxy-groups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Proxies    <span class="token key atrule">type</span><span class="token punctuation">:</span> select    <span class="token key atrule">use</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># 注意，这里是use而不是普通的proxies</span>      <span class="token punctuation">-</span> jichang1      <span class="token comment" spellcheck="true"># 这里就是上面proxy-providers中定义的名称</span>      <span class="token punctuation">-</span> jichang2</code></pre><p>经过上面两个步骤之后，我们就可以在自己定义的配置文件中使用机场提供的节点了，规则完全由我们自己来制定。每次更新只会获取到节点信息，不会覆盖我们本地写的规则。</p><p>类似的，也有rule-providers的功能。从指定url处获取别人提供的规则，而不用自己来制定。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>在clash的配置文件夹中创建一个新的文件，并把下面的内容复制进去。</li><li>替换proxy-providers中的url为自己的订阅链接。</li><li>在clash中选择使用这个配置文件。</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mixed-port</span><span class="token punctuation">:</span> <span class="token number">7890</span><span class="token comment" spellcheck="true">#---------------------------------------------------#</span><span class="token comment" spellcheck="true">## 更新：2020-07-11 10:36:22</span><span class="token comment" spellcheck="true">## 感谢：https://github.com/Hackl0us/SS-Rule-Snippet</span><span class="token comment" spellcheck="true">#---------------------------------------------------#</span><span class="token comment" spellcheck="true"># Linux 和 macOS 的 redir 代理端口</span><span class="token key atrule">redir-port</span><span class="token punctuation">:</span> <span class="token number">7892</span><span class="token comment" spellcheck="true"># 允许局域网的连接</span><span class="token key atrule">allow-lan</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true"># 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）</span><span class="token key atrule">mode</span><span class="token punctuation">:</span> rule<span class="token comment" spellcheck="true"># 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。</span><span class="token comment" spellcheck="true"># 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。</span><span class="token key atrule">log-level</span><span class="token punctuation">:</span> info<span class="token comment" spellcheck="true"># Clash 的 RESTful API</span><span class="token key atrule">external-controller</span><span class="token punctuation">:</span> <span class="token string">'0.0.0.0:9090'</span><span class="token comment" spellcheck="true"># RESTful API 的口令</span><span class="token key atrule">secret</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">dns</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">ipv6</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">listen</span><span class="token punctuation">:</span> <span class="token string">'0.0.0.0:53'</span>  <span class="token key atrule">use-hosts</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">enhanced-mode</span><span class="token punctuation">:</span> fake<span class="token punctuation">-</span>ip  <span class="token key atrule">fake-ip-range</span><span class="token punctuation">:</span> 198.18.0.1/16  <span class="token key atrule">nameserver</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> 202.120.224.6    <span class="token punctuation">-</span> 114.114.114.114    <span class="token punctuation">-</span> 223.5.5.5    <span class="token punctuation">-</span> <span class="token string">'tcp://223.5.5.5'</span>  <span class="token key atrule">fallback</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'tls://223.5.5.5:853'</span>    <span class="token punctuation">-</span> <span class="token string">'https://223.5.5.5/dns-query'</span>  <span class="token key atrule">fallback-filter</span><span class="token punctuation">:</span>    <span class="token key atrule">geoip</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ipcidr</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 240.0.0.0/4<span class="token comment" spellcheck="true"># proxy provider start here</span><span class="token key atrule">proxy-providers</span><span class="token punctuation">:</span>  <span class="token key atrule">jichang1</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./profiles/1626513136686.yml    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//XXXX    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">36000</span>    <span class="token key atrule">health-check</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//www.gstatic.com/generate_204      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">3600</span>  <span class="token key atrule">jichang2</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./profiles/1626513102225.yml    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//XXX    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">36000</span>    <span class="token key atrule">health-check</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//www.gstatic.com/generate_204      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">3600</span>  <span class="token key atrule">jichang3</span><span class="token punctuation">:</span>     <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./profiles/1642516276761.yml    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//XXXX    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">36000</span>    <span class="token key atrule">health-check</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//www.gstatic.com/generate_204      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">3600</span><span class="token comment" spellcheck="true"># proxy provider end</span><span class="token key atrule">proxies</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># socks5</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> windowsServer    <span class="token key atrule">type</span><span class="token punctuation">:</span> socks5    <span class="token key atrule">server</span><span class="token punctuation">:</span> 10.127.78.177    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7890</span>    <span class="token comment" spellcheck="true"># username: username</span>    <span class="token comment" spellcheck="true"># password: password</span>    <span class="token comment" spellcheck="true"># tls: true</span>    <span class="token comment" spellcheck="true"># skip-cert-verify: true</span>    <span class="token comment" spellcheck="true"># udp: true</span>  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> 🇮🇪 中国<span class="token punctuation">-</span>爱尔兰 IPLC C04<span class="token punctuation">,</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> ir04.cathayroute.com<span class="token punctuation">,</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">33400</span><span class="token punctuation">,</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> ss<span class="token punctuation">,</span> <span class="token key atrule">cipher</span><span class="token punctuation">:</span> rc4<span class="token punctuation">-</span>md5<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> SRCFiB<span class="token punctuation">}</span>  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> 🇭🇰 香港 油尖旺御金·国峯 名氣通電訊 C02<span class="token punctuation">,</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> hkhe02.cathayroute.com<span class="token punctuation">,</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">33400</span><span class="token punctuation">,</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> ss<span class="token punctuation">,</span> <span class="token key atrule">cipher</span><span class="token punctuation">:</span> rc4<span class="token punctuation">-</span>md5<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> SRCFiB<span class="token punctuation">}</span>  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> 🇮🇪 中国<span class="token punctuation">-</span>爱尔兰 IPLC C03<span class="token punctuation">,</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> ir03.cathayroute.com<span class="token punctuation">,</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">33400</span><span class="token punctuation">,</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> ss<span class="token punctuation">,</span> <span class="token key atrule">cipher</span><span class="token punctuation">:</span> rc4<span class="token punctuation">-</span>md5<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> SRCFiB<span class="token punctuation">}</span>  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> 🇭🇰 香港 油尖旺御金·国峯 名氣通電訊 C09<span class="token punctuation">,</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> hkhe09.cathayroute.com<span class="token punctuation">,</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">33400</span><span class="token punctuation">,</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> ss<span class="token punctuation">,</span> <span class="token key atrule">cipher</span><span class="token punctuation">:</span> rc4<span class="token punctuation">-</span>md5<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> SRCFiB<span class="token punctuation">}</span>  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> 🇨🇳 中国<span class="token punctuation">-</span>香港 IEPL Equinix HK8 C 02 1Gbps HBO TVB<span class="token punctuation">,</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> sg12.cathayroute.com<span class="token punctuation">,</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">33400</span><span class="token punctuation">,</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> ss<span class="token punctuation">,</span> <span class="token key atrule">cipher</span><span class="token punctuation">:</span> rc4<span class="token punctuation">-</span>md5<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> SRCFiB<span class="token punctuation">,</span> <span class="token key atrule">udp</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">}</span>  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> 🇨🇳 中国<span class="token punctuation">-</span>爱尔兰 IPLC C05<span class="token punctuation">,</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> ir05.cathayroute.com<span class="token punctuation">,</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">33400</span><span class="token punctuation">,</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> ss<span class="token punctuation">,</span> <span class="token key atrule">cipher</span><span class="token punctuation">:</span> rc4<span class="token punctuation">-</span>md5<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> SRCFiB<span class="token punctuation">,</span> <span class="token key atrule">udp</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">}</span>  <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> 🇨🇳 中国<span class="token punctuation">-</span>香港 IPLC Equinix HK2 C 06 1Gbps HBO TVB<span class="token punctuation">,</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> sg06.cathayroute.com<span class="token punctuation">,</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">33400</span><span class="token punctuation">,</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> ss<span class="token punctuation">,</span> <span class="token key atrule">cipher</span><span class="token punctuation">:</span> rc4<span class="token punctuation">-</span>md5<span class="token punctuation">,</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> SRCFiB<span class="token punctuation">,</span> <span class="token key atrule">udp</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">}</span><span class="token key atrule">proxy-groups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Proxies    <span class="token key atrule">type</span><span class="token punctuation">:</span> select    <span class="token key atrule">proxies</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 故障转移      <span class="token punctuation">-</span> 自动选择      <span class="token punctuation">-</span> 机场节点      <span class="token punctuation">-</span> 手动节点  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 手动节点    <span class="token key atrule">type</span><span class="token punctuation">:</span> select    <span class="token key atrule">proxies</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 🇮🇪 中国<span class="token punctuation">-</span>爱尔兰 IPLC C04      <span class="token punctuation">-</span> 🇭🇰 香港 油尖旺御金·国峯 名氣通電訊 C02      <span class="token punctuation">-</span> 🇮🇪 中国<span class="token punctuation">-</span>爱尔兰 IPLC C03      <span class="token punctuation">-</span> 🇭🇰 香港 油尖旺御金·国峯 名氣通電訊 C09         <span class="token punctuation">-</span> 🇨🇳 中国<span class="token punctuation">-</span>香港 IEPL Equinix HK8 C 02 1Gbps HBO TVB      <span class="token punctuation">-</span> 🇨🇳 中国<span class="token punctuation">-</span>爱尔兰 IPLC C05      <span class="token punctuation">-</span> 🇨🇳 中国<span class="token punctuation">-</span>香港 IPLC Equinix HK2 C 06 1Gbps HBO TVB  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 机场1    <span class="token key atrule">type</span><span class="token punctuation">:</span> select    <span class="token key atrule">use</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> jichang1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 第二个机场    <span class="token key atrule">type</span><span class="token punctuation">:</span> select    <span class="token key atrule">use</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> jichang2  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 另一个机场    <span class="token key atrule">type</span><span class="token punctuation">:</span> select    <span class="token key atrule">use</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> jichang3  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 故障转移    <span class="token key atrule">type</span><span class="token punctuation">:</span> fallback    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://www.gstatic.com/generate_204'</span>    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">7200</span>    <span class="token key atrule">proxies</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> 机场1     <span class="token punctuation">-</span> 第二个机场     <span class="token punctuation">-</span> 另一个机场  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 自动选择    <span class="token key atrule">type</span><span class="token punctuation">:</span> url<span class="token punctuation">-</span>test    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://www.gstatic.com/generate_204'</span>    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">300</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> jichang1      <span class="token punctuation">-</span> jichang2      <span class="token punctuation">-</span> jichang3 <span class="token key atrule">rule-providers</span><span class="token punctuation">:</span>  <span class="token key atrule">reject</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/reject.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">icloud</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/icloud.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">apple</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/apple.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">google</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/google.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">proxy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/proxy.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">direct</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/direct.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">private</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/private.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">gfw</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/gfw.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">greatfire</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/greatfire.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/greatfire.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">tld-not-cn</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> domain    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/tld<span class="token punctuation">-</span>not<span class="token punctuation">-</span>cn.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">telegramcidr</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> ipcidr    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/telegramcidr.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">cncidr</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> ipcidr    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/cncidr.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">lancidr</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> ipcidr    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/lancidr.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span>  <span class="token key atrule">applications</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> http    <span class="token key atrule">behavior</span><span class="token punctuation">:</span> classical    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> ./ruleset/applications.yaml    <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">86400</span><span class="token key atrule">rules</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 这些是自定义规则，想要的可以继续加。</span> <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">-</span>SUFFIX<span class="token punctuation">,</span>cnki.net<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">-</span>SUFFIX<span class="token punctuation">,</span>ieee.org<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">-</span>SUFFIX<span class="token punctuation">,</span>acm.org<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">-</span>SUFFIX<span class="token punctuation">,</span>imgtu.com<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">-</span>SUFFIX<span class="token punctuation">,</span>dpdk.org<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">-</span>SUFFIX<span class="token punctuation">,</span>freenom.com<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">-</span>SUFFIX<span class="token punctuation">,</span>sciencedirect.com<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">-</span>SUFFIX<span class="token punctuation">,</span>springer.com<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>applications<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">,</span>clash.razord.top<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> DOMAIN<span class="token punctuation">,</span>yacd.haishan.me<span class="token punctuation">,</span>DIRECT <span class="token comment" spellcheck="true"># 下面的规则是通过上面的rule-provider来确定的</span> <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>private<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>reject<span class="token punctuation">,</span>REJECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>icloud<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>apple<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>google<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>proxy<span class="token punctuation">,</span>Proxies <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>direct<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>lancidr<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>cncidr<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> RULE<span class="token punctuation">-</span>SET<span class="token punctuation">,</span>telegramcidr<span class="token punctuation">,</span>Proxies <span class="token punctuation">-</span> GEOIP<span class="token punctuation">,</span><span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> GEOIP<span class="token punctuation">,</span>CN<span class="token punctuation">,</span>DIRECT <span class="token punctuation">-</span> MATCH<span class="token punctuation">,</span>Proxies</code></pre><h1 id="附：clash相关概念学习"><a href="#附：clash相关概念学习" class="headerlink" title="附：clash相关概念学习"></a>附：clash相关概念学习</h1><p>faik-ip: 来源：<a href="https://www.v2ex.com/t/841080" target="_blank" rel="noopener">https://www.v2ex.com/t/841080</a></p><blockquote><p>fake-ip 就是，发起连接时，你的 DNS 请求会被 clash 截获然后给你返回个假的 ip ，clash 会在内部记录这个 ip 和请求域名的对应关系。然后应用向这个假的 ip 发送请求的时候，请求会被 clash 截获，clash 通过反查表得到请求域名，然后（如果判定要走代理）把域名封装到某种其他协议然后往代理服务器发送，由代理服务器解析 DNS 。可以一定程度上避免 DNS 污染的影响。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos通过scl使用高版本gcc</title>
      <link href="/posts/1ed1e3fb/"/>
      <url>/posts/1ed1e3fb/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> devtoolset-10-gcc.x86_64 devtoolset-10-gcc-c++.x86_6</code></pre><p>查看机器上的scl可以使用的版本</p><pre class=" language-bash"><code class="language-bash">$ scl --listdevtoolset-10devtoolset-7</code></pre><p>使用更高版本的gcc</p><pre class=" language-bash"><code class="language-bash"> scl <span class="token function">enable</span> devtoolset-10 zsh //根据你自己的shell来，你的可能是bash gcc -v</code></pre><p>注意，只在当前shell会话中有效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[得到]脱不花·怎样成为高效学习的人</title>
      <link href="/posts/a82212ee/"/>
      <url>/posts/a82212ee/</url>
      
        <content type="html"><![CDATA[<p>欢迎词：让我们一起学会学习</p><ol><li>主要分为六讲：<ul><li>怎么找到更好的学习资源？</li><li>怎么制定更有价值的学习目标？</li><li>怎么比别人学得更快更好？</li><li>怎么能学以致用，把学到的东西融会贯通，还能用到自己的工作和生活里？</li><li>怎么让学习的过程变得更愉快？</li><li>不同阶段的学习者，在得到的第一门课应该学什么？</li></ul></li><li>学会学习本身，比学什么更重要。“任务式学习”——用真实的人物、项目、目标来牵引自己的学习。</li></ol><h1 id="怎样找到更好的学习资源"><a href="#怎样找到更好的学习资源" class="headerlink" title="怎样找到更好的学习资源"></a>怎样找到更好的学习资源</h1><h2 id="寻找学习资源的三种方式"><a href="#寻找学习资源的三种方式" class="headerlink" title="寻找学习资源的三种方式"></a>寻找学习资源的三种方式</h2><ol><li><p>搜索</p></li><li><p>用好得到这样的专业学习平台</p></li><li><p>跟人学</p><p>三级导师制：入门、进圈和拜佛。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux搭建nfs系统</title>
      <link href="/posts/2c8f39c7/"/>
      <url>/posts/2c8f39c7/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>以下内容搬运于<a href="#jump1">搭建 NFS 网络文件共享服务</a></p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><ol><li><p>安装 nfs 与 rpc 相关软件包：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> nfs-utils rpcbind -y<span class="token comment" spellcheck="true"># for ubuntu</span><span class="token comment" spellcheck="true"># apt install -y nfs-kernel-server</span></code></pre></li></ol><ol start="2"><li><p>NFS默认的配置文件是 /etc/exports ,配置格式为：  </p><pre><code> NFS共享目录绝对路径    NFS客户端地址（参数）</code></pre><p>常用参数：</p><pre class=" language-bash"><code class="language-bash"> rw             read-write   读写 ro             read-only    只读 <span class="token function">sync</span>           请求或写入数据时，数据同步写入到NFS server的硬盘后才返回。数据安全，但性能降低了 async          优先将数据保存到内存，硬盘有空档时再写入硬盘，效率更高，但可能造成数据丢失。 root_squash    当NFS 客户端使用root 用户访问时，映射为NFS 服务端的匿名用户 no_root_squash 当NFS 客户端使用root 用户访问时，映射为NFS 服务端的root 用户 all_squash     不论NFS 客户端使用任何帐户，均映射为NFS 服务端的匿名用户</code></pre></li></ol><ol start="3"><li><p>配置 /etc/exports：</p><pre class=" language-bash"><code class="language-bash">/sharedir 192.168.239.0/24<span class="token punctuation">(</span>rw,sync,root_squash<span class="token punctuation">)</span></code></pre></li></ol><ol start="4"><li><p>创建共享目录以及测试文件并添加权限：</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">mkdir</span> -p /sharedir <span class="token function">touch</span> /sharedir/Welcom.file <span class="token keyword">echo</span> <span class="token string">"Welcome to onlylink.top"</span> <span class="token operator">></span>/sharedir/Welcom.file <span class="token function">chown</span> -R nfsnobody.nfsnobody /sharedir/ <span class="token comment" spellcheck="true"># 把NFS共享目录赋予 NFS默认用户nfsnobody用户和用户组权限，如不设置，会导致NFS客户端无法在挂载好的共享目录中写入数据</span></code></pre></li></ol><ol start="5"><li><p>启动 rpc服务并设置成开机自启动,启动 nfs服务并设置成开机自启动.</p><p>以下命令仅在centos7下试用，ubuntu下请自行搜索</p><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> rpcbindsystemctl start rpcbindsystemctl <span class="token function">enable</span> nfssystemctl start nfs</code></pre></li></ol><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li><p>安装nfs 与 rpc 相关软件包,启动 rpc服务并设置成开机自启动（不需要启动 NFS服务)。</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> nfs-utils rpcbind -y<span class="token comment" spellcheck="true"># for ubuntu</span><span class="token comment" spellcheck="true"># apt install -y nfs-kernel-server</span>systemctl <span class="token function">enable</span> rpcbindsystemctl start rpcbind</code></pre></li></ol><ol start="2"><li><p>查询远程NFS 服务端中可用的共享资源：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># showmount -e 192.168.239.131</span>Export list <span class="token keyword">for</span> 192.168.239.131:/sharedir 192.168.239.0/24</code></pre><p>如果报如下的错误多数是防火墙导致：<br>   <code>lnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host)</code><br>到服务端清空 iptables默认规则 或关闭 iptables：<br>   <code>iptables -F</code>    或   <code>service iptables stop</code></p></li><li><p>创建挂载目录，并挂载 NFS共享目录 /sharedir</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /sharedir<span class="token function">mount</span> -t nfs 192.168.239.131:/sharedir/ /sharedir/</code></pre></li></ol><ol start="4"><li><p>如果想要开机自动将共享目录挂载到本地,往/etc/fstab 中追加：</p><pre class=" language-bash"><code class="language-bash">192.168.239.131:/sharedir/ /sharedir/ nfs defaults 0 0</code></pre></li></ol><ol start="5"><li><p>验证是否有 rw 权限：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /sharedir/Welcom.file </span>Welcome to onlylink.top                <span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /sharedir/hello</span><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "Hello" >> /sharedir/Welcom.file </span><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /share/Welcom.file</span>Welcome to onlylink.topHello</code></pre></li></ol><h1 id="操作权限问题"><a href="#操作权限问题" class="headerlink" title="操作权限问题"></a>操作权限问题</h1><p>普通用户在操作nfs挂载的文件夹时会有权限问题。如果想在多台机器上都挂载nfs文件夹并且可以让普通用户有操作权限时，可以参考如下操作。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>以下内容摘抄于<a href="https://blog.csdn.net/weixin_43885834/article/details/105308021" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43885834/article/details/105308021</a></p><blockquote><p>nfs会把客户端访问共享目录的用户做一个匹配映射，匹配的原则就是根据uid和gid，加入访问用户uid是1000，而恰好服务器端也有uid1000的用户，则会被映射成服务器端uid1000的用户权限，上文中我服务器端共享目录的权限是775 主用户是anytxnv2 用户uid和gid是502，所以我把所有客户端服务器需要访问共享目录的用户gid改成502后，再访问共享目录，会匹配到服务器端gid为502的用户组，既anytxnv2组，而此组对于共享目录有读写执行权限</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将不同机器上的用户都修改为统一UID（如果你的uid已经统一了就不用做如下操作）</p><p>修改用户uid的方法搬运于<a href="https://blog.csdn.net/train006l/article/details/79007483" target="_blank" rel="noopener">https://blog.csdn.net/train006l/article/details/79007483</a></p><blockquote><p>我在部署nfs的时候，共享了一个文件夹。为了让远程nfs客户端挂载这个文件夹的时候都有可读写权限，我需要把服务器上的用户uid、gid设置成nfs服务端文件夹一样的权限。不过因为之前新建的用户uid、gid都是系统自动生成的，几台服务器之前某个用户的uid、gid可能都不一样，所以现在需要把这个uid、gid都设置成统一某个值。</p></blockquote><p>修改用户uid和组gid的命令分别是usermod和groupmod，思路很简单。先使用usermod修改用户的uid，然后使用groupmod修改组的gid，最后使用chown和chgrp命令修改原来用户文件和目录的属主属组。</p><p>例如测试用户foo和测试组foo。</p><pre class=" language-bash"><code class="language-bash">foo old UID: 1005foo new UID: 2005foo old GID: 2000foo new GID: 3000</code></pre><p>*<em>可以使用最后的脚本快速处理 *</em></p><p>命令：</p><ol><li><p>修改foo用户的uid</p><pre class=" language-bash"><code class="language-bash"><span class="token function">usermod</span> -u 2005 foo</code></pre></li></ol><ol start="2"><li><p>修改foo组的gid</p><pre class=" language-bash"><code class="language-bash"><span class="token function">groupmod</span> -g 3000 foo</code></pre></li></ol><ol start="3"><li><p>foo用户的家目录下面的文件属主和属组会在1、2命令执行后自动修改成新的uid、gid对应的属主属组，但是其他文件目录需要手动修改。手动修改的命令也比较简单。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -user 1005 -exec <span class="token function">chown</span> -h foo <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span class="token function">find</span> / -group 2000 -exec <span class="token function">chgrp</span> -h foo <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span></code></pre></li></ol><ol start="4"><li><p>这样用户和组的uid、gid就修改好了。可以用id命令看下是否修改的如我们所愿。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -l /home/foo/<span class="token function">id</span> -u foo<span class="token function">id</span> -g foo<span class="token function">grep</span> foo /etc/passwd<span class="token function">grep</span> foo /etc/group</code></pre></li></ol><ol start="5"><li><p>为了加快find那一步骤的速度，我整理了脚本如下。</p><p>需要修改脚本前面的大写字母变量的值为你对应的情况。MAX_DEPTH表示一次find的文件夹最大深度。</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">set</span> -exOLD_UID<span class="token operator">=</span>1004NEW_UID<span class="token operator">=</span>6666OLD_GID<span class="token operator">=</span>1004NEW_GID<span class="token operator">=</span>6666USER_NAME<span class="token operator">=</span>ruiGROUP_NAME<span class="token operator">=</span>ruiHOME_PATH<span class="token operator">=</span>/home/ruiMAX_DEPTH<span class="token operator">=</span>3NOW_DEPTH<span class="token operator">=</span>0array_name<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>changID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">usermod</span> -u <span class="token variable">${NEW_UID}</span> <span class="token variable">${USER_NAME}</span>    <span class="token function">groupmod</span> -g <span class="token variable">${NEW_GID}</span> <span class="token variable">${GROUP_NAME}</span><span class="token punctuation">}</span>searchfile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token function">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> -a $1<span class="token variable">)</span></span>       <span class="token comment" spellcheck="true">#注意此处这是两个反引号，表示运行系统命令</span>        <span class="token keyword">do</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$1</span><span class="token string">"/"</span><span class="token variable">$file</span> <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#注意此处之间一定要加上空格，否则会报错</span>            <span class="token keyword">then</span>                NOW_DEPTH<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>NOW_DEPTH<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${NOW_DEPTH}</span> -gt <span class="token variable">${MAX_DEPTH}</span> <span class="token punctuation">]</span>                <span class="token keyword">then</span>                    array_name<span class="token punctuation">[</span><span class="token variable">${#array_name[@]}</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token string">"/"</span><span class="token variable">$file</span>                <span class="token keyword">else</span>                    searchfile <span class="token variable">$1</span><span class="token string">"/"</span><span class="token variable">$file</span>                <span class="token keyword">fi</span>            <span class="token keyword">else</span>                <span class="token comment" spellcheck="true"># echo $1"/"$file   #在此处处理文件即可</span>                array_name<span class="token punctuation">[</span><span class="token variable">${#array_name[@]}</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token string">"/"</span><span class="token variable">$file</span>            <span class="token keyword">fi</span>        <span class="token keyword">done</span><span class="token punctuation">}</span>changefile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> element <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${array_name[@]}</span>"</span>    <span class="token comment" spellcheck="true">#也可以写成for element in ${array[*]}</span>    <span class="token keyword">do</span>        <span class="token keyword">echo</span> <span class="token string">"changing <span class="token variable">$element</span>"</span>        <span class="token function">find</span> <span class="token variable">$element</span> -user <span class="token variable">${OLD_UID}</span> -exec <span class="token function">chown</span> -h <span class="token variable">${USER_NAME}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> <span class="token operator">&amp;</span>        <span class="token function">find</span> <span class="token variable">$element</span> -group <span class="token variable">${OLD_GID}</span> -exec <span class="token function">chgrp</span> -h <span class="token variable">${GROUP_NAME}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> <span class="token operator">&amp;</span>    <span class="token keyword">done</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#changID;</span>searchfile <span class="token variable">${HOME_PATH}</span><span class="token punctuation">;</span>changefile<span class="token punctuation">;</span></code></pre></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><span id="jump1">搭建 NFS 网络文件共享服务 <a href="https://www.jianshu.com/p/380afd870d50" target="_blank" rel="noopener">https://www.jianshu.com/p/380afd870d50</a></span></li><li>nfs共享目录权限问题解决方案<a href="https://blog.csdn.net/weixin_43885834/article/details/105308021" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43885834/article/details/105308021</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ipfs图床</title>
      <link href="/posts/54437c4d/"/>
      <url>/posts/54437c4d/</url>
      
        <content type="html"><![CDATA[<h1 id="公共的网关"><a href="#公共的网关" class="headerlink" title="公共的网关"></a>公共的网关</h1><p>帖子里给的</p><blockquote><p>cf-ipfs.com<br>183.252.17.149:82<br>ipfs.genenetwork.org<br>ipfs.fleek.co<br>ipfs.azurewebsites.net<br>ipfs.kaleido.art<br>ipfs.globalupload.io<br>ipfs.slang.cx<br>ipfs.adatools.io<br>gateway.originprotocol.com<br>ipfs.best-practice.se<br>ipfs.drink.cafe<br>ipfs.denarius.io<br>crustwebsites.net<br>bin.d0x.to<br>ravencoinipfs-gateway.com<br>ipfs.smartholdem.io<br>infura-ipfs.io</p></blockquote><ol><li>infura的</li><li>Cloudflare 还有个 cf-ipfs.com 没被污染</li><li>ipfs-1.xkx.me</li><li></li></ol><h1 id="api反代代码"><a href="#api反代代码" class="headerlink" title="api反代代码"></a>api反代代码</h1><p><a href="https://glitch.com/edit/#!/ipfsapi" target="_blank" rel="noopener">https://glitch.com/edit/#!/ipfsapi</a></p><p>可用的api为ipfsapi.glitch.me</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> createProxyMiddleware <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//const proxy = require('http-proxy-middleware');</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">,</span> <span class="token string">'3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解決跨域問題</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"PUT,POST,GET,DELETE,OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'https://ipfs.infura.io:5001/'</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> exampleProxy <span class="token operator">=</span> <span class="token function">createProxyMiddleware</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> exampleProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`server running @</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="我自己上传的两张图片"><a href="#我自己上传的两张图片" class="headerlink" title="我自己上传的两张图片"></a>我自己上传的两张图片</h1><ol><li><a href="https://cf-ipfs.com/ipfs/QmbWso9DkvoLjDN5LNFVGgCBkdncUB3AujcdQ4e3RsR6nZ" target="_blank" rel="noopener">https://cf-ipfs.com/ipfs/QmbWso9DkvoLjDN5LNFVGgCBkdncUB3AujcdQ4e3RsR6nZ</a></li><li><a href="https://bafybeietqtj6b6rl6vwnxil2eim7marz677cokyx7x5zofpk6kiqbxj3v4.ipfs.cf-ipfs.com/" target="_blank" rel="noopener">https://bafybeietqtj6b6rl6vwnxil2eim7marz677cokyx7x5zofpk6kiqbxj3v4.ipfs.cf-ipfs.com/</a></li><li><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-39d51e06-e197-44a3-8365-3502ea3a70c9/43318a9b-1af1-411b-b833-46cd79ccf156.jpeg" target="_blank" rel="noopener">https://vkceyugu.cdn.bspapp.com/VKCEYUGU-39d51e06-e197-44a3-8365-3502ea3a70c9/43318a9b-1af1-411b-b833-46cd79ccf156.jpeg</a></li><li><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-39d51e06-e197-44a3-8365-3502ea3a70c9/e36d64d7-88cb-4bfb-9933-37515e161d0a.png" target="_blank" rel="noopener">https://vkceyugu.cdn.bspapp.com/VKCEYUGU-39d51e06-e197-44a3-8365-3502ea3a70c9/e36d64d7-88cb-4bfb-9933-37515e161d0a.png</a></li><li><a href="https://ipfs.fleek.co/ipfs/QmQgoGqfwdAoKxP2jbZ8HupydRFqbEcX41YW2DWbj3zcyt" target="_blank" rel="noopener">https://ipfs.fleek.co/ipfs/QmQgoGqfwdAoKxP2jbZ8HupydRFqbEcX41YW2DWbj3zcyt</a></li></ol><h1 id="uniclodu图床"><a href="#uniclodu图床" class="headerlink" title="uniclodu图床"></a>uniclodu图床</h1><ol><li><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-39d51e06-e197-44a3-8365-3502ea3a70c9/e36d64d7-88cb-4bfb-9933-37515e161d0a.png" target="_blank" rel="noopener">https://vkceyugu.cdn.bspapp.com/VKCEYUGU-39d51e06-e197-44a3-8365-3502ea3a70c9/e36d64d7-88cb-4bfb-9933-37515e161d0a.png</a></li><li>upup.xkx.me. <a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ab498c51-8871-421b-8e23-a43eaa306dff/b8237bf1-eba6-4098-ae20-2bd5c6ac5397.png" target="_blank" rel="noopener">https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ab498c51-8871-421b-8e23-a43eaa306dff/b8237bf1-eba6-4098-ae20-2bd5c6ac5397.png</a></li></ol><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-39d51e06-e197-44a3-8365-3502ea3a70c9/e36d64d7-88cb-4bfb-9933-37515e161d0a.png" alt="图片测试"></p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ab498c51-8871-421b-8e23-a43eaa306dff/b8237bf1-eba6-4098-ae20-2bd5c6ac5397.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>申请免费的泛域名SSL证书</title>
      <link href="/posts/d203a3f6/"/>
      <url>/posts/d203a3f6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>摸鱼了一下午+一晚上，终于搞好了。</p><p>之前总是偷懒想用别人搭建好的docker镜像来弄，结果报错了一下午还没搞好。最后自己动手，丰衣足食。</p><p>学到的教训：不要偷懒，多看官方文档。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>以下教程主要基于工具<code>acme.sh</code>, 如果有不懂的地方请参考<a href="[*https://github.com/Neilpang/acme.sh/wiki/说明*](https://github.com/Neilpang/acme.sh/wiki/说明)">官方文档</a>。</p><p>以下教程基于<a href="https://cloud.tencent.com/developer/article/1500063" target="_blank" rel="noopener">此文章</a>进行更进一步的说明。</p><ol><li><p>安装<code>acme.sh</code>。</p><pre class=" language-bash"><code class="language-bash">curl  https://get.acme.sh <span class="token operator">|</span> sh</code></pre><blockquote><p>*普通用户和root用户都可以安装使用，安装脚本其实是进行了如下操作:</p><p><em>1）会把</em> <em><code>acme.sh</code></em> <em>安装到你所执行命令用户的用户目录下：</em> *<code>~/.acme.sh/</code></p><p>2）会创建* <em><code>bash</code></em> <em>的</em> *<code>alias</code>，方便你的使用：<code>alias &gt; acme.sh=~/.acme.sh/acme.sh</code></p><p>3）会自动为你创建* <em><code>cronjob</code></em> <em>脚本，每天零点自动检测所有的证书，如果某证书快过期需要更新，则会自动更新该证书。</em></p></blockquote><p>安装过程不会污染已有的系统任何功能和文件，<strong>所有后续的修改都将限制在安装目录中：<code>~/.acme.sh/</code></strong></p></li><li><p>验证域名并生成证书。</p><p>验证的方式有HTTP文件验证，DNS手动验证，DNS自动认证，更详细的说明请参考官方的<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noopener">dnsapi</a>。</p><p>这里只介绍最简单最方便的DNS自动认证方式。</p><ol><li><p>通过DNS服务器提供 <code>key</code> 与 <code>secret</code> 实现自动验证。所以需要申请你域名解析商的 <code>key</code> 与 <code>secret</code>。例如我是在华为云买的域名，放在阿里云上进行解析，所以我需要去申请阿里云的 <code>key</code> 与 <code>secret</code>。倒入环境变量。</p><p><strong>注意：我用的是阿里的，所以环境变量名为<code>Ali_Key</code>, 你如果使用其他家的环境变量明是不一样的，到官方的<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noopener">dnsapi</a>中去查就行。</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> Ali_Key<span class="token operator">=</span><span class="token string">"LTAI4G44567890j5jnt1"</span><span class="token function">export</span> Ali_Secret<span class="token operator">=</span><span class="token string">"ZohryZoB5EuEq1234567ACiE"</span></code></pre></li><li><p>运行命令注册一下账号。（我也不知道是干什么，不然为报错<code>Please update your account with an email address first.</code>）</p><pre class=" language-bash"><code class="language-bash">acme.sh --register-account -m acmshNB@qq.com</code></pre></li><li><p>正式申请证书。</p><p><strong>注意：–dns后面跟的参数与你的域名解析商有关，其他商对应的名字到官方的<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noopener">dnsapi</a>中去查就行。</strong></p><pre class=" language-bash"><code class="language-bash">acme.sh --issue -d hifool.cn -d <span class="token string">"*.hifool.cn"</span> --dns dns_ali</code></pre><p>运行成功后的输出如下所示</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Sat Jul 24 21:54:47 CST 2021<span class="token punctuation">]</span> Your cert is <span class="token keyword">in</span>  /home/rui/.acme.sh/hifool.cn/hifool.cn.cer<span class="token punctuation">[</span>Sat Jul 24 21:54:47 CST 2021<span class="token punctuation">]</span> Your cert key is <span class="token keyword">in</span>  /home/rui/.acme.sh/hifool.cn/hifool.cn.key<span class="token punctuation">[</span>Sat Jul 24 21:54:47 CST 2021<span class="token punctuation">]</span> The intermediate CA cert is <span class="token keyword">in</span>  /home/rui/.acme.sh/hifool.cn/ca.cer<span class="token punctuation">[</span>Sat Jul 24 21:54:47 CST 2021<span class="token punctuation">]</span> And the full chain certs is there:  /home/rui/.acme.sh/hifool.cn/fullchain.cer</code></pre></li></ol></li></ol><ol start="4"><li><p>移动证书</p><pre class=" language-bash"><code class="language-bash">acme.sh --install-cert -d hifool.cn -d <span class="token string">"*.hifool.cn"</span> \--key-file       /home/rui/acmeNB/hifool.cn/privkey.pem  \--fullchain-file /home/rui/acmeNB/hifool.cn/fullchain.pem \--reloadcmd     <span class="token string">"service nginx force-reload"</span></code></pre></li><li><p>配置证书。就不讲了。</p></li></ol><ol start="3"><li><p>关于自动更新。官方文档中说<code>目前证书在 60 天以后会自动更新, 你无需任何操作.</code>因为在我们第一步安装的时候设置了定时任务。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">crontab</span> -l42 0 * * * <span class="token string">"/home/rui/.acme.sh"</span>/acme.sh --cron --home <span class="token string">"/home/rui/.acme.sh"</span> <span class="token operator">></span> /dev/null</code></pre><p>至于是否能自动更新，我还不知道。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac使用小技巧</title>
      <link href="/posts/a3002b91/"/>
      <url>/posts/a3002b91/</url>
      
        <content type="html"><![CDATA[<ol><li><p>查看端口占用</p><pre><code>lsof -i :9090</code></pre><p>至于加不加sudo，还没搞清楚区别。</p></li><li><p>查看进程使用的文件句柄</p><pre><code>sudo lsof -p 14865</code></pre></li><li><p>mac修改文件句柄</p><blockquote><p>复制于<a href="https://blog.abreto.net/archives/2020/02/macos-too-many-open-files.html" target="_blank" rel="noopener">https://blog.abreto.net/archives/2020/02/macos-too-many-open-files.html</a></p><h2 id="内核的限制"><a href="#内核的限制" class="headerlink" title="内核的限制"></a>内核的限制</h2><p>整个操作系统可以打开的文件数受内核参数影响，可以通过以下命令查看</p><pre class=" language-sh"><code class="language-sh">$ sysctl kern.maxfiles$ sysctl kern.maxfilesperproc</code></pre><p>在我电脑上输出如下</p><pre><code>kern.maxfiles: 49152kern.maxfilesperproc: 42576</code></pre><p>好像已经很大了。</p><p>如果需要临时修改的话，运行如下命令</p><pre><code>$ sudo sysctl -w kern.maxfiles=20480 # 或其他你选择的数字$ sudo sysctl -w kern.maxfilesperproc=18000 # 或其他你选择的数字</code></pre><p>永久修改，需要在 <code>/etc/sysctl.conf</code> 里加上类似的下述内容</p><pre><code>kern.maxfiles=20480kern.maxfilesperproc=18000</code></pre><p>这个文件可能需要自行创建</p><h2 id="launchd-对进程的限制"><a href="#launchd-对进程的限制" class="headerlink" title="launchd 对进程的限制"></a>launchd 对进程的限制</h2><p>获取当前的限制：</p><pre><code>$ launchctl limit maxfiles</code></pre><p>输出类似这样：</p><pre><code>   maxfiles    256            unlimited</code></pre><p>其中前一个是软限制，后一个是硬件限制。</p><p>临时修改：</p><pre><code>$ sudo launchctl limit maxfiles 65536 200000</code></pre><p>系统范围内修改则需要在文件夹 <code>/Library/LaunchDaemons</code> 下创建一个 plist 文件 <code>limit.maxfiles.plist</code>：</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;&lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;limit.maxfiles&lt;/string&gt;   &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;launchctl&lt;/string&gt;     &lt;string&gt;limit&lt;/string&gt;     &lt;string&gt;maxfiles&lt;/string&gt;     &lt;string&gt;65536&lt;/string&gt;     &lt;string&gt;200000&lt;/string&gt;   &lt;/array&gt;   &lt;key&gt;RunAtLoad&lt;/key&gt;   &lt;true/&gt;   &lt;key&gt;ServiceIPC&lt;/key&gt;   &lt;false/&gt; &lt;/dict&gt;&lt;/plist&gt;</code></pre><p>修改文件权限</p><pre><code>$ sudo chown root:wheel /Library/LaunchDaemons/limit.maxfiles.plist$ sudo chmod 644 /Library/LaunchDaemons/limit.maxfiles.plist</code></pre><p>载入新设定</p><pre><code>$ sudo launchctl load -w /Library/LaunchDaemons/limit.maxfiles.plist</code></pre><h2 id="shell-的限制"><a href="#shell-的限制" class="headerlink" title="shell 的限制"></a>shell 的限制</h2><p>通过下述命令查看现有限制</p><pre><code>$ ulimit -a</code></pre><p>得到如下输出</p><pre><code>...-n: file descriptors                256...</code></pre><p>通过 <code>ulimit -S -n 4096</code> 来修改。如果需要保持修改，可以将这一句命令加入你的 <code>.bash_profile</code> 或 <code>.zshrc</code> 等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，修改了上述三个限制，重启一下，这个问题就可以解决了。</p><p>在实际操作中，我修改到第二步重启，第三个就自动修改了。</p></blockquote></li><li><p>微信文件存储位置</p><pre><code>/Users/zhangrui/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9</code></pre></li></ol><ol start="5"><li><p><a href="https://github.com/dteoh/SlowQuitApps" target="_blank" rel="noopener">https://github.com/dteoh/SlowQuitApps</a> 防止你误触到了cmd+q。</p></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Alpine安装gcc编译环境</title>
      <link href="/posts/45b20c9c/"/>
      <url>/posts/45b20c9c/</url>
      
        <content type="html"><![CDATA[<ol><li><p>先运行一个容器吧.</p><pre><code>docker run -d --name=gcc alpine</code></pre></li><li><p>让我们进入容器，以后在容器里面执行接下来的命令。</p><pre><code>docker run -it -d gcc sh</code></pre></li><li><p>换源</p><pre><code>echo "https://mirror.tuna.tsinghua.edu.cn/alpine/v3.8/main" &gt; /etc/apk/repositoriesecho "https://mirror.tuna.tsinghua.edu.cn/alpine/v3.8/community" &gt;&gt; /etc/apk/repositories</code></pre></li><li><p>安装包</p><pre><code>apk add gcc g++ make</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【转载】ubuntu安装低版本的gcc</title>
      <link href="/posts/3c75ae5d/"/>
      <url>/posts/3c75ae5d/</url>
      
        <content type="html"><![CDATA[<h1 id="使用apt安装"><a href="#使用apt安装" class="headerlink" title="使用apt安装"></a>使用apt安装</h1><p>原文：<a href="https://www.codenong.com/cs106399531/" target="_blank" rel="noopener">https://www.codenong.com/cs106399531/</a></p><ol><li><p>加入并更新下载源(否则在sudo时可能找不到4.8版本)</p><pre><code>sudo vim /etc/apt/sources.list</code></pre></li></ol><ol start="2"><li><p>在sources.list文件的最下面添加如下代码</p><pre class=" language-bash"><code class="language-bash">deb http://dk.archive.ubuntu.com/ubuntu/ xenial maindeb http://dk.archive.ubuntu.com/ubuntu/ xenial universe</code></pre></li></ol><ol start="3"><li><p>更新源</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre></li></ol><ol start="4"><li><p>查看是否已经有gcc-4.8的下载源</p><pre><code>apt-cache policy gcc-4.8</code></pre></li></ol><ol start="5"><li><p>安装gcc g++</p><pre><code>sudo apt-get install gcc-4.8sudo apt-get install g++-4.8</code></pre></li></ol><ol start="6"><li><p>更新默认gcc、g++（注意指令最后的<strong>20</strong>不能丢)。这个是为了设置系统gcc默认使用的版本，优先级最高表示最先使用。</p><pre><code>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 20sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 20sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 50sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 50</code></pre></li></ol><ol start="7"><li><p>如果需要更改gcc的版本</p><pre><code>sudo update-alternatives --config gcc</code></pre><p><img src="https://img.hifool.cn/typora/20210712123548.png" alt="image-20210712123542276"></p></li><li><p>查看当前gcc版本</p><pre><code>gcc -v</code></pre></li></ol><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><ol><li><p>下载源码并解压。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-9.3.0/gcc-9.3.0.tar.gz<span class="token function">tar</span> -xvf gcc-9.3.0.tar.gz<span class="token function">cd</span> gcc-9.3.0</code></pre></li></ol><ol start="2"><li><p>安装必要的工具。</p><pre class=" language-bash"><code class="language-bash">./contrib/download_prerequisites</code></pre></li></ol><ol start="3"><li><p>创建文件夹并编译。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> gcc-build<span class="token function">cd</span> gcc-build<span class="token punctuation">..</span>/configure --prefix<span class="token operator">=</span>/home/rui/software/myInstalled/gcc-930 --disable-multilib --enable-languages<span class="token operator">=</span>c,c++<span class="token function">make</span> -j64</code></pre></li></ol><ol start="4"><li><p>启用新的gcc。将如下的内容添加到环境变量文件<code>~/.bashrc</code>或者<code>~/.zshrc</code>中。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span>/home/rui/software/myInstalled/gcc-930/bin:<span class="token variable">$PATH</span><span class="token function">export</span> LD_LIBRARY_PATH<span class="token operator">=</span>/home/rui/software/myInstalled/gcc-930/lib:<span class="token variable">$LD_LIBRARY_PATH</span><span class="token function">export</span> MANPATH<span class="token operator">=</span>home/rui/software/myInstalled/gcc-930/share/man:<span class="token variable">$MANPATH</span></code></pre></li><li><p>验证。</p><pre class=" language-bash"><code class="language-bash">gcc -v</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逼自己学习的七个方法</title>
      <link href="/posts/e191c642/"/>
      <url>/posts/e191c642/</url>
      
        <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="制定为一个小目标"><a href="#制定为一个小目标" class="headerlink" title="制定为一个小目标"></a>制定为一个小目标</h2><p>每当自己不想学习的时候不要立刻放弃，去刷手机去玩什么的。拿出提前准备好的小任务来做，这个任务难度不是很大，但也是在学习。当把这件难度不是很大的任务干完时，不学习的心情可能会缓解，也就会慢慢进入学习状态了。</p><h2 id="人造自动化"><a href="#人造自动化" class="headerlink" title="人造自动化"></a>人造自动化</h2><p>“人每天45%的行为来源于习惯”。如果把学习变成一个习惯,就会每天都想学习。</p><h2 id="呼吸法"><a href="#呼吸法" class="headerlink" title="呼吸法"></a>呼吸法</h2><p>研究发现，把呼吸频率降低为每分钟4至6次，就能快速提高意志力。学不进去时，把每次吸气加呼气的时长控制在10-15秒，重复十次。放慢呼吸能够激活大脑的前额皮质，帮助你快速恢复自律。</p><h2 id="杜绝完美主义"><a href="#杜绝完美主义" class="headerlink" title="杜绝完美主义"></a>杜绝完美主义</h2><h2 id="休克疗法"><a href="#休克疗法" class="headerlink" title="休克疗法"></a>休克疗法</h2><h2 id="人格化"><a href="#人格化" class="headerlink" title="人格化"></a>人格化</h2><h2 id="意志力训练"><a href="#意志力训练" class="headerlink" title="意志力训练"></a>意志力训练</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深房理</title>
      <link href="/posts/28b9404f/"/>
      <url>/posts/28b9404f/</url>
      
        <content type="html"><![CDATA[<p>整个深圳领导班子都被换了卧槽，而且全国还有无数个深房理。。大事件啊</p><p>上网复制了个详情介绍：</p><p>深圳炒房团内讧了！<br>这次炒房团内讧所爆出来的信息让我们目瞪口呆，很多深圳炒房团目前正在使用的“秘籍”颠覆了我们的三观。<br>你连想，都想不到居然有炒房客敢这么搞。<br>怪不得深圳房价涨幅全国第一，这群炒房客这么玩，不涨那才是怪事。<br><strong><em>经营贷只是初阶炒房术</em></strong>2020年3月份，疫情后国家放开经营贷向中小微企业输血的第一时间，经营贷超低的利率就被深圳炒房客给发现了，并用来作为自己炒房资金的主要来源。<br>很快，相关的新闻就见报了，媒体认为违规挪用经营贷是深圳房价暴涨的第一助推器。<br>深圳方面立刻对此展开了自查。<br>经过数月的艰苦调查，深圳方面给出了结论，那就是深圳基本不存在违规挪用经营贷的行为，只有零星人员违规。<br>好吧，你说没有那就没有喽。<br>2021年，深圳的房价再度暴涨，群众又掀起了一轮对深圳经营贷的质疑。<br>这一次，中央点名让深圳严查。<br>这次深圳动真格的了，对全深圳15.4万笔，共计1771.73亿的经营贷进行了全面排查，共发现了21笔贷款违规流入楼市，合计金额5180万元，处罚违规机构4家，违规责任人14位。<br><a href="https://pic2.zhimg.com/80/v2-395abc8d72141b1a5a4e253993be6595_1440w.jpg" target="_blank" rel="noopener">https://pic2.zhimg.com/80/v2-395abc8d72141b1a5a4e253993be6595_1440w.jpg</a></p><p>总共1771亿的经营贷，只有5180万元违规，违规率0.029%，四舍五入完全可以约等于百分之零。<br>深圳方面说基本不存在违规挪用的行为，只有零星人员违规，完全没有错。<br>我信你个鬼，这种黑色幽默不好笑。<br>2021年4月4日，一位名叫“深房理装修队003”的微博用户，爆出深房理摇篮会员合伙炒房材料102份，并称自己手里掌握大量炒房客的资料，每一个都精确到手机号码。<br><a href="https://pic4.zhimg.com/80/v2-bcd50c4b3d3ec46096069352c10e79f7_1440w.jpg" target="_blank" rel="noopener">https://pic4.zhimg.com/80/v2-bcd50c4b3d3ec46096069352c10e79f7_1440w.jpg</a></p><p>怎么套取经营贷，在深房理这里都形成了系统化流程，甚至可以一条龙代办。<br>这102份炒房材料，就算每份只涉及50万房贷，那都是5000万违规资金出来了。<br>而深圳的房子动辄上千万，每份只涉及50万违规房贷你信么？<br>所以这一次举报的炒房材料涉及的违规金额，就是整个深圳系统自查战绩的十倍以上。<br>实在是太荒谬了。<br>但深挖此事时我们发现，这所谓的违规套用经营贷，居然只是深房理炒房团的最初阶操作。<br><strong><em>真正的高阶炒房术</em></strong>深房理是一个知名的炒房大V。<br>在2020年，一位来自杭州的蟹姐姐，因为资金链断裂导致价值728万元的房产被查封，此事一度刷屏网络，当时蟹姐姐就是购买了深房理炒房会员资格后学会的超高杠杆。<br>深房理拥有140万粉丝，成为其入群会员的年费高达3980元，向深房理提问一次也要支付800元。<br><a href="https://pic3.zhimg.com/80/v2-fde20c5fc608b59e199a3c61a13d5712_1440w.jpg" target="_blank" rel="noopener">https://pic3.zhimg.com/80/v2-fde20c5fc608b59e199a3c61a13d5712_1440w.jpg</a></p><p>深房理宣扬勤劳不能致富，声称只有炒房才是致富的唯一渠道，并且宣扬要用银行的钱来炒房。<br>看起来这么唬人的大V，都在传授一些什么知识呢？<br>做假流水到银行申请多张大额信用卡，甚至发动亲友办理信用卡来凑首付款，利用假结婚买“婚票”来获取限购城市的购房资格，找公司代开工资做“工薪贷”，自己先用过桥贷款买房，然后自己开一个空壳公司去套取经营贷来还清过桥贷款。<br>借首付，高杠杆，假结婚、代持，用种种手段来进行不计成本的极致炒房。<br>以上，统统都是低阶炒房术。<br>你加入深房理的会员后，会获得以上所有炒房手法的教程，并有专人手把手的教你。<br>但这些，太低级了，随便一个炒房老手都能对这些流程倒背如流，仅凭这些深房理是无法收获如此之多的炒房铁杆追随者的，也不可能成为炒房届的典型。<br>深房理自己开发了一个小程序，里面有几个很有意思的板块，比如说帕累托值和股份大厅。<br><a href="https://pic1.zhimg.com/80/v2-8440dece3ae1972a26681413eb0f88a4_1440w.jpg" target="_blank" rel="noopener">https://pic1.zhimg.com/80/v2-8440dece3ae1972a26681413eb0f88a4_1440w.jpg</a></p><p>所谓帕累托值，这个花里胡哨的名字，其实就是非法集资。<br>简单的说，这个功能是针对深房理会员需要大量过桥资金来买房这一点而建立的。<br>深房理的会员太多，需要的过桥资金也太多，利息也很高，而很多会员手头也有暂时用不到的钱闲置。<br>于是深房理就让会员把钱给自己，然后再放贷给有需要的会员。<br><a href="https://pic4.zhimg.com/80/v2-26a044a093e78fce27ec6c3d7736d2bb_1440w.jpg" target="_blank" rel="noopener">https://pic4.zhimg.com/80/v2-26a044a093e78fce27ec6c3d7736d2bb_1440w.jpg</a></p><p>这是典型的非法集资，直接违反刑法，也是本次深房理最可能被处罚的罪名。<br>炒房客我见过很多，但炒到触犯刑法的，我还真的是第一次见。<br>但大量聚集会员资金，给会员提供过桥资金，这还只是开胃菜而已。<br>能凸显深房理炒房第一人的，可不止是这一点点。<br>这个小程序里的那个股份大厅大家看到了吧。<br>你猜，炒房客为什么会有股份大厅这玩意？<br>帕累托值就是挂了个好听的名头行非法集资之实而已，但股份大厅真的是股份大厅。<br>里面有很多股份在交易和转让。<br>深房理发明了一套完整的代持流程，让房产证券化成为可能，让你可以用15万元来参与深圳上千万房产的买卖。<br>深圳一套房产售价动辄千万，但买者如云，甚至要排队抢购。<br>很多人曾疑惑，哪来的这么多有钱人。<br>有些人解释，深圳是经济特区，富裕，有钱人多一点很正常。<br>但实际上，买那些千万豪宅的，大多数都是没有钱的人。<br>深房理的会员很多，大部分都是没有钱的人，但深圳的房价很贵，最低的上车盘都需要数百万的首付。<br>大多数深房理的会员都没有办法参与炒房行为，哪怕套出了所有的信用卡都不够首付钱，怎么办？<br>没关系，你们可以几个人甚至十几个人合伙买房啊。<br>一个人凑首付凑不出来，十个人凑首付这不就简单了嘛。<br>深房理已经准备好了一系列的代持教程，准备了一大堆拥有法律制约能力的代持文件，甚至连招股书都替会员们准备好了。<br>400万首付，大家合伙出，公司已经备好，买了房立刻以小微公司的名义抵押经营贷。<br><a href="https://pic2.zhimg.com/80/v2-008b4ba0d3216d1ff5597f84a41d45a9_1440w.jpg" target="_blank" rel="noopener">https://pic2.zhimg.com/80/v2-008b4ba0d3216d1ff5597f84a41d45a9_1440w.jpg</a></p><p>下面，是在深房理会员群里大量出现的招股东信息，也是这次的举报材料之一。<br>1000万的深圳房产，3成首付资格的人只需要300万首付，5%股权即可上车，也就是15万元。<br>找到大量股东，你15万我20万的凑够这300万后，代持人立刻发车，大家一起合伙购入。<br><a href="https://pic4.zhimg.com/80/v2-56265bba34d5b62c9861611722f37767_1440w.jpg" target="_blank" rel="noopener">https://pic4.zhimg.com/80/v2-56265bba34d5b62c9861611722f37767_1440w.jpg</a></p><p>所以你看到的，那些抢购深圳千万豪宅的人，也许并没有300万的身家，可能只有15万，他们是合伙凑钱买房的。<br>真正的房炒不住。<br>合伙买房后，你就拥有了这套房的“股份”。<br>然后深房理创造了一个股份交易中心，让会员们的股份可以进行自由的交易，实现了炒房证券化。<br>有人想退出股份，但其他合伙人不愿意卖房怎么办？<br>还有些人想简单的入股其他人的房子，有没有更便捷的通道？<br>没关系，你们都可以来交易大厅，深房理可以帮你们解决这个问题。<br>点开交易大厅后，你会看到这样的界面。<br><a href="https://pic1.zhimg.com/80/v2-545a4b1adc854e3a9b23733d1144419c_1440w.jpg" target="_blank" rel="noopener">https://pic1.zhimg.com/80/v2-545a4b1adc854e3a9b23733d1144419c_1440w.jpg</a></p><p>最低持股4.3%，最高持股35%。<br>打开那个持股4.3%的，我们可以看到一系列的详细信息。<br>这是一套10个人合伙买的房，房产位于深圳前海时代，董红每此人占股4.3178%。<br><a href="https://pic1.zhimg.com/80/v2-67ceb48fb23151c31f80d6dfb60cba90_1440w.jpg" target="_blank" rel="noopener">https://pic1.zhimg.com/80/v2-67ceb48fb23151c31f80d6dfb60cba90_1440w.jpg</a></p><p>董红每还在深圳前海的诺德假日花园小区，拥有一套房32.33%的股份，是5个人合伙买的，代持人还是一个公务员。<br><a href="https://pic4.zhimg.com/80/v2-598e9e43e26fa1d1986438359cb4d3b3_1440w.jpg" target="_blank" rel="noopener">https://pic4.zhimg.com/80/v2-598e9e43e26fa1d1986438359cb4d3b3_1440w.jpg</a></p><p>类似的交易信息，还有很多很多，依托深房理庞大的会员量实现了内部交易。<br>深房理的这个摇篮系统，有多少会员（炒房客）?<br>在2019年，深房理就拥有了3000人以上的付费会员，500人的群建了七个，每人付费3980的那种铁杆炒房客。<br>2020年11月，深房理举办了线下见面会，从全国各地赶来的付费会员们，就有千人之多，在见面会上，深房理宣布要培养1万名“职业房产投资人”（炒房客），还推出引路人制度，每推荐一名付费的摇篮会员，推荐人就能拿到一笔佣金，开始走传销化路线。<br><a href="https://pic1.zhimg.com/80/v2-d921b4d911cddb80428f56575f7a3530_1440w.jpg" target="_blank" rel="noopener">https://pic1.zhimg.com/80/v2-d921b4d911cddb80428f56575f7a3530_1440w.jpg</a></p><p>在这次的线下见面会上，还有铁杆会员到处招股，想凑足人头发车炒房，真正体现了这次见面会聚集的1000多人的本质。<br><a href="https://pic1.zhimg.com/80/v2-d921b4d911cddb80428f56575f7a3530_1440w.jpg" target="_blank" rel="noopener">https://pic1.zhimg.com/80/v2-d921b4d911cddb80428f56575f7a3530_1440w.jpg</a></p><p>这才是真正的高阶炒房术，这才是炒房团头目的真正本事。<br>那些照本宣科教别人套信用卡借高利贷凑首付的炒房小技巧，早就过时了。<br>看看什么叫中国实践炒房证券化第一人，什么叫彻底贯彻房炒不住。<br>那些觉得借钱凑首付就算炒房的内地小刚需们。<br>你们是真的不知道什么叫经济特区啊。<br><strong><em>严惩不贷</em></strong>深房理的炒房套路、炒房规模和玩法被曝光后，震惊全国。<br>听说过炒房客猖獗，但没想到居然可以这么猖獗。<br>很多人做梦都不会想到，炒深圳的千万豪宅，不需要几百万，只需要15万就可以上车入场了。<br>深圳有深房理这样的人物在，难怪房价会被炒的全国瞩目。<br>和多人股份化代持炒豪宅及炒房证券化相比，所谓的违规套取经营贷这简直就是小孩子过家家的游戏。<br>“深房理装修队003”爆光的102份举报材料震动全国后，中央一台的新闻30分直接报道了此事，宣布深圳七部门将联合调查违规炒房机构“深房理”。<br><a href="https://pic4.zhimg.com/80/v2-b9ac47deb7085efb54ae587ceb490c9b_1440w.jpg炒房能炒到上中央一台新闻30分，真的是，太有排面了，绝对的炒房届第一人。" target="_blank" rel="noopener">https://pic4.zhimg.com/80/v2-b9ac47deb7085efb54ae587ceb490c9b_1440w.jpg炒房能炒到上中央一台新闻30分，真的是，太有排面了，绝对的炒房届第一人。</a><br>上央视后，深房理这件事就直接被定性了，谁也别想救了，就看怎么罚了。<br><a href="https://pic4.zhimg.com/80/v2-4d3c4177ab148b184ebcf3c825207277_1440w.jpg" target="_blank" rel="noopener">https://pic4.zhimg.com/80/v2-4d3c4177ab148b184ebcf3c825207277_1440w.jpg</a></p><p><a href="https://pic3.zhimg.com/80/v2-d8f24a9480fe42c4f9d0801b5cba39f6_1440w.jpg" target="_blank" rel="noopener">https://pic3.zhimg.com/80/v2-d8f24a9480fe42c4f9d0801b5cba39f6_1440w.jpg</a></p><p>深房理把炒房流程化、股份化、规模化、集资化和公司化，条条都触犯中央底线。<br>中央三令五申房住不炒后还不收手，继续房炒不住。<br>严惩不贷，牢饭安排！<br>仅仅非法集资这一条，就够深房理受的了。<br>深房理肯定完了，在杀鸡儆猴的效应下，把杠杆用到了极致的深圳楼市会受到极大的震动和打击，房价将迎来一场大地震。<br>但全国，不止一个深房理。<br>这些人，不罚不足以平民愤。<br>作者：远方青木（ID：YFqingmu）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本学习</title>
      <link href="/posts/f26f620f/"/>
      <url>/posts/f26f620f/</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><h2 id="条件判断-shell条件判断if中的-a到-z的意思"><a href="#条件判断-shell条件判断if中的-a到-z的意思" class="headerlink" title="条件判断[shell条件判断if中的-a到-z的意思]"></a>条件判断[shell条件判断if中的-a到-z的意思]</h2><p>参考自<a href="https://www.cnblogs.com/mymelody/p/9436620.html" target="_blank" rel="noopener">https://www.cnblogs.com/mymelody/p/9436620.html</a></p><p>[ -a FILE ] 如果 FILE 存在则为真。<br>[ -b FILE ] 如果 FILE 存在且是一个块特殊文件则为真。<br>[ -c FILE ] 如果 FILE 存在且是一个字特殊文件则为真。<br>[ -d FILE ] 如果 FILE 存在且是一个目录则为真。<br>[ -e FILE ] 如果 FILE 存在则为真。<br>[ -f FILE ] 如果 FILE 存在且是一个普通文件则为真。<br>[ -g FILE ] 如果 FILE 存在且已经设置了SGID则为真。 [ -h FILE ] 如果 FILE 存在且是一个符号连接则为真。<br>[ -k FILE ] 如果 FILE 存在且已经设置了粘制位则为真。<br>[ -p FILE ] 如果 FILE 存在且是一个名字管道(F如果O)则为真。<br>[ -r FILE ] 如果 FILE 存在且是可读的则为真。<br>[ -s FILE ] 如果 FILE 存在且大小不为0则为真。<br>[ -t FD ] 如果文件描述符 FD 打开且指向一个终端则为真。<br>[ -u FILE ] 如果 FILE 存在且设置了SUID (set user ID)则为真。<br>[ -w FILE ] 如果 FILE 如果 FILE 存在且是可写的则为真。<br>[ -x FILE ] 如果 FILE 存在且是可执行的则为真。<br>[ -O FILE ] 如果 FILE 存在且属有效用户ID则为真。<br>[ -G FILE ] 如果 FILE 存在且属有效用户组则为真。<br>[ -L FILE ] 如果 FILE 存在且是一个符号连接则为真。<br>[ -N FILE ] 如果 FILE 存在 and has been mod如果ied since it was last read则为真。<br>[ -S FILE ] 如果 FILE 存在且是一个套接字则为真。<br>[ FILE1 -nt FILE2 ] 如果 FILE1 has been changed more recently than FILE2, or 如果 FILE1 exists and FILE2 does not则为真。<br>[ FILE1 -ot FILE2 ] 如果 FILE1 比 FILE2 要老, 或者 FILE2 存在且 FILE1 不存在则为真。<br>[ FILE1 -ef FILE2 ] 如果 FILE1 和 FILE2 指向相同的设备和节点号则为真。<br>[ -o OPTIONNAME ] 如果 shell选项 “OPTIONNAME” 开启则为真。<br>[ -z STRING ] “STRING” 的长度为零则为真。<br>[ -n STRING ] or [ STRING ] “STRING” 的长度为非零 non-zero则为真。<br>[ STRING1 == STRING2 ] 如果2个字符串相同。 “=” may be used instead of “==” for strict POSIX compliance则为真。<br>[ STRING1 != STRING2 ] 如果字符串不相等则为真。<br>[ STRING1 &lt; STRING2 ] 如果 “STRING1” sorts before “STRING2” lexicographically in the current locale则为真。<br>[ STRING1 &gt; STRING2 ] 如果 “STRING1” sorts after “STRING2” lexicographically in the current locale则为真。<br>[ ARG1 OP ARG2 ] “OP” is one of -eq, -ne, -lt, -le, -gt or -ge. These arithmetic binary operators return true if “ARG1” is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to “ARG2”, respectively. “ARG1” and “ARG2” are integers.</p><p>=====================================================================</p><p>基本上和其他脚本语言一样。没有太大区别。不过值得注意的是。[]里面的条件判断。</p><p><strong>1、字符串判断</strong></p><p>str1 = str2　　　　　　当两个串有相同内容、长度时为真<br>str1 != str2　　　　　 当串str1和str2不等时为真<br>-n str1　　　　　　　 当串的长度大于0时为真(串非空)<br>-z str1　　　　　　　 当串的长度为0时为真(空串)<br>str1　　　　　　　　  当串str1为非空时为真</p><p><strong>2、数字的判断</strong></p><p>int1 -eq int2　　　　两数相等为真<br>int1 -ne int2　　　　两数不等为真<br>int1 -gt int2　　　　int1大于int2为真<br>int1 -ge int2　　　　int1大于等于int2为真<br>int1 -lt int2　　　　int1小于int2为真<br>int1 -le int2　　　　int1小于等于int2为真</p><p><strong>3、文件的判断</strong></p><p>-r file　　　　　用户可读为真<br>-w file　　　　　用户可写为真<br>-x file　　　　　用户可执行为真<br>-f file　　　　　文件为正规文件为真<br>-d file　　　　　文件为目录为真<br>-c file　　　　　文件为字符特殊文件为真<br>-b file　　　　　文件为块特殊文件为真<br>-s file　　　　　文件大小非0时为真<br>-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真</p><p><strong>4、复杂逻辑判断</strong></p><p>-a 　 　　　　　 与<br>-o　　　　　　　 或<br>!　　　　　　　　非</p><h2 id="处理时间"><a href="#处理时间" class="headerlink" title="处理时间"></a>处理时间</h2><p><a href="https://www.cnblogs.com/janezhao/p/9732157.html" target="_blank" rel="noopener">https://www.cnblogs.com/janezhao/p/9732157.html</a></p><p>shell 实现获取当前时间，并进行格式转换的方法：</p><p>1）原格式输出</p><p>2018年 09月 30日 星期日 15:55:15 CST</p><pre><code>time1=$(date)echo $time1</code></pre><p>2）时间串输出</p><p>20180930155515</p><pre><code>1 #!bin/bash2 time2=$(date "+%Y%m%d%H%M%S")3 echo $time2</code></pre><p> 3）2018-09-30 15:55:15</p><pre><code>#!bin/bashtime3=$(date "+%Y-%m-%d %H:%M:%S")echo $time3</code></pre><p>4）2018.09.30</p><pre><code>#!bin/bashtime4=$(date "+%Y.%m.%d")echo $time4</code></pre><p>注意</p><p>1、date后面有一个空格，shell对空格要求严格</p><p>2、变量赋值前后不要有空格</p><p><img src="https://z3.ax1x.com/2021/08/04/fEL4O0.png" alt="img"></p><p>3、解释</p><pre><code>1 Y显示4位年份，如：2018；y显示2位年份，如：18。2 m表示月份；M表示分钟。3 d表示天；D则表示当前日期，如：1/18/18(也就是2018.1.18)。4 H表示小时，而h显示月份。5 s显示当前秒钟，单位为毫秒；S显示当前秒钟，单位为秒。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[转载]服务端高并发分布式架构演进之路</title>
      <link href="/posts/d0231e3b/"/>
      <url>/posts/d0231e3b/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/f4a907fe1485" target="_blank" rel="noopener">https://www.jianshu.com/p/f4a907fe1485</a></p><h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>本文以淘宝作为例子，介绍从一百个并发到千万级并发情况下服务端的架构的演进过程，同时列举出每个演进阶段会遇到的相关技术，让大家对架构的演进有一个整体的认知，文章最后汇总了一些架构设计的原则。</p><h1 id="2、基本概念"><a href="#2、基本概念" class="headerlink" title="2、基本概念"></a>2、基本概念</h1><p>在介绍架构之前，为了避免部分读者对架构设计中的一些概念不了解，下面对几个最基础的概念进行介绍。</p><p><strong>1）什么是分布式？</strong><br> 系统中的多个模块在不同服务器上部署，即可称为分布式系统，如Tomcat和数据库分别部署在不同的服务器上，或两个相同功能的Tomcat分别部署在不同服务器上。</p><p><strong>2）什么是高可用？</strong><br> 系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性。</p><p><strong>3）什么是集群？</strong><br> 一个特定领域的软件部署在多台服务器上并作为一个整体提供一类服务，这个整体称为集群。<br> 如Zookeeper中的Master和Slave分别部署在多台服务器上，共同组成一个整体提供集中配置服务。<br> 在常见的集群中，客户端往往能够连接任意一个节点获得服务，并且当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，这时候说明集群具有高可用性。</p><p><strong>4）什么是负载均衡？</strong><br> 请求发送到系统时，通过某些方式把请求均匀分发到多个节点上，使系统中每个节点能够均匀的处理请求负载，则可认为系统是负载均衡的。</p><p><strong>5）什么是正向代理和反向代理？</strong><br> 系统内部要访问外部网络时，统一通过一个代理服务器把请求转发出去，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；<br> 当外部请求进入系统时，代理服务器把该请求转发到系统中的某台服务器上，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。<br> 简单来说，正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程。</p><h1 id="3、架构演进"><a href="#3、架构演进" class="headerlink" title="3、架构演进"></a>3、架构演进</h1><h2 id="3-1-单机架构"><a href="#3-1-单机架构" class="headerlink" title="3.1 单机架构"></a>3.1 单机架构</h2><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-788703894b2b7274?imageMogr2/auto-orient/strip%7CimageView2/2/w/579/format/webp" alt="img"></p><p>image</p><p>以淘宝作为例子：在网站最初时，应用数量与用户数都较少，可以把Tomcat和数据库部署在同一台服务器上。</p><p>浏览器往<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.taobao.com" target="_blank" rel="noopener">www.taobao.com</a>发起请求时，首先经过DNS服务器（域名系统）把域名转换为实际IP地址10.102.4.1，浏览器转而访问该IP对应的Tomcat。</p><p>架构瓶颈：随着用户数的增长，Tomcat和数据库之间竞争资源，单机性能不足以支撑业务。</p><h2 id="3-2第一次演进：Tomcat与数据库分开部署"><a href="#3-2第一次演进：Tomcat与数据库分开部署" class="headerlink" title="3.2第一次演进：Tomcat与数据库分开部署"></a>3.2第一次演进：Tomcat与数据库分开部署</h2><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-b40a6d57f446655c?imageMogr2/auto-orient/strip%7CimageView2/2/w/581/format/webp" alt="img"></p><p>image</p><p>Tomcat和数据库分别独占服务器资源，显著提高两者各自性能。</p><p>架构瓶颈：随着用户数的增长，并发读写数据库成为瓶颈。</p><p>Tips：欢迎关注微信公众号：Java后端，获取更多技术博文推送。</p><h2 id="3-3-第二次演进：引入本地缓存和分布式缓存"><a href="#3-3-第二次演进：引入本地缓存和分布式缓存" class="headerlink" title="3.3 第二次演进：引入本地缓存和分布式缓存"></a>3.3 第二次演进：引入本地缓存和分布式缓存</h2><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-007af8a9241e033c?imageMogr2/auto-orient/strip%7CimageView2/2/w/581/format/webp" alt="img"></p><p>image</p><p>在Tomcat同服务器上或同JVM中增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的html页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力。</p><p>其中涉及的技术包括：使用memcached作为本地缓存，使用Redis作为分布式缓存，还会涉及缓存一致性、缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题。</p><p>架构瓶颈：缓存抗住了大部分的访问请求，随着用户数的增长，并发压力主要落在单机的Tomcat上，响应逐渐变慢。</p><h2 id="3-4-第三次演进：引入反向代理实现负载均衡"><a href="#3-4-第三次演进：引入反向代理实现负载均衡" class="headerlink" title="3.4 第三次演进：引入反向代理实现负载均衡"></a>3.4 第三次演进：引入反向代理实现负载均衡</h2><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-1ee2862277b8136c?imageMogr2/auto-orient/strip%7CimageView2/2/w/401/format/webp" alt="img"></p><p>image</p><p>在多台服务器上分别部署Tomcat，使用反向代理软件（Nginx）把请求均匀分发到每个Tomcat中。</p><p>此处假设Tomcat最多支持100个并发，Nginx最多支持50000个并发，那么理论上Nginx把请求分发到500个Tomcat上，就能抗住50000个并发。</p><p>其中涉及的技术包括：Nginx、HAProxy，两者都是工作在网络第七层的反向代理软件，主要支持http协议，还会涉及session共享、文件上传下载的问题。</p><p>架构瓶颈：反向代理使应用服务器可支持的并发量大大增加，但并发量的增长也意味着更多请求穿透到数据库，单机的数据库最终成为瓶颈。</p><h1 id="3-5-第四次演进：数据库读写分离"><a href="#3-5-第四次演进：数据库读写分离" class="headerlink" title="3.5 第四次演进：数据库读写分离"></a>3.5 第四次演进：数据库读写分离</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-c631257d44795f0a?imageMogr2/auto-orient/strip%7CimageView2/2/w/427/format/webp" alt="img"></p><p>image</p><p>把数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库，对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据。</p><p>其中涉及的技术包括：Mycat，它是数据库中间件，可通过它来组织数据库的分离读写和分库分表，客户端通过它来访问下层数据库，还会涉及数据同步，数据一致性的问题。</p><p>架构瓶颈：业务逐渐变多，不同业务之间的访问量差距较大，不同业务直接竞争数据库，相互影响性能。</p><h1 id="3-6-第五次演进：数据库按业务分库"><a href="#3-6-第五次演进：数据库按业务分库" class="headerlink" title="3.6 第五次演进：数据库按业务分库"></a>3.6 第五次演进：数据库按业务分库</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-372c677ca4849234?imageMogr2/auto-orient/strip%7CimageView2/2/w/537/format/webp" alt="img"></p><p>image</p><p>把不同业务的数据保存到不同的数据库中，使业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑。</p><p>这样同时导致跨业务的表无法直接做关联分析，需要通过其他途径来解决，但这不是本文讨论的重点，有兴趣的可以自行搜索解决方案。</p><p>架构瓶颈：随着用户数的增长，单机的写库会逐渐会达到性能瓶颈。</p><h1 id="3-7-第六次演进：把大表拆分为小表"><a href="#3-7-第六次演进：把大表拆分为小表" class="headerlink" title="3.7 第六次演进：把大表拆分为小表"></a>3.7 第六次演进：把大表拆分为小表</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-95af5a0617dec1b1?imageMogr2/auto-orient/strip%7CimageView2/2/w/584/format/webp" alt="img"></p><p>image</p><p>比如针对评论数据，可按照商品ID进行hash，路由到对应的表中存储；</p><p>针对支付记录，可按照小时创建表，每个小时表继续拆分为小表，使用用户ID或记录编号来路由数据。</p><p>只要实时操作的表数据量足够小，请求能够足够均匀的分发到多台服务器上的小表，那数据库就能通过水平扩展的方式来提高性能。其中前面提到的Mycat也支持在大表拆分为小表情况下的访问控制。</p><p>这种做法显著的增加了数据库运维的难度，对DBA的要求较高。数据库设计到这种结构时，已经可以称为分布式数据库</p><p>但这只是一个逻辑的数据库整体，数据库里不同的组成部分是由不同的组件单独来实现的</p><p>如分库分表的管理和请求分发，由Mycat实现，SQL的解析由单机的数据库实现，读写分离可能由网关和消息队列来实现，查询结果的汇总可能由数据库接口层来实现等等</p><p>这种架构其实是MPP（大规模并行处理）架构的一类实现。</p><p>目前开源和商用都已经有不少MPP数据库，开源中比较流行的有Greenplum、TiDB、Postgresql XC、HAWQ等，商用的如南大通用的GBase、睿帆科技的雪球DB、华为的LibrA等等</p><p>不同的MPP数据库的侧重点也不一样，如TiDB更侧重于分布式OLTP场景，Greenplum更侧重于分布式OLAP场景</p><p>这些MPP数据库基本都提供了类似Postgresql、Oracle、MySQL那样的SQL标准支持能力，能把一个查询解析为分布式的执行计划分发到每台机器上并行执行，最终由数据库本身汇总数据进行返回</p><p>也提供了诸如权限管理、分库分表、事务、数据副本等能力，并且大多能够支持100个节点以上的集群，大大降低了数据库运维的成本，并且使数据库也能够实现水平扩展。</p><p>架构瓶颈：数据库和Tomcat都能够水平扩展，可支撑的并发大幅提高，随着用户数的增长，最终单机的Nginx会成为瓶颈。</p><h1 id="3-8-第七次演进：使用LVS或F5来使多个Nginx负载均衡"><a href="#3-8-第七次演进：使用LVS或F5来使多个Nginx负载均衡" class="headerlink" title="3.8 第七次演进：使用LVS或F5来使多个Nginx负载均衡"></a>3.8 第七次演进：使用LVS或F5来使多个Nginx负载均衡</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-82f6f51389c0d124?imageMogr2/auto-orient/strip%7CimageView2/2/w/589/format/webp" alt="img"></p><p>image</p><p>由于瓶颈在Nginx，因此无法通过两层的Nginx来实现多个Nginx的负载均衡。</p><p>图中的LVS和F5是工作在网络第四层的负载均衡解决方案，其中LVS是软件，运行在操作系统内核态，可对TCP请求或更高层级的网络协议进行转发，因此支持的协议更丰富，并且性能也远高于Nginx，可假设单机的LVS可支持几十万个并发的请求转发；</p><p>F5是一种负载均衡硬件，与LVS提供的能力类似，性能比LVS更高，但价格昂贵。</p><p>由于LVS是单机版的软件，若LVS所在服务器宕机则会导致整个后端系统都无法访问，因此需要有备用节点。</p><p>可使用keepalived软件模拟出虚拟IP，然后把虚拟IP绑定到多台LVS服务器上，浏览器访问虚拟IP时，会被路由器重定向到真实的LVS服务器</p><p>当主LVS服务器宕机时，keepalived软件会自动更新路由器中的路由表，把虚拟IP重定向到另外一台正常的LVS服务器，从而达到LVS服务器高可用的效果。</p><p>此处需要注意的是，上图中从Nginx层到Tomcat层这样画并不代表全部Nginx都转发请求到全部的Tomcat</p><p>在实际使用时，可能会是几个Nginx下面接一部分的Tomcat，这些Nginx之间通过keepalived实现高可用，其他的Nginx接另外的Tomcat，这样可接入的Tomcat数量就能成倍的增加。</p><p>架构瓶颈：由于LVS也是单机的，随着并发数增长到几十万时，LVS服务器最终会达到瓶颈，此时用户数达到千万甚至上亿级别，用户分布在不同的地区，与服务器机房距离不同，导致了访问的延迟会明显不同。</p><h1 id="3-9-第八次演进：通过DNS轮询实现机房间的负载均衡"><a href="#3-9-第八次演进：通过DNS轮询实现机房间的负载均衡" class="headerlink" title="3.9 第八次演进：通过DNS轮询实现机房间的负载均衡"></a>3.9 第八次演进：通过DNS轮询实现机房间的负载均衡</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-b67a0adb51b194c2?imageMogr2/auto-orient/strip%7CimageView2/2/w/752/format/webp" alt="img"></p><p>image</p><p>在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。</p><p>当用户访问<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.taobao.com" target="_blank" rel="noopener">www.taobao.com</a>时，DNS服务器会使用轮询策略或其他策略，来选择某个IP供用户访问。此方式能实现机房间的负载均衡</p><p>至此，系统可做到机房级别的水平扩展，千万级到亿级的并发量都可通过增加机房来解决，系统入口处的请求并发量不再是问题。</p><p>架构瓶颈：随着数据的丰富程度和业务的发展，检索、分析等需求越来越丰富，单单依靠数据库无法解决如此丰富的需求。</p><h1 id="3-10-第九次演进：引入NoSQL数据库和搜索引擎等技术"><a href="#3-10-第九次演进：引入NoSQL数据库和搜索引擎等技术" class="headerlink" title="3.10 第九次演进：引入NoSQL数据库和搜索引擎等技术"></a>3.10 第九次演进：引入NoSQL数据库和搜索引擎等技术</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-ebbb5efa90d7c60f?imageMogr2/auto-orient/strip%7CimageView2/2/w/685/format/webp" alt="img"></p><p>image</p><p>当数据库中的数据多到一定规模时，数据库就不适用于复杂的查询了，往往只能满足普通查询的场景。</p><p>对于统计报表场景，在数据量大时不一定能跑出结果，而且在跑复杂查询时会导致其他查询变慢</p><p>对于全文检索、可变数据结构等场景，数据库天生不适用。因此需要针对特定的场景，引入合适的解决方案。</p><p>如对于海量文件存储，可通过分布式文件系统HDFS解决，对于key value类型的数据，可通过HBase和Redis等方案解决</p><p>对于全文检索场景，可通过搜索引擎如ElasticSearch解决，对于多维分析场景，可通过Kylin或Druid等方案解决。</p><p>当然，引入更多组件同时会提高系统的复杂度，不同的组件保存的数据需要同步，需要考虑一致性的问题，需要有更多的运维手段来管理这些组件等。</p><p>架构瓶颈：引入更多组件解决了丰富的需求，业务维度能够极大扩充，随之而来的是一个应用中包含了太多的业务代码，业务的升级迭代变得困难。</p><h1 id="3-11-第十次演进：大应用拆分为小应用"><a href="#3-11-第十次演进：大应用拆分为小应用" class="headerlink" title="3.11 第十次演进：大应用拆分为小应用"></a>3.11 第十次演进：大应用拆分为小应用</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-d79460c361a71756?imageMogr2/auto-orient/strip%7CimageView2/2/w/687/format/webp" alt="img"></p><p>image</p><p>按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心Zookeeper来解决。</p><p>架构瓶颈：不同应用之间存在共用的模块，由应用单独管理会导致相同代码存在多份，导致公共功能升级时全部应用代码都要跟着升级。</p><h1 id="3-12-第十一次演进：复用的功能抽离成微服务"><a href="#3-12-第十一次演进：复用的功能抽离成微服务" class="headerlink" title="3.12 第十一次演进：复用的功能抽离成微服务"></a>3.12 第十一次演进：复用的功能抽离成微服务</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-55ce7a5b93b13ac2?imageMogr2/auto-orient/strip%7CimageView2/2/w/682/format/webp" alt="img"></p><p>image</p><p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来形成一个单独的服务来管理</p><p>这样的服务就是所谓的微服务，应用和服务之间通过HTTP、TCP或RPC请求等多种方式来访问公共服务，每个单独的服务都可以由单独的团队来管理。</p><p>此外，可以通过Dubbo、SpringCloud等框架实现服务治理、限流、熔断、降级等功能，提高服务的稳定性和可用性。</p><p>架构瓶颈：不同服务的接口访问方式不同，应用代码需要适配多种访问方式才能使用服务，此外，应用访问服务，服务之间也可能相互访问，调用链将会变得非常复杂，逻辑变得混乱。</p><h1 id="3-13-第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"><a href="#3-13-第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异" class="headerlink" title="3.13 第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"></a>3.13 第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-c3ff9f9ac1fb194a?imageMogr2/auto-orient/strip%7CimageView2/2/w/693/format/webp" alt="img"></p><p>image</p><p>通过ESB统一进行访问协议转换，应用统一通过ESB来访问后端服务，服务与服务之间也通过ESB来相互调用，以此降低系统的耦合程度。</p><p>这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来解除服务之间耦合问题的架构，就是所谓的SOA（面向服务）架构，这种架构与微服务架构容易混淆，因为表现形式十分相似。</p><p>个人理解，微服务架构更多是指把系统里的公共服务抽取出来单独运维管理的思想，而SOA架构则是指一种拆分服务并使服务接口访问变得统一的架构思想，SOA架构中包含了微服务的思想。</p><p>架构瓶颈：业务不断发展，应用和服务都会不断变多，应用和服务的部署变得复杂，同一台服务器上部署多个服务还要解决运行环境冲突的问题</p><p>此外，对于如大促这类需要动态扩缩容的场景，需要水平扩展服务的性能，就需要在新增的服务上准备运行环境，部署服务等，运维将变得十分困难。</p><h1 id="3-14-第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理"><a href="#3-14-第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理" class="headerlink" title="3.14 第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理"></a><strong>3.14 第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理</strong></h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-a8c8dd40a7f32c2a?imageMogr2/auto-orient/strip%7CimageView2/2/w/645/format/webp" alt="img"></p><p>image</p><p>目前最流行的容器化技术是Docker，最流行的容器管理服务是Kubernetes(K8S)，应用/服务可以打包为Docker镜像，通过K8S来动态分发和部署镜像。</p><p>Docker镜像可理解为一个能运行你的应用/服务的最小的操作系统，里面放着应用/服务的运行代码，运行环境根据实际的需要设置好。</p><p>把整个“操作系统”打包为一个镜像后，就可以分发到需要部署相关服务的机器上，直接启动Docker镜像就可以把服务起起来，使服务的部署和运维变得简单。</p><p>在大促的之前，可以在现有的机器集群上划分出服务器来启动Docker镜像，增强服务的性能</p><p>大促过后就可以关闭镜像，对机器上的其他服务不造成影响（在第18节之前，服务运行在新增机器上需要修改系统配置来适配服务，这会导致机器上其他服务需要的运行环境被破坏）。</p><p>架构瓶颈：使用容器化技术后服务动态扩缩容问题得以解决，但是机器还是需要公司自身来管理，在非大促的时候，还是需要闲置着大量的机器资源来应对大促，机器自身成本和运维成本都极高，资源利用率低。</p><h1 id="3-15-第十四次演进：以云平台承载系统"><a href="#3-15-第十四次演进：以云平台承载系统" class="headerlink" title="3.15 第十四次演进：以云平台承载系统"></a>3.15 第十四次演进：以云平台承载系统</h1><p><img src="https:////upload-images.jianshu.io/upload_images/24117250-f8834504e34e0b09?imageMogr2/auto-orient/strip%7CimageView2/2/w/800/format/webp" alt="img"></p><p>image</p><p>系统可部署到公有云上，利用公有云的海量机器资源，解决动态硬件资源的问题</p><p>在大促的时间段里，在云平台中临时申请更多的资源，结合Docker和K8S来快速部署服务，在大促结束后释放资源，真正做到按需付费，资源利用率大大提高，同时大大降低了运维成本。</p><p>所谓的云平台，就是把海量机器资源，通过统一的资源管理，抽象为一个资源整体</p><p>在云平台上可按需动态申请硬件资源（如CPU、内存、网络等），并且之上提供通用的操作系统，提供常用的技术组件（如Hadoop技术栈，MPP数据库等）供用户使用，甚至提供开发好的应用</p><p>用户不需要关心应用内部使用了什么技术，就能够解决需求（如音视频转码服务、邮件服务、个人博客等）。</p><p>在云平台中会涉及如下几个概念：</p><ol><li>IaaS：基础设施即服务。对应于上面所说的机器资源统一为资源整体，可动态申请硬件资源的层面；</li><li>PaaS：平台即服务。对应于上面所说的提供常用的技术组件方便系统的开发和维护；</li><li>SaaS：软件即服务。对应于上面所说的提供开发好的应用或服务，按功能或性能要求付费。</li></ol><p>至此：以上所提到的从高并发访问问题，到服务的架构和系统实施的层面都有了各自的解决方案。</p><p>但同时也应该意识到，在上面的介绍中，其实是有意忽略了诸如跨机房数据同步、分布式事务实现等等的实际问题，这些问题以后有机会再拿出来单独讨论。</p><h3 id="4、架构设计总结"><a href="#4、架构设计总结" class="headerlink" title="4、架构设计总结"></a>4、架构设计总结</h3><p><strong><em>1）架构的调整是否必须按照上述演变路径进行？\</em></strong></p><p>不是的，以上所说的架构演变顺序只是针对某个侧面进行单独的改进</p><p>在实际场景中，可能同一时间会有几个问题需要解决，或者可能先达到瓶颈的是另外的方面，这时候就应该按照实际问题实际解决。</p><p>如在政府类的并发量可能不大，但业务可能很丰富的场景，高并发就不是重点解决的问题，此时优先需要的可能会是丰富需求的解决方案。</p><p><strong><em>2）对于将要实施的系统，架构应该设计到什么程度？\</em></strong></p><p>对于单次实施并且性能指标明确的系统，架构设计到能够支持系统的性能指标要求就足够了，但要留有扩展架构的接口以便不备之需。</p><p>对于不断发展的系统，如电商平台，应设计到能满足下一阶段用户量和性能指标要求的程度，并根据业务的增长不断的迭代升级架构，以支持更高的并发和更丰富的业务。</p><p><strong><em>3）服务端架构和大数据架构有什么区别？\</em></strong></p><p>所谓的“大数据”其实是海量数据采集清洗转换、数据存储、数据分析、数据服务等场景解决方案的一个统称，在每一个场景都包含了多种可选的技术</p><p>如数据采集有Flume、Sqoop、Kettle等，数据存储有分布式文件系统HDFS、FastDFS，NoSQL数据库HBase、MongoDB等，数据分析有Spark技术栈、机器学习算法等。</p><p>总的来说大数据架构就是根据业务的需求，整合各种大数据组件组合而成的架构，一般会提供分布式存储、分布式计算、多维分析、数据仓库、机器学习算法等能力。</p><p>而服务端架构更多指的是应用组织层面的架构，底层能力往往是由大数据架构来提供。</p><p><strong><em>4）有没有一些架构设计的原则？\</em></strong></p><ul><li>N+1设计：系统中的每个组件都应做到没有单点故障；</li><li>回滚设计：确保系统可以向前兼容，在系统升级时应能有办法回滚版本；</li><li>禁用设计：应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；</li><li>监控设计：在设计阶段就要考虑监控的手段；</li><li>多活数据中心设计：若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；</li><li>采用成熟的技术：刚开发的或开源的技术往往存在很多隐藏的bug，出了问题没有商业支持可能会是一个灾难；</li><li>资源隔离设计：应避免单一业务占用全部资源；</li><li>架构应能水平扩展：系统只有做到能水平扩展，才能有效避免瓶颈问题；</li><li>非核心则购买：非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；</li><li>使用商用硬件：商用硬件能有效降低硬件故障的机率；</li><li>快速迭代：系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；</li><li>无状态设计：服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。</li></ul><p>作者：夜空_2cd3<br>链接：<a href="https://www.jianshu.com/p/f4a907fe1485" target="_blank" rel="noopener">https://www.jianshu.com/p/f4a907fe1485</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zsh配置教程</title>
      <link href="/posts/1995ca3f/"/>
      <url>/posts/1995ca3f/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y zsh  <span class="token comment" spellcheck="true"># 安装</span>chsh -s /bin/zsh  <span class="token comment" spellcheck="true"># 将zsh设置为默认的shell环境</span></code></pre><p>执行上述后需要输入自己的账户密码，然后重新启动一个会话窗口以便使用zsh。</p><p>初次进入zsh环境时需要进行初始化，输入0，使用默认的配置环境就行。后续安装oh-my-zsh进行配置。</p><pre><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code></pre><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>参考链接:<a href="https://www.cnblogs.com/sandea/p/10757533.html" target="_blank" rel="noopener">https://www.cnblogs.com/sandea/p/10757533.html</a></p><h2 id="autosuggestions"><a href="#autosuggestions" class="headerlink" title="autosuggestions"></a>autosuggestions</h2><p>下载 zsh-auto 组件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/plugins/zsh-autosuggestions</code></pre><p>编辑家目录下 zsh 配置文件 .zshrc</p><pre class=" language-bash"><code class="language-bash">plugins<span class="token operator">=</span><span class="token punctuation">(</span>git zsh-autosuggestions<span class="token punctuation">)</span></code></pre><p>使他生效</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> <span class="token variable">$ZSH</span>/oh-my-zsh.sh</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[转载]读博的一些感想/经验/教训</title>
      <link href="/posts/experience-in-PHD/"/>
      <url>/posts/experience-in-PHD/</url>
      
        <content type="html"><![CDATA[<p>原文 <a href="https://zhuanlan.zhihu.com/p/264999492" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/264999492</a></p><p>六年了，我终于毕业了，也彻底结束了我的求学生涯。现在还未拿到学位证，但答辩已经圆满完成，相关手续也基本办完，目前在家投简历、找工作，在答辩前的一个月里，就计划着毕业后写下这几年读研究生的一些经历和感想，一方面希望能给年轻的师弟师妹们少许启发，另一方面也算是回望、总结一下这六年的人生经验，给自己一个交代。</p><p>六年前我本科毕业，一个普通的211院校，当时成绩优秀，却对校门外的事情知之甚少，一心只想着趁自己年轻，到大城市、到更好的学校去读书，开拓眼界、体验不同的人生，在学业上更进一步。通过一个学长的推荐，我联系上了现在的导师，几次通话，他对我比较满意，我也觉得他为人和蔼可亲，又听学长说，中科院的招生指标少，每个老师的学生都不多，平摊下来，想必会在每个学生身上倾注更多的心血；这位老师项目还多，读研就是要找有经费的老师啊，因为跑野外、做实验、参加学术会议等都需要钱，同时，我对中科院系统内学生待遇较好这一点早有耳闻，因此就这样敲定了，以推免研究生的身份到北京读书。</p><p>对于这一点，我当时没有丝毫的犹豫，办理成绩差不多的同学都在考研，我又没有别的特长或兴趣，还好成绩不错，那就保研吧，对本校虽有感情，但总觉得应该到外面去闯一闯，做出一番成就，到时再回到本科学校教书，岂不是春风得意、衣锦还乡，那个时候真是年轻啊。不善与人交际，尤其是不善与学院里的年轻老师交流，我对整个行业的发展、以后工作的定位根本一无所知，一心幻想着到北京拿个博士学位，就能轻松返校任教。</p><p>对于我读研，家里是坚决支持的。我家住在一个三线城市，父亲在市立小学任职，母亲是个普通工人，当时已快退休，父母给我在市里买了房子，留作结婚时用，虽然由于种种原因一直未完工，但比起我的很多同学来说真的好太多了，我很感激他们。也正因为此，我读研没有太多顾虑，不用天天惦记着早点儿毕业了去找工作，要知道，读研尤其是读博，绝大多数学生都会承受很大的压力，除了少数家境优越的，父母已帮联系好工作，来读研就是来镀层金的以外，多数学生回家就要面对亲戚们、邻居们甚至父母的质疑和冷嘲热讽。以前小地方出了个大学生是很光彩的事，现在不同了，你读完书毕了业已经快三十岁了，很多同龄人早就娶妻生子、有了稳定工作、买车买房，毕了业后发现，现今的高学历并没有想象中那么吃香，要看个人能力，更惨的是，还要看你的专业。除了拔尖儿的几个学生能够走各种人才引进项目找到份人人称羡的工作外，更多的普通学生都处在一个高不成低不就的尴尬境地，闷在学门里二十多年，除了看文献、做实验、打理简单的校园人际关系外，我不知道自己还有什么出众的能力，所学专业显然也不是社会紧需的，相关行业一直在走下坡路，想转行吧，又没有那个勇气，终究是不舍得放弃这个来之不易的学位。</p><p>再说回正题吧，研一入学时，可以说我的内心是激动和自豪的，感觉自己要出人头地了。第一年是集中教学阶段，课程很多，导师又经常出差不在学校，我过了一年自由自在的“放养”生活，以为跟在本科时一样，好好听课、认真完成作业、考试，就能收获荣誉。那一年导师基本上也没找我干什么，我就一直问师兄有什么我能做的，想要早点儿接触科研工作、早点儿发文章，但我又没什么想法，就干等着导师给选题、布置任务，这种清闲让我很焦虑；那段时间每次导师上完课，我都把他送到教学楼外他的车上，不会来事儿的我就想着能多跟导师接触接触，向他表明，我有时间有精力，同时也很上进、能吃苦，眼巴巴的期待着他能给我安排活儿干。就这样晃晃荡荡了一年，我选了很多课，每天白天上课、傍晚锻炼身体、晚上找个教室上自习，学校组织的一些活动，诸如合唱比赛等我也积极报名参加，一切都和本科时一样，第一学年我的最大目标就是拿到国家奖学金，最终所有条件都满足了，但研究生的国奖评选，成绩不太重要，文章才重要，我没有文章。回头再看，当时正是“十二五”末期，很多项目的钱都已经花光了，而“十三五”的项目还没开始，我导师花钱又十分谨慎，甚至抠门，看我没有主动列出研究计划、实验方案等，也就把我先搁着了。而作为一名研究生，应该学会自己发现问题、设计方案、解决问题，但当时的我面对陌生的科研工作，完全不知道从哪里入手，自身又缺少那种敢拼敢闯的劲头，一味的等待导师的指导，或者说安排，就这样耽搁了一年。</p><p>很快研二了，通过与学院里的师兄师姐交流，我大概开了点儿窍，参照着导师主持的项目的申请书，自己也尝试着写了个研究计划，毕竟很快就要做研究生开题报告了。我发给导师看，他不置可否，一直说自己很忙，让我先别管这个开题报告，等他忙完了再讨论。那一学期的确很忙，导师要组织一个不小的会议，而我们这边显然人手不够，我和几个师兄师弟跑前跑后，虽然忙但也还算充实，毕竟终于接触到“学术圈”的生活了。通过那几个月与导师的接触交流，我对他的了解也更深了一些，很多东西真的没有看上去那么光鲜。他把自己的事看得比别人的事都重要，对他的同事——学院里的其他教授——尚且如此，更别说对待我们这些学生了，我的开题答辩整整比学院规定的截止日期晚了一个月。这也体现出他的另一个特点：拖延，任何事情，不论是他的还是学生的，几乎都要拖到最后一刻，没到截止日期，哪怕有时间也不做，似乎拖到最后就能省下不少精力，因为没时间再做进一步的修改或是完善了，大概这样他会觉得心安理得，毕竟自己“努力”工作到了最后一刻；这种性格也体现在每天的工作中，他总是吹嘘——不只向我们，也向其他愿意听他说话的同事或者合作者——自己工作多么辛苦，每天都晚上一点以后才睡，且只睡四五个小时，现在我知道了，他是典型的晚上不睡觉、白天不起床，晚上睡得晚并不是说工作到深夜，而是饭后到夜里10点左右这段时间，基本就在看手机，进行他所谓的“社交”、“联络”，或者更甚，就是在刷新闻、朋友圈。几次和他出差，从来都是晚上十点多了叫我们过去，说是讨论问题，其实基本是在帮他处理一些杂事，真正轮到讨论我们的实验或者论文的时候，都快12点了，所谓“讨论”，也只是改改题目和摘要、加加参考文献，对着我们的实验计划一通指点，嫌这贵嫌那贵，不停的逼问做这些实验能够发什么级别的文章，每次都这样草草了事，他在嘴上还不吃亏，说是为了我们的事又忙到深夜。是的，在他看来，这些工作都是我们的事，他为之花一点儿时间都是作出了莫大的奉献，我们发文章时，他说都是他的思想、他的贡献最大，因此逐渐不满足于当通讯作者，几次要当一作和通讯。</p><p>又扯远了。我的研二生活总体还是在晃荡，从一开学就发给他采样计划、实验方案，硬生生拖了一年都没同意，或者说根本就没看。第二学期我进行了硕转博答辩，还跟他，一方面是早就想读博士，感觉读书是自己唯一的特长，硕转博总共五年，相当于还能提前一年毕业；另一方面是的确没任何成果，当时深感自己都没法正常硕士毕业，当然咯，那时还没把导师看得这么透彻。也是觉得自己年轻，且眼看科研工作马上步入正轨，想着给自己缓一缓，再用三四年时间做出一番成就。没想到导师也是这么个想法，我要是不转博，他可能还着急一些，毕竟我要样品没样品、要实验没实验、要文章没文章，想毕业一切都得抓紧；结果我转博了，一下多出三四年时间，导师不急了，我的采样计划也就一拖再拖，直到当年十月底才成行，相当于两年多过去了，我才刚拿到自己的实验样品。期间的几次寒暑假我也很少在家呆着，因为导师总想把我们拴在学校，我自己也想通过在时间上的大量投入来抵消效率的低下，但不肯动笔总是不行的，趁着假期我一直在自学编程和英语，想着这两样以后总要用到，先打好基础，现在看来，这都是当时给自己的懒惰找的借口，让自己忙起来以缓解科研工作上没有实质进展的焦虑。</p><p>出野外前，我们是要从项目里借钱的，光借钱这件事，不知道跟导师商量了多少次，从那年三月一直说到十月，第一次见识了导师最大的癖好：喜欢拿捏学生。每次跟他谈这个事，他都能找出不同的理由，包括：先准备硕转博答辩、先替我去做个学术报告、先等我整理完项目申请书、夏天那边山洪泥石流多不安全等等，总之就是他一直在忙，没时间管我采样的事儿，后来还挑我的日程安排的毛病，根本不问我需要采什么样品、到哪里去采，就一直说我计划的采样时间太长，长期出差不在学校会影响他的工作（就是说我出差采样这段时间没法随叫随到、给他干活儿了）。最终成行是在十月底，刚去了一个星期，导师就天天发短信催问什么时候能返校，并且多次质疑我效率太低，浪费了课题组的经费，野外采样这种事儿，本来该导师带领，或者由他动用关系联系当地的老师或向导带着我们，但我导师似乎对出野外采样这件事有着天生的厌恶，大概是觉得自己身份尊贵不应做这些脏活儿累活儿吧。我之前从未去过采样区域，所有的计划都是基于文献和相关网站上提取的信息，完全是摸着石头过河，因此怎么可能保证在XX地点采集到XX样品呢？他口口声声说自己认识多少位专家，真请他帮忙联系时，他每次又支支吾吾岔开话题，不仅对我们这些学生这样，对其他很多老师也是这样。</p><p>十一月初回到学校，又要经历另一场恶战：做实验，因为我们学校里没什么像样的检测分析设备，采回来的样品一般都是拿到或者寄到其他高校及生产单位完成相关实验，好处是可以选择不同的单位做实验，发挥它们各自的优势，坏处自然是费用较高。因此从列出实验方案到到寄出第一批样品又用了大约半年时间，期间多次讨论、协商，导师觉得基础实验不用做，可以直接引用研究区文献中的相关数据，高端的实验又太贵，要少做，同时要做一些别人没做过的实验，以显示创新性，可真等我列出一些比较新颖、国内较少见的实验时，他又不停的逼问做这么贵的实验等得到什么结果，能不能发好文章，说白了，就是想空手套白狼，不花钱、多办事。回头来看，那时的我也太实诚，或者说太死板了些，总担心没有得到他的点头同意就擅自进行实验，他会耍无赖不给报销测试费，因此一拖再拖，最后我忍无可忍不听他的废话了，他也没说什么，只是在报销测试费的时候再说一堆废话，并且明里暗里要求我给他熬几次夜干活儿。现在我明白了，导师是个很实际的人，他看重的是成果，测试费花多了就分多次报销，不一次给他太大的刺激，只要有了第一手数据，发表出漂亮的文章，他哪里还记得你花多少钱的事儿。</p><p>关于采样和做实验，前前后后拖了这么久，每次和导师协商基本都以争吵结束，但有件事给了我安慰，一个在国外混的不错的师兄要回国完成一个生产单位的开放基金，我读过他的很多文章，很有想法并且自成体系，他的单位什么的都在国外，因此做这个小项目需要挂靠一个国内的教授，就找上了我的导师。导师多次跟我说让我在这个项目上协助师兄，并且可以从他那儿学习研究方法和思路，一定能多发好文章。现在我明白了，这叫画饼，只是随口一说好安抚我不要总是跟他嚷嚷着出野外采样，但我当真了，靠着这种精神上的安慰慢慢放松了，天天只看文献不动笔，有一搭没一搭的学习绘图软件，看似每天都在用功学习、为以后奠定基础，实质上效率不高，而且一直在“奠定基础”，完全没有更进一步的尝试。更惨的是，所谓的“协助”就是帮取样品、帮拷数据、帮整理并打印研究报告这些杂活儿，师兄在国外有工作，所以只能偶尔回中国一趟，导师日理万机，于是所有这些边边角角的活儿都落在了我头上，而我的名字甚至不会出现在结题报告的致谢名单里，在这个项目里我只是一个秘书。导师最爱说你去做XX事，这对你也是一种锻炼，能学到XXX，然而，我发现自己根本无法从这个小项目里学到太多，师兄做的东西主要基于生产单位提供的第一手资料，而获取这些资料是签了保密书的，我拿到了也无权使用，我当时跟导师申请做那么点儿实验都费劲，何况如此大量的系统的数据。认清现实后，就抓紧进行自己的实验工作了，一方面导师看拖了我这么久，渐渐的松了口，另一方面我也学会了先斩后奏，先把实验做了，报账的时候再跟导师说好话或者做保证：一定发一区等等。</p><p>进入我读研的第四个年头，事情终于逐渐步入正轨，但我太贪婪了，根本没有理清自己的研究方向和思路，一张张接住导师画得饼，这也想做，能出好成果，那也想干，不会费太多精力。总之就是感觉自己能放开手脚了，哪一样也舍不得放弃，但我本身工作效率并不高，如此大范围的铺开进行实验工作，就导致真正写文章的时候发现，每个方向都只能浅浅的讨论一下，一是精力有限，二是样品数量、实验种类不足，反倒不如专攻于一两个研究方向，所谓把力量集中于一个点，同样的实验经费就能做的更细、更专精。我本身眼高手低，在已经有了大量实验数据的前提下，还总想接着做更多实验，获得更完善、全面的数据后再动笔，这实际上是一种逃避，总给自己找理由以逃避未知的写文章、发文章领域，一方面我深知文章对毕业、对以后工作的重要性，另一方面我就是没有勇气没有决心动笔，最后竟然是在导师的催促下，草草完成了篇专刊文章，至今都不好意思拿出手。</p><p>在这第四个年头里，我萌生了出国交流一年的念头，原因有三：一、我向往国外的留学生活，既然家境条件无法支持我出国读书，那我就申请公派留学，去国外访问交流一年；二、导师逐渐开明，不十分反对我们作为联培博士生出国交流了；三、跟导师商量好了，出国一年我就延期一年，相当于多给自己一年时间来写文章，为自己的拖延症买单。之前总觉得自己文章不行，没有竞争力，后来想到与其这样干等着，不如做出点儿行动，拼一把。于是我开始了边搞科研边准备雅思考试的紧张生活，当时还没敢告诉导师我的出国想法，准备等到木已成舟时再跟他讨价还价，结果雅思没考过，又赶紧报了留基委的英语培训班，集中学习了将近二十天，总算拿到了通行证。当时已快放寒假，我赶忙回学校跟导师谈这件事，跟他说我虽然出国了但也要延期一年，相当于多给他干一年的活儿，而且能促进他和国外相关专家的交流布拉布拉，最终导师不仅同意了，还给我推荐了个外导，我就这样搭上了当年的公派留学申请末班车。</p><p>申请手续之繁琐超乎了我的想象，需提交各式材料，还要找多位领导、教授签字，同时还要跟外导联系，请他发邀请信等，忙碌了一个寒假，终于在截止日期前提交了所有材料，然后就开始进行新的实验工作，争取在出国前完成计划的测试分析工作量，在国外就安心处理数据写文章。那一年真的很忙碌，不仅有学习工作上的事，也有家里生活上的事，我感到自己起步的太晚，于是更加绷紧神经快步向前。现今做毕业论文的很多数据都是那一年完成的，做实验的同时，文章也没有落下，连着发了两篇，虽然级别不是太高，至少达到了毕业要求，腰板也硬了。</p><p>由于我去的是一个没啥名气的偏文科学校，所以在国外交流的一年没什么机会进行实验工作或是与同专业的同学交流，我的数据也够多了，因此就埋头写文章，我对自己的要求比较高，总认为之前发的几篇文章拿不出手，想要发两三篇有分量的。在国外的一年我的学习工作状态很好，不用听导师絮絮叨叨，也不用再为实验经费跟他争的面红耳赤，更不用给他熬夜干杂活儿，而且我越写越顺手，感到自己没那么差，亡羊补牢，要抓紧时间把失去的都补回来。我没有按照导师之前指点的研究方向来写，因为有几个关键问题我自己都解释不了，我选了一个相近的方向，自以为很新颖好出成果，之前也做了不少相关实验，比较有底气。此时我又犯了个错误，觉得自己积压了这么多的数据，一定要写一篇大文章，篇幅太长就拆成两篇，从不同的方面研究、讨论问题，然而，正如我之前说的，我做的实验太杂太散，研究区铺的太大，看似数据丰富，但能够相互佐证的很少，不成系统。总之，成文后自我感觉良好，试投了几个中意的期刊后，屡屡连编辑那关都过不了，着实给了我很大打击，本来计划的是在国外至少中两篇文章，回国后用小半年时间把这几篇文章汇总整理一下，作为学位论文并进行答辩。结果第一步就出了岔子，多位编辑和审稿人的意见都很一致，就是我的文章没有新意、思路不清、数据匮乏、结构混乱、内容空洞等等，我想到可能会被拒稿，但真的没预料到如此负面的评价，那段日子很难熬，一方面要应对导师的催促和质问，另一方面要缓解自己的焦虑和控制几近崩溃的神经，我可能是从小受的挫折太少，抗打击能力太弱，这一点挫折就几乎击溃了我。</p><p>匆匆结束国外交流后回国，已接近除夕了，我放下投稿、毕业的这些烦恼，好好的在家里放松了一下，和爸妈一年没见，有很多喜悦想要分享。然而快乐的日子总是过的很快，我总是得正面面对这些挫折，正赶上新冠疫情不能返校，我就在家中准备学位论文，效率虽然不高，但行动起来总是让人安心。很多同学的学位论文写的很快，因为可以将已发表论文翻译成中文，拼拼凑凑就是一篇不错的学位论文，我发表的文章很散，甚至研究的东西都不太一样，很难拼凑，没发表的攒在手里的这几篇却又出师不利，屡屡被拒，我没有信心将它们改成学位论文，即便这么做了，工作量也不够。没办法，只能一边修改要发表的文章，一边从零开始写学位论文，还按照导师之前指点的研究方向来写，这种紧迫感使我非常焦虑，进一步降低了工作效率，好在实验数据比较丰富，能够自圆其说。5月份的答辩我没赶上，延期到了8月份，当时自然是松了一口气，毕竟又多出了三个月的准备时间，但实际上内心更加急躁，我已经读了六年研究生了，家人和朋友会在明里暗里让我感受到压力，6月份一篇文章被接收，我也没太多时间高兴。因为我无法腾出精力来找工作，投了几份简历大多不了了之，好的去不了，一般的不想去，高不成低不就。而且越是这种紧张焦虑的思想状态，我就越是效率低，越是效率低越是从早到晚坐在电脑前敲字，进而身心俱疲。我知道这种工作模式很不好，是个恶性循环，但我当时没有心力去做改变，只是尽可能保证自己作息规律，想着再坚持一下，就快到达终点了。</p><p>临近答辩前的两周，精神紧绷到了极点，各种不良情绪纷至沓来，导师也开始一天好几遍的催促，那时学校还在封校状态，我和导师都是通过视频会议联系，他提出我的论文要大改、要加东西，我知道自己写的不好，论文中的很多部分都没经过深思熟虑和严谨论证，甚至还有不少错别字，我一面尽力和他协商，一面尽力完善，用了三四天时间又加了一章内容，并补充了些图片，大改了摘要、结论、创新点等部分，用了一天多的时间做好了PPT，然后也是反复的修改。我的导师喜欢在前期拖着、最后关头发力，这一习惯显然也影响到了我，甚至到答辩前15分钟了，我都还在往PPT里插图片。好在和师兄师姐们说的一样，答辩本身倒没有那么大的难度了，尤其我是视频答辩，坐在家中讲自己的研究成果，心理上总体是放松的，由于只有我一个学生答辩，时间稍长了些，前后共两个半小时，终于圆满完成。</p><p>曾经看过很多文章谈及年轻人的迷茫和彷徨，我一度很庆幸自己没有这样的困扰，甚至有些自豪：我不平凡。我今年28岁半，博士毕业了，却突然有了这种不知所措的感觉，我在学校呆了二十多年，之前说起未来，我就只有一个目标：继续读下去，仿佛这样就能够出人头地，现在我毕业了，站在人生的十字路口，却不知该何去何从。我不是一个优秀的博士毕业生，不能通过各种人才引进计划到高校去教书，小城市里的工薪家庭，口碑不太好的导师，也让我没有什么人脉或关系能够进一些大企业工作，所学专业比较冷门，又在走下坡路，甚至考公务员都只能选报“不限专业”的岗位。我为自己读研前几年的过失和不成熟付出了代价，挣扎着毕业后发现，连份像样的offer都没有，告别校园，踏上慢慢求职路，人生迅速的翻到了下一页，快得我猝不及防。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>当下热点记录</title>
      <link href="/posts/hot-news/"/>
      <url>/posts/hot-news/</url>
      
        <content type="html"><![CDATA[<h1 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h1><h2 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h2><ol><li>10月11日，一篇微信文章《<a href="https://mp.weixin.qq.com/s/KjX0fWZhAIt_vXqZ2Fnmhg" target="_blank" rel="noopener">我潜伏上海“名媛”群，做了半个月的名媛观察者</a>》突然在朋友圈和微信群里爆红，刷新了人们的认知。在接下来的整个十月中，微博和小红书中，只要有相关晒高端场所的博文出现，就会有相关的评论出现。。。</li><li>从这个月中旬直到现在，“早安，打工人”，在各种朋友圈，新闻和公众号出现。</li><li>10月25日，新疆爆出130+新冠肺炎无症状感染者。</li></ol><h2 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h2><ol><li>本应该11月4日上市的蚂蚁集团，在11月3日晚突然被国家叫停。表面原因是因为马云说中国的金融体系没有监管导致被约谈而产生的，实际真的这么简单吗？</li><li>美国总统大选。在特朗普拿下了历史上几个决定性的摇摆州的选票后，大家都以为特朗普会连任的时候，几个州的选票接连翻蓝，最终拜登先行到达270票，基本可以赢了。但是特朗普不服，搞起各种事情，试图挣扎。</li><li>11月8日，浦东祝桥镇确诊一例新冠病例，把上海又带入了紧张状态。11月11日晚，微博热搜，上海闵行某高校一名学生感染，将上海疫情继续推上热点。半小时后，官方通知没有确诊，幸好。</li><li>2020年11月17日早，多家企业在《深圳特区报》发布联合声明，深圳市智信新信息技术有限公司已与华为投资控股有限公司签署了收购协议，完成对荣耀品牌相关业务资产的全面收购。出售后，华为不再持有新荣耀公司的任何股份。</li><li>20日，上海再增2例本土感染。21日新增一例。太难了。</li><li><a href="https://www.youtube.com/watch?v=4GvGQ7fsYqA" target="_blank" rel="noopener">马保国事件</a>。他的一番话引起了网络上大家的二次创作。或许很久之前就有这个视频了，但是为什么今天才火呢？而且导致人民日报都发声了，停止这场闹剧。导致B站相关的视频都被下架。</li></ol><h2 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h2><ol><li><p>中科大量子计算机比最快的超级计算机快一百万亿倍，比去年谷歌发布快一百亿倍。<a href="https://mp.weixin.qq.com/s/wBulxqmifpl2YPtHuRPOWQ" target="_blank" rel="noopener">比最快的超级计算机快一百万亿倍！中国科学家实现“量子计算优越性”里程碑</a></p><blockquote><p>北京时间12月4日, 国际顶尖杂志《Science》刊发了中国科学技术大学潘建伟、陆朝阳等组成的研究团队的一项重磅研究成果。</p><p>中国科学技术大学潘建伟、陆朝阳等组成的研究团队与中科院上海微系统所、国家并行计算机工程技术研究中心合作，构建了76个光子100个模式的量子计算原型机“九章”，实现了具有实用前景的“高斯玻色取样”任务的快速求解。</p><p>据现有理论该量子计算系统处理高斯玻色取样的速度比目前最快的超级计算机快一百万亿倍（“九章”一分钟完成的任务，超级计算机需要一亿年）等效地其速度比去年谷歌发布的53个超导比特量子计算原型机“悬铃木”快一百亿倍。</p></blockquote><p>在下认为，这标志着中国在量子计算机领域已经处于世界领先水平。可喜可贺。</p></li><li><p>12 月 8 日晚，苹果官网上架了Airpods Max,售价4399元。身边的朋友们都大呼太贵了，不值得，只有苹果才敢定价这么高。然后不就在朋友圈看到有朋友说，这家伙开售的第一天，就已经排队到三个月后才能发货了。果然有钱人还是多啊。随后的几天，网上的评测也渐渐地出现了，毫无意外，都是说这个耳机多么牛逼多么值之类的。苹果真的是苹果，虽然产品贵，但是是真的好。</p></li><li><p>13日，社区团购在网上的声音越来越大。一个星期前，美团优选已经渗透到我们那个离县城100公里的穷山村里了。社区团购的普及速度是我完全没有预料到的。不过这次网上对社区团购的舆论非常多，认为互联网公司没有为科技进步做出贡献，反而强调了基层商贩们的饭碗，实属中国特色。</p><p><a href="https://www.zhihu.com/question/434417447" target="_blank" rel="noopener">如何评价媒体评社区团购：互联网巨头理应在科技创新上有更多担当和追求，别只惦记着几捆白菜？</a></p></li><li><p>13日，赛博朋克2077,当前非常火爆的游戏之一。发售第一天的销售量，就已经回本了。什么时候中国也能制作出这种令全世界玩家都心动的游戏。</p><p><a href="https://mp.weixin.qq.com/s/uK7Ae66ma6Zajxck8ZJnqw" target="_blank" rel="noopener">太火爆！《赛博朋克2077》已经回本，官方发布1.04更新</a></p></li><li><p>阿里接受国家调查。</p></li><li><p>12月31日，国产疫苗上市。宣布免费使用。</p><h1 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h1></li></ol><h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><ol><li><p>pdd新疆的多多买菜，98年女员工凌晨1点半下班后猝死在街头。pdd不承认官方知乎号发表的回复，知乎官方出来打脸。后pdd又说是合作商所为。</p><blockquote><p>2020-12-29：拼多多的一名多多卖菜的员工熬夜加班后过劳死<br>2021-1-04日8时19分：拼多多官方账号创建回答：「你们看看底层的人民，哪一个不是用命换钱，我一直不以为是资本的问题，而是这个社会的问题，这是一个用命拼的时代，你可以选择安逸的日子，但你就要选择安逸带来的后果，人是可以控制自己的努力的，我们都可以」。</p><p>2021-1-04日8时20分：拼多多官方账号自行删除了上述回答</p><p>2021-01-04日18时：知乎发声确认拼多多在知乎关于员工猝死的回答是由拼多多官方发布</p><p>2021-01-04日：拼多多回应：账号管控不严，该内容系拼多多营销合作供应商员工用个人手机发布，不代表官方态度</p><p>2021-01-05日：知乎禁言拼多多账号，理由是违反知乎社区管理规定。</p></blockquote></li><li><p>特朗普支持者闯进国会，有人被执法人员枪击受伤。</p><p><a href="https://www.zhihu.com/question/438235275" target="_blank" rel="noopener">https://www.zhihu.com/question/438235275</a></p></li><li><p>1月9日18时，拼多多通报了一例员工当日在长沙家中跳楼自杀的事件。</p></li><li><p>网传拼多多员工因在网上发布同事被抬上救护车的照片，被管理层逼迫主动辞职、赶出公司？事件真实性如何？</p><p><a href="https://www.zhihu.com/question/438581129" target="_blank" rel="noopener">https://www.zhihu.com/question/438581129</a></p></li><li><p>1月9日，蔚来NIOday发布旗舰轿车ET7，同时发布150度电池和第二代换电技术。</p><h2 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h2></li><li><p>25日，<a href="https://www.reddit.com/r/China_irl/comments/mxynrf/%E6%B7%B1%E6%88%BF%E7%90%86%E4%BA%8B%E4%BB%B6%E4%B9%9F%E5%A4%AA%E6%81%90%E6%80%96%E4%BA%86%E6%9C%89%E6%97%A0%E6%87%82%E5%93%A5%E6%9D%A5%E8%AE%B2%E8%AE%B2/" target="_blank" rel="noopener">深房理</a>。集资买房。</p><img src="https://img.hifool.cn/typora/20210425193746.png" alt="image-20210425193746573" style="zoom:11%;"></li><li><p>晋江月逝水</p><blockquote><p>离开前也不知道说什么，就想到哪说到哪吧。<br>前天是我的生日，和跟陈博鉴先生结婚后过的第一个生日一样，他不在我身边，没有和我说生日快乐。<br>不同的是，那次他因公公受伤去外地，这一次，是我回不去了。<br>我跟陈先生开始的很美好。<br>十五年前，他背不出书，总在语文课睡觉，老师让我盯着他背书，他拐着我去网吧打游戏；<br>十年前，我在厦门一家游戏公司实习，他放弃当教师，赶到厦门随着我扎进了游戏行业；<br>五年前，我在上海被无良老板坑，他从北京跑到上海，带我去博物馆带我去迪士尼坐过山车。<br>然后我们就结婚了，从朋友，到恋人到夫妻，过度只有三个月。<br>起初只领了证。领证后的第二个月，他父亲出了意外伤得很重。他家经济条件不好，他独自在外多年没有储蓄习惯，我刚到北京工作才敲定，拿出了小家庭不多的钱让他带给他父亲。<br>婚后都是茶米油盐是真的，甜蜜褪去，哪哪都需要付出精力，包括贴补我们的婚礼赚钱。他向来心大，我只能多操心一些。<br>我重新拿起笔，写一些兼职的稿子。<br>婚礼那天摔跤仿佛是个预兆，我摔断了尾椎，却强撑着不敢辜负家长的期盼，踩着十几厘米的高跟鞋走完了流程敬完全场的酒。<br>总是忍不住想，会不会是我太要强，以至于从来没人觉得我也会有脆弱的时候。<br>后来，工作稳定了，我们都升职了，经济变好了，这写东西的习惯捡起来却又放不下了。<br>我回到了晋江，登陆了尘封许久的账号，重新写文。<br>我是个不会腻歪的理性主义者，总是直来直去，能想到的最浪漫的事，大抵就是将他藏进我文字的角角落落吧。<br>我写的每一个主角身上都有他的影子。<br>或是经历，或是性格，或是长相细节，或是习惯。<br>唐子朝是他，在我和别人面前有两副面孔；陈于鉴是他，总有新奇的想法遇到事情总会逃避；李陌也是他，害羞又无赖。<br>可惜他是个品味正常的直男，永远都看不到我小说的结尾。<br>所以当去年12月发现他出轨后，我很长一段时间坐在电脑前一个字也打不出来。<br>他的出轨，于我不仅仅是失去了一个法律上的丈夫那样简单。<br>我一直是个不合群的人，不懂这个世界有哪里值得留恋。<br>他曾经是我唯一的光，让我相信，这个世界上还有美好的事物，还有人无条件爱着我支持我，还有人没有我就活不下去。所以我要好好活着，活久一点，开心一点，我贪心地想看他老去的模样。<br>而忽然之间，一切都变得毫无意义了。<br>去年底他先行到杭州工作，12月，语音告诉我，他想过单身生活，他厌烦了婚姻，我们兴趣爱好不同性格不同，我鼓励他努力让他压力太大，他要离婚。<br>他说完后，我动身前往杭州，翻了从未翻过的手机，发现他和别人在一起了，开开心心筹划着未来，他并不忙，告诉我加班的那些周末只是在陪着别人开酒店游西湖计划逛黄山。<br>事情败露，他逃了，留下全世界崩塌的我发着烧独自坐在他的出租屋哭了一天一夜。<br>第二天凌晨四点，我起床，从他租的出租屋顺着马路一直走，吹冷风吹到天亮。等眼泪被吹干了，给他打电话，和他说我同意离婚，他终于肯来见我了。<br>我们坐在我丈夫买的我却第一次乘坐的车上，我冷静地问他和别人的开始和后来。<br>原来眼泪哭干以后是真的不会再哭了，也或许是意识到面前这个人不再是那个当我哭便会逗我笑的人了，心里再疼，也会自己学着笑。<br>他却忽然后悔了。哭着说他只是寂寞，说他太想我，说他第一次离开我这样久飘过了头，说他以为我们要异地很久太绝望。<br>他删掉了小三，将所有的账号密码对我公开，拽着我的手走路，他哭了整整一周。<br>我坚定地认为我应该离婚，我无法再信任他了。也用了些不光彩的小话术，让他误以为即便离了婚我们还能重新在一起。<br>因为他的工作、家长的阻挠、离婚冷静期，离婚的事一拖再拖。<br>某个去办理离婚证的早晨，他临出门变卦，我终于忍无可忍，情绪爆发，撕掉了我们的结婚照。<br>他像游魂一样回到房间，情绪和脸色都极差，梦呓一样地说他知道一旦离婚他就再也见不到我了他不会去的。<br>我不得不承认我不够心狠，那一刻硬撑了许多日的硬心肠碎成了渣渣。<br>我答应再给我们一次机会。<br>那时，我已预料到之后的生活。接受一个出轨的男人，意味着当他再次出轨，所有人只会说我活该。我知道，我只能接受，我到底看不了他失魂落魄。<br>这之后，他在杭州办了离职交接，预备换一座城市重新找工作，一切好像回到了最初，好像什么都没有发生过的模样。<br>我努力去淡忘他做过的事，忘不掉就努力不去想关于他的事，一整晚一整晚的失眠，很多天不怎么吃得下东西。<br>这中间短短几日又发生了许许多多的情感拉扯，他的态度开始反反复复，我们在离婚与不离婚之间找不到任何平衡点，直到我精疲力尽，抑郁再度复发。<br>压垮最后一根稻草的约莫是他突然失踪一天联络不上吧。我报了警，民警同志告诉我找不到他，说上一次他的身份印记是几天前的某家酒店。不在我们家附近，更不在他父母家附近。我查了他的消费记录，发现他开始反复的那天，购买了双人电影票。<br>我曾经唯一的光，变得何其愚蠢，蠢到以为小三被他甩过后再次和他婚外情怂恿他疏远父母是真的爱他。<br>破晓时他回到家，承认方婷来到了我们的城市，承认她和他去开了房。我已全然不认识这个站在我面前的人了。<br>我闭上眼睛，依然记得当年我们没毕业，我玩游戏，想拍装备钱不够，被人嘲笑穷酸和他发牢骚。他一个晕3D的人，下载了游戏建号建帮会，带着我清地图攒出帮会资金买领地，然后每天定闹钟种菜收菜。<br>我还记得，我们刚结婚时，说到生孩子。我说我想生两个，不至于像我们这样孤单。他查了一晚上资料，一夜未眠，第二天哭着对我说：老婆老婆，可不可以不生，羊水栓塞的几率太高了，我不想为了个素未谋面的小孩失去你。<br>婚后过得第一次情人节，我说想要花，他给我买了一束蓝色的满天星干花，一直在花瓶里放到我们搬家。<br>我骗他说我做的第一份饭是给他吃的，其实不是。第一次做饭，蛋包饭煎糊了，我趁他没下班偷偷吃掉了，给他吃的是我做的第二份饭。<br>每次吵架，总是他先哭，他还怕蟑螂，指甲盖大的蟑螂也怕，一定要我打死扔进垃圾桶才敢回屋。他怕疼，爱撒娇，遇到不开心的事情，总要我抱着他慢慢哄。<br>他还很粘人，疫情在家时，我忙着写东西，他一天要跑书房十几趟。我嫌他打呼噜太响要和他分开睡，他就赖在地上不肯起来，找着借口烦我。<br>时光为什么不能停留在那个时候呢。<br>其实现在回头看，从去年十二月，我身体里的灵魂大约就已经死去了吧。<br>他说，方婷是个多好多善良的女人，他怕我，方婷也怕我。他处处维护她，将她的信息保护的滴水不漏，好像我多厉害，动一动手指就能让一个隐匿在暗处的女人灰飞烟灭。<br>他不敢亲自做决定，在我和方婷之间摇摆不定。我当着他的面，用他的手机拨通方婷的微信，问这个“善良的女人”，你知道你们对我造成了莫大的伤害吗？<br>她避而不答，不停地重复着“他和我在一起更开心”，似乎真爱永恒伤害我天经地义，试图将话题引到我是个多糟糕的女人上。<br>仿佛我不是他的妻子。<br>她当然知道，他也知道，只要没有长期同居，他们就不算犯法，我拿她毫无办法。<br>我当然可以比她婊，写文多年，什么样的人设该做什么样的事情，我心里明明白白。<br>可是有什么用呢。我爱的那个人，那个爱我的人，已经消失了啊。<br>我要婊给谁看？<br>我自问我这一生从未愧对过任何人、从未对任何人心存恶意，我不理解，为什么别人的过错最终要由我来承担。<br>我唯一的光熄灭了，再也亮不起来了。<br>一周多前，我拖着行李独自离家，带着我最好看的衣服和最喜欢的小杯子，却悲哀地发现，偌大的世界，我竟然想不到任何想去的地方，找不到任何一个留下的理由。<br>衣服和杯子，都不能让我再开心一点点了。<br>他从未认真找过我，集中在某些时段发了些微信打了些电话，心安理得后，便趁着我离家，去和另一个女人幽会。<br>既然如此，当初又为什么不肯离婚呢，就为了看看一个爱你的人能将底线放到多低吗。<br>可我依然想多看他一眼，一眼就好。<br>回到家，等到天黑才等回他。<br>他刚从方婷那里回来，欺骗我说他们已经断了联系，缩在小房间陪她玩LOL，以为我蠢到看不出来中路那个叫花花恒恒泡泡的光辉女郎是方婷。到了休息时，又如同个没事人一样，抱我，亲吻我。<br>我真的累了。<br>太累了，永远都恢复不过来的那种疲累。<br>对他的了解埋入了我的骨髓，他动一动手指我都能猜到他想做什么。那些他自己都没想到的事情，我却已经想到到了那个地步他会怎么想怎么做。<br>所以他说他怕我，因为我太了解他，他在我面前永远无所遁形。<br>却不知道，我连他多年前和我的聊天记录都保留着，才能这样了解他。<br>我终于开始觉得他恶心。<br>再次离家时我带上了他给我买的二手NS，昨天看着动森发了一天呆。<br>去年这时候，他拐着我玩动森，我们一起找小动物一起慢慢建设小岛。后来，他腻味了不玩了，并且吐槽我一个游戏总玩很久。<br>我说，因为我喜欢一件事物或一个人，会一直喜欢下去，不会腻的。<br>他说，游戏和人不一样，他喜欢玩新的游戏不代表他是个喜新厌旧的人。<br>真的不是吗？<br>去年我好不容易建好的小岛没有了，他第一次出轨时和方婷约着去黄山，为了能在破解的NS里塞进更多游戏陪她玩，删掉了我的动森，数据找不回来了。<br>我买了卡带，试着想建回一模一样的岛，可是从地形到小动物到家具图纸，哪里都不一样，我只徒然有个和以前相同的岛名，名字底下，是我如何努力也找不回的曾经。<br>我再没有精力用半年时间去重新种一次蓝玫瑰了。<br>我没有那个与我相爱的小胖胖陪我钓鱼捉狼蛛了。<br>这种无奈和绝望，一如我意外怀上了宝宝，它的父亲却根本不想让它出生。<br>原来，不是所有人结发为夫妻，都会恩爱两不疑。<br>一生一世一双人，多好的词句，多绝望的诅咒。</p><p>很抱歉，我唯一对不起的你们，我不会再开新文了。错别字连篇BUG遍地的存稿发给了朋友，但她很忙，我不知道她有没有时间帮我改稿。对不起，非常对不起。<br>我只是单纯地无法与这个世界和解了。<br>如果文还在发，就当做我还在吧。如果不发了，请接受我的一万句对不起。<br>我真的撑不下去了，请原谅我。</p><p>我穿着这双你接我回家时亲手为我穿上的小红鞋，自欺欺人地假装你亲自送我们去往安宁之地。<br>我不会再痛苦了，你也不会了。<br>如有来生，只愿我和你死生不遇，永无再会之期。</p></blockquote></li></ol><h2 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h2><ol><li>5月22日，袁隆平去世。吴孟超去世。</li></ol><h2 id="7月"><a href="#7月" class="headerlink" title="7月"></a>7月</h2><ol><li><p>河南郑州大暴雨。一小时降水量超过200毫米，已经比去年七月的整个降水量（150毫米）都要多。很多人都被淹死了，地铁也被洪水倒灌。这次大雨让我认识到了人类在自然灾害面前是多么的渺小。</p></li><li><p>鸿星尔克在即将倒闭的情况为低调的为河南捐款5000w元，被网友发现后大力宣传与表扬，直播间的产品被卖爆了。</p></li><li><p>“烟花”台风，碰上农历十五海水涨潮，导致浙江沿海区域的水排不出去。目前台风还没有正式登陆，但是在沿海区域的雨已经很大了。估计会造成不小的影响，但愿不要造成太大损失。</p><p><img src="https://z3.ax1x.com/2021/07/25/Wg8w6I.png" alt="image-20210725123214647"></p></li><li><p>7月底，疫情再次在南京席卷而来。每个一段时间总是在某个城市出现几次。还好党和政府做的好，每次总能及时遏制住疫情的扩散。</p><p><img src="https://z3.ax1x.com/2021/07/28/WI51eO.png" alt="image-20210728092130705"></p><h2 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h2><ol><li>疫情在七月底八月初迅速扩散。似乎是因为这次是德尔塔毒株的原因，导致传播速度变快。在我刚来北京实习的第一天，北京公布了两个中风险地区，我这有点难顶啊。</li></ol></li></ol><h1 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h1><h2 id="2月"><a href="#2月" class="headerlink" title="2月"></a>2月</h2><ol><li>丰县铁链女，8孩事件，将人口拐卖事件重新拉回公众视野。</li><li>2月24日，普京宣布在乌克兰展开军事行动。俄罗斯乌克兰正式打仗？</li></ol><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><ol><li>14日，准封闭管理第一天。上交疫情有点严。希望疫情能够快快过去。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中使用代理</title>
      <link href="/posts/setting-proxy-in-linux/"/>
      <url>/posts/setting-proxy-in-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于国内网络环境的原因，在访问某些网站时速度较慢或者干脆不能访问，所以我们需要通过代理的方式来加速我们的网络，在windows中相比大家都已经非常熟练，那么在服务器中如何使用代理加速自己的网络呢？下面就让小编带大家来学习一下吧。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>使用袋里的前提是你要能够fan qiang，可以自己搭建，也可以购买。如果没有的话你可以购买我现在使用的，一个月5元挺划算的，从2019年2月至今都平稳运行，即使在重大节日期间也能够正常使用。windows，mac，ios， 安卓都能使用。可以点击<a href="https://sockboom.site/auth/register?affid=301869" target="_blank" rel="noopener">这里注册</a>, 注册完成后，根据用户中心首页的教程设置相应的客户端。</p><h2 id="windows配置"><a href="#windows配置" class="headerlink" title="windows配置"></a>windows配置</h2><ol><li><p>按照<a href="https://www.speederss.best/user/tutorial?os=windows&amp;client=cfw" target="_blank" rel="noopener">教程</a>中配置好以后，打开软件会是这个样子</p><p><img src="https://img.zhangruiahu.cn/typora/20200913103154.png" alt="clash主界面"></p><p>可以在<code>Proxies</code>界面看到所有的节点，可以切换不同的节点。</p><p><img src="https://img.zhangruiahu.cn/typora/20200913103229.png" alt="clash Proxies界面"></p></li><li><p><code>General</code>界面中的<code>System Proxy</code>开关为是否启动代理。当你想上google的时候就打开他，不想用的时候就关闭他。</p></li><li><p><code>General</code>界面中的<code>Allow lan</code>开关为是否允许局域网中的其他设备使用此代理。为了能够在我们其他的设备上（例如linux服务器中）使用这个代理，因此我们需要打开这个开关。</p></li><li><p>获取自己的ip地址。打开cmd窗口，输入命令<code>ipconfig</code></p><p><img src="https://img.zhangruiahu.cn/typora/20200913104048.png" alt="获取windows的ip地址"></p><p>这里有多个ip地址。有无线网的ip地址<code>无线局域网适配器WLAN2</code>的<code>10.223.187.91</code>，有有线网的IP地址<code>以太网适配器 以太网</code>的<code>10.10.82.134</code>， 推荐使用有线网的ip地址，因为这个更稳定？</p></li></ol><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="使用工具——proxychain4"><a href="#使用工具——proxychain4" class="headerlink" title="使用工具——proxychain4"></a>使用工具——proxychain4</h2><p>之前就听说过同学使用<code>proxychains4</code>这个工具在linux端使用代理，我当时一直使用的是下文说的export http_proxy的方式，觉得这种很方便，所以没有了解proxychains4这个工具。直到体验了一下proxychains4后，才发现，真香！</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/rofl0r/proxychains-ng.git<span class="token function">cd</span> proxychains-ng<span class="token comment" spellcheck="true"># --prefix指定程序的安装位置,--sysconfdir指定配置文件存放的位置,可以根据自己的需要更改。更改后需要相应的更改下方环境变量的位置值</span>./configure --prefix<span class="token operator">=</span><span class="token variable">$HOME</span>/proxychains-ng --sysconfdir<span class="token operator">=</span><span class="token variable">$HOME</span>/.proxychains<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span class="token function">make</span> install-config <span class="token comment" spellcheck="true">#installs proxychains.conf</span><span class="token keyword">echo</span> <span class="token string">"PATH=\<span class="token variable">$PATH</span>:<span class="token variable">$HOME</span>/proxychains-ng/bin"</span> <span class="token operator">>></span> ~/.bashrc  <span class="token comment" spellcheck="true"># 添加到环境变量</span><span class="token function">source</span> ~/.bashrc</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑<code>$HOME/.proxychains/proxychains.conf</code>文件，将最后一行<code>socks4  127.0.0.1 9050</code>替换为你的代理方式，IP，端口。</p><p>例如我的为`socks5       192.168.2.201  7890  获取IP的方式见上面。其中sock5代表代理类型，也可以是http或者https。</p><p>至于端口号，clash的http端口，https端口，socks5端口都为7890，shadowsocks的端口为1080.其余的软件请自己看。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>配置好后使用方法很简单，在你需要使用代理的命令前面加上<code>proxychain4</code>即可。例如<code>proxychains4 curl www.google.com</code> 如果有一串乱码出现，就说明你成功啦。</p><p><strong>其实到这里已经可以结束了。后面为我曾经使用的另外一种方式，配置较为繁琐，可以不用阅读（没有删除的原因是为了凑博客字数….)。</strong></p><h2 id="使用环境变量设置http-proxy"><a href="#使用环境变量设置http-proxy" class="headerlink" title="使用环境变量设置http_proxy"></a><del>使用环境变量设置http_proxy</del></h2><p>linux中设置袋里的方式比较多，我这里简单说几种我目前所用到的几种设置方式。</p><p>###通用袋里</p><ol><li><p>首先给出方法，再给出说明。</p><p>在命令行中运行如下命令。把<code>10.10.82.134</code>替换为你的windows的ip地址，具体方法参考上面。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> http_proxy<span class="token operator">=</span>http://10.10.82.134:7890<span class="token function">export</span> https_proxy<span class="token operator">=</span><span class="token variable">$http_proxy</span></code></pre><p>运行<code>curl www.google.com</code>，如果有一大串看不懂的字母出现，说明你已经成功了。</p></li><li><p>这种方式只会在当前的shell环境中有效，也就是说，当你重新打开一个窗口时，需要重新运行这两个export的命令才能够再次使用代理。</p></li></ol><h3 id="yum袋里"><a href="#yum袋里" class="headerlink" title="yum袋里"></a>yum袋里</h3><ol><li><p>有时候所在环境无法访问外网，或者yum下载非常慢，就可以使用代理了。配置yum代理需要有sudo权限才行。</p></li><li><p>在yum的配置文件中加入代理</p><pre><code>sudo vim /etc/yum.conf  # 加入下面几句proxy=https://10.10.82.134:7890proxy_username=usernameproxy_password=password</code></pre><p>把<code>10.10.82.134</code>替换为你的windows的ip地址，如果clash代理有设置用户名密码就在上面填上，如果没有就不需要<code>proxy_username</code>和<code>proxy_password</code>这两行。</p></li><li><p><strong>建议使用完后立即取消代理(注释添加的这些内容即可），否则代理服务器没有打开时无法使用yum会异常的难受。</strong></p></li></ol><h3 id="maven袋里"><a href="#maven袋里" class="headerlink" title="maven袋里"></a>maven袋里</h3><ol><li><p>在使用<code>mvn install</code>时有时会从google的网址上下载东西，所以可以在需要的时候配置一下代理。</p></li><li><p>如果存在<code>~/.m2/settings.xml</code>文件直接更改就可以，如果不存在，可以从maven的安装目录的conf文件中复制settings.xml文件到<code>~/.m2/</code>目录下，或者从<a href="https://img.zhangruiahu.cn/typora/settings.xml" target="_blank" rel="noopener">这里</a>下载，放到<code>~/.m2/</code>目录下。</p></li><li><p>编辑settings.xml文件，在<code>&lt;proxies&gt;</code>标签中添加或设置如下proxy字段。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>optional<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>active</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>active</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protocol</span><span class="token punctuation">></span></span>http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protocol</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  &lt;username>proxyuser&lt;/username>      &lt;password>proxypass&lt;/password>  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>10.10.82.134<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>7890<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonProxyHosts</span><span class="token punctuation">></span></span>local.net|some.host.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonProxyHosts</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxy</span><span class="token punctuation">></span></span></code></pre><p>将其中的host中的ip换为你的windows的ip地址。</p></li><li><p>设置完成后，再次运行<code>mvn installl</code>就是通过代理的方式访问了。</p></li><li><p><strong>建议使用完后立即取消代理(注释添加的这些内容即可），否则代理服务器没有打开时无法使用<code>mvn install</code>会异常的难受。</strong></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼成果 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC快速设置系统代理</title>
      <link href="/posts/MAC-setup-system-proxy-quickly/"/>
      <url>/posts/MAC-setup-system-proxy-quickly/</url>
      
        <content type="html"><![CDATA[<p>由于在宿舍中的网络只能访问内网，而实验室中的电脑可以访问外网。所以在实验室电脑搭建一个代理服务器（clash for windows就可以解决这个问题了），宿舍电脑通过设置代理的方式来实现访问外网。由于有时mac也要使用clash，开启后就会将所有的代理都设置为127.0.0.1这个IP，要访问实验室电脑的IP需要再次设置IP和端口。所以嫌每次手动设置http代理很麻烦，因此尝试使用脚本的方式来解决这个问题。</p><p>通常mac中设置代理的方式是通过网络-&gt;高级-&gt;代理中设置http代理和https代理来实现的。为了不想每次都输入IP地址，经过搜寻后发现了使用<code>networksetup</code>命令来设置mac的代理。因此开启了该命令的学习使用过程。</p><p>首先确定你是通过什么方式上网的，可能是有线，wifi或者其他的。通过以下命令获取你的<code>networkservice</code>。</p><pre class=" language-bash"><code class="language-bash">➜  ~ networksetup -listallnetworkservicesAn asterisk <span class="token punctuation">(</span>*<span class="token punctuation">)</span> denotes that a network <span class="token function">service</span> is disabled.CDC DEVICEAX88179 USB 3.0 to Gigabit EthernetWi-FiBluetooth PANThunderbolt Bridge➜  ~</code></pre><p>我是用的是wifi进行上网的， 所以我要设置wifi代理，因此我的<code>networkservice=Wi-Fi</code></p><p>详细的使用等我不懒了再来更新…</p><p>先贴出最终的脚本：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> pron<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    networkservice<span class="token operator">=</span>Wi-Fi    yourIP<span class="token operator">=</span>192.168.1.123    yourHTTPPort<span class="token operator">=</span>7890    yourSocksPort<span class="token operator">=</span>7891    <span class="token keyword">echo</span> Open web proxy <span class="token keyword">for</span> networkservice: <span class="token variable">$networkservice</span>    <span class="token function">sudo</span> networksetup -setwebproxy <span class="token variable">$networkservice</span> <span class="token variable">$yourIP</span> <span class="token variable">$yourHTTPPort</span>  <span class="token comment" spellcheck="true">#设置Web HTTP代理</span>    <span class="token function">sudo</span> networksetup -setsecurewebproxy <span class="token variable">$networkservice</span> <span class="token variable">$yourIP</span> <span class="token variable">$yourHTTPPort</span>   <span class="token comment" spellcheck="true">#设置Web HTTPS代理</span>    <span class="token function">sudo</span> networksetup -setsocksfirewallproxy  <span class="token variable">$networkservice</span> <span class="token variable">$yourIP</span> <span class="token variable">$yourSocksPort</span>   <span class="token comment" spellcheck="true">#设置Web Socks5代理</span>    <span class="token keyword">echo</span> Done<span class="token punctuation">}</span><span class="token keyword">function</span> prof<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    networkservice<span class="token operator">=</span>Wi-Fi    <span class="token keyword">echo</span> Close web proxy <span class="token keyword">for</span> networkservice: <span class="token variable">$networkservice</span>    <span class="token function">sudo</span> networksetup -setwebproxystate <span class="token variable">$networkservice</span> off   <span class="token comment" spellcheck="true">#关闭Web HTTP代理</span>    <span class="token function">sudo</span> networksetup -setsecurewebproxystate <span class="token variable">$networkservice</span> off   <span class="token comment" spellcheck="true">#关闭Web HTTPS代理</span>    <span class="token function">sudo</span> networksetup -setsocksfirewallproxystate  <span class="token variable">$networkservice</span> off   <span class="token comment" spellcheck="true">#关闭Web Socks5代理</span>    <span class="token keyword">echo</span> Done<span class="token punctuation">}</span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li>如何优雅地一键实现 macOS 网络代理切换<a href="https://debugtalk.com/post/switch-macOS-web-proxy-in-elegant-way/" target="_blank" rel="noopener">https://debugtalk.com/post/switch-macOS-web-proxy-in-elegant-way/</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MAC </tag>
            
            <tag> 不学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OneDrive5T注册地址</title>
      <link href="/posts/d36c02d3/"/>
      <url>/posts/d36c02d3/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://www.shanyemangfu.com/office-365.html" target="_blank" rel="noopener">https://www.shanyemangfu.com/office-365.html</a></li></ol><table><thead><tr><th align="left">Licence</th><th align="left">URL</th><th align="left">Domain</th><th align="left">OD</th><th align="left">Mail</th><th align="left">AZ</th></tr></thead><tbody><tr><td align="left">A1</td><td align="left"><a href="https://a1_free365.a1od.workers.dev/" target="_blank" rel="noopener">https://a1_free365.a1od.workers.dev</a></td><td align="left">a1.free365.org</td><td align="left">5TB</td><td align="left">O</td><td align="left"></td></tr><tr><td align="left">A1</td><td align="left"><a href="https://a1_sc.a1od.workers.dev/" target="_blank" rel="noopener">https://a1_sc.a1od.workers.dev</a></td><td align="left">a1.u365.org</td><td align="left">5TB</td><td align="left">O</td><td align="left"></td></tr><tr><td align="left">A1</td><td align="left"><a href="https://od.kbbldh.workers.dev/" target="_blank" rel="noopener">https://od.kbbldh.workers.dev</a></td><td align="left">lbbldh.tk</td><td align="left">5TB</td><td align="left">O</td><td align="left"></td></tr><tr><td align="left">A1</td><td align="left"><a href="https://azzzzzz.lx.workers.dev/" target="_blank" rel="noopener">https://azzzzzz.lx.workers.dev</a></td><td align="left">moe.bartonclough.co.uk</td><td align="left">1TB</td><td align="left">O</td><td align="left">O</td></tr><tr><td align="left">A1</td><td align="left"><a href="https://a1.lx.workers.dev/" target="_blank" rel="noopener">https://a1.lx.workers.dev</a></td><td align="left">2002000.xyz</td><td align="left">5TB</td><td align="left">O</td><td align="left">X</td></tr><tr><td align="left">A1</td><td align="left"><a href="http://office.zx.al/" target="_blank" rel="noopener">http://office.zx.al</a></td><td align="left">my365.ws splogs.onmicrosoft.com</td><td align="left"></td><td align="left">O</td><td align="left"></td></tr><tr><td align="left">A1</td><td align="left"><a href="https://od.wulel.cn/" target="_blank" rel="noopener">https://od.wulel.cn</a> <a href="https://od.wasonliu.workers.dev/" target="_blank" rel="noopener">https://od.wasonliu.workers.dev/</a></td><td align="left">f.odpan.cn</td><td align="left">5TB</td><td align="left">O</td><td align="left"></td></tr><tr><td align="left">A1</td><td align="left"><a href="https://zcnp.azurewebsites.net/" target="_blank" rel="noopener">https://zcnp.azurewebsites.net</a></td><td align="left">niup.onmicrosoft.com</td><td align="left"></td><td align="left">O</td><td align="left">X</td></tr><tr><td align="left">A1</td><td align="left"><a href="https://zcmail.azurewebsites.net/" target="_blank" rel="noopener">https://zcmail.azurewebsites.net</a></td><td align="left">mailc.onmicrosoft.com</td><td align="left"></td><td align="left">O</td><td align="left">X</td></tr><tr><td align="left">A1</td><td align="left"><a href="https://get.porta1.net/" target="_blank" rel="noopener">https://get.porta1.net/</a></td><td align="left">usenode.net</td><td align="left"></td><td align="left">O</td><td align="left"></td></tr><tr><td align="left">Teams Exploratory</td><td align="left"><a href="https://od.malahu.tk/" target="_blank" rel="noopener">https://od.malahu.tk</a> <a href="https://malahu.n5.myws.ca/" target="_blank" rel="noopener">https://malahu.n5.myws.ca/</a></td><td align="left">malahu.tk</td><td align="left">1TB</td><td align="left">O</td><td align="left">X</td></tr><tr><td align="left">E3SY</td><td align="left"><a href="https://freeoffice365.me/" target="_blank" rel="noopener">https://freeoffice365.me</a></td><td align="left">office.jimschool.org</td><td align="left">5TB</td><td align="left">O</td><td align="left">X</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重装系统时所要备份的文件</title>
      <link href="/posts/Files-to-be-backed-up-when-reinstalling-the-system/"/>
      <url>/posts/Files-to-be-backed-up-when-reinstalling-the-system/</url>
      
        <content type="html"><![CDATA[<p>鉴于系统长时间使用后，会留下各种垃圾占用磁盘空间。看着不爽，所以计划在存储空间仅剩一点时给电脑重装系统。</p><h1 id="MAC电脑"><a href="#MAC电脑" class="headerlink" title="MAC电脑"></a>MAC电脑</h1><h2 id="需要备份的文件"><a href="#需要备份的文件" class="headerlink" title="需要备份的文件"></a>需要备份的文件</h2><h3 id="常规文件"><a href="#常规文件" class="headerlink" title="常规文件"></a>常规文件</h3><ol><li>各种课程中的课程文件。</li><li>图片</li><li>音乐-Music文件夹中的歌曲</li><li>桌面文件</li><li>看看下载文件夹中有没有需要的。</li></ol><h3 id="软件使用记录"><a href="#软件使用记录" class="headerlink" title="软件使用记录"></a>软件使用记录</h3><ol><li>微信聊天记录</li><li>qq发送到我的电脑记录</li><li>telegram传输文件记录</li></ol><h3 id="开发类文件"><a href="#开发类文件" class="headerlink" title="开发类文件"></a>开发类文件</h3><ol><li>ClionProjects</li><li>IdeaProjects</li><li>mygopath</li><li>PycharmProjects</li><li>VscodeProjects</li></ol><h2 id="需要下载的软件"><a href="#需要下载的软件" class="headerlink" title="需要下载的软件"></a>需要下载的软件</h2><h3 id="必装软件"><a href="#必装软件" class="headerlink" title="必装软件"></a>必装软件</h3><ol><li>clashx：<a href="https://github.com/yichengchen/clashX/releases" target="_blank" rel="noopener">https://github.com/yichengchen/clashX/releases</a></li><li>chrome</li><li>vscode</li><li>itrem2</li><li>微信，qq，telegram</li><li>IINA</li><li>App Cleaner &amp; Uninstaller</li><li>Typora</li><li>istat menus</li></ol><h3 id="开发类软件"><a href="#开发类软件" class="headerlink" title="开发类软件"></a>开发类软件</h3><ol><li>JB全家桶，使用toolbox下载</li><li>easyconnect</li><li>microsoft remote desktop（天翼云盘-我的应用-mac软件）</li></ol><h3 id="办公类软件"><a href="#办公类软件" class="headerlink" title="办公类软件"></a>办公类软件</h3><ol><li>正版软件官网下载的office全家桶</li><li>latex</li><li>腾讯会议，钉钉</li><li>Mendeley </li><li>copytranslator</li><li>PDF Expert</li><li>有道云笔记</li><li>天翼云盘</li></ol><h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><ol><li>QQ音乐</li><li>NeatDownloadManager</li><li>PicGo</li><li>ScreenFlow</li><li>Loopback</li></ol><hr><h1 id="windows电脑"><a href="#windows电脑" class="headerlink" title="windows电脑"></a>windows电脑</h1><p>等我回学校了实际操作起来了再来更新。</p><h1 id="安卓手机"><a href="#安卓手机" class="headerlink" title="安卓手机"></a>安卓手机</h1><ol><li>备份微信聊天记录，qq聊天记录</li><li>备份相册图片</li><li>备份通话录音</li><li>同步通讯录</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备份工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 webhook 自动更新博客</title>
      <link href="/posts/Use-Webhook-To-Update-Blog/"/>
      <url>/posts/Use-Webhook-To-Update-Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>以下文章转载自<a href="https://blog.cugxuan.cn/2019/03/23/Git/Use-Webhook-To-Update-Blog/" target="_blank" rel="noopener">Xuan’s blog</a>, 为了防止博主删除文章后找不到，所以复制一份到此进行保存。如果有侵权现象，请联系博主<a href="mailto:zhangrui@zhangruiahu.cn">zhangrui@zhangruiahu.cn</a>进行删除。感谢理解</p><ul><li><strong>本文作者：</strong> 泫</li><li><strong>本文链接：</strong> <a href="https://blog.cugxuan.cn/2019/03/23/Git/Use-Webhook-To-Update-Blog/" target="_blank" rel="noopener">https://blog.cugxuan.cn/2019/03/23/Git/Use-Webhook-To-Update-Blog/</a></li><li><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">BY-NC-ND</a> 许可协议。转载请注明出处！</li></ul><p>因为实在受不了 <code>Coding Page</code> 的速度，腾讯云的 CDN 感觉也很不好用，将自己的博客挂在了自己的服务器上。但是每次在写完之后都需要到服务器上执行 <code>git pull</code>过于麻烦，所以使用了 GitHub 上面的开源项目 <a href="https://github.com/adnanh/webhook" target="_blank" rel="noopener">webhook</a>，<strong>当然 webhook 的作用不仅仅是自动更新部署博客啊，啥都能干 O__O …</strong></p><h1 id="Webhook"><a href="#Webhook" class="headerlink" title="Webhook"></a>Webhook</h1><p>对于 webhook 来说，可以自己写一个脚本来接受信息，思路很简单，运行一个 <code>HTTP Server</code>，监听服务器的某个端口，如果有消息传递过来，那么就运行事先写好的脚本，来完成 webhook 的功能即可。<br><img src="https://image.cugxuan.cn/git/webhook.png" alt="webhook.png"></p><p>但是为了方便使用和维护，还是选择了开源的项目</p><h1 id="什么是-webhook？"><a href="#什么是-webhook？" class="headerlink" title="什么是 webhook？"></a>什么是 webhook？</h1><p>webhook 的目标只是做他应该做的事</p><ol><li>接受 request</li><li>解析 HTTP 首部，负载内容和请求变量</li><li>检测是否满足钩子的特定条件</li><li>通过命令行参数或环境变量将指定的参数传递给指定的命令</li></ol><p>其他所有的事情都是 <code>命令作者</code> 的责任</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>我的博客是 hexo 构建，构建出来的结果都是静态文件，使用 Nginx 挂在服务器上的，以下的内容都需要在服务器上执行</p><h2 id="安装-webhook"><a href="#安装-webhook" class="headerlink" title="安装 webhook"></a>安装 webhook</h2><p>这里推荐三种安装方法，<strong>github 下载速度可能很慢</strong>，推荐使用系统源安装的方式</p><h3 id="使用系统源的安装方式"><a href="#使用系统源的安装方式" class="headerlink" title="使用系统源的安装方式"></a>使用系统源的安装方式</h3><p>如果是 Ubuntu 系统，可以直接使用下面的命令进行安装：</p><pre><code>$ sudo apt-get update$ sudo apt-get install webhook</code></pre><h3 id="使用-github-下载"><a href="#使用-github-下载" class="headerlink" title="使用 github 下载"></a>使用 github 下载</h3><p>webhook 的 <a href="https://github.com/adnanh/webhook/releases" target="_blank" rel="noopener">release 链接</a>，找到对应的选项 <code>webhook-linux-amd64.tar.gz</code> 右键复制链接 ，当前写博客时的最新版本链接为 <a href="https://github.com/adnanh/webhook/releases/download/2.6.11/webhook-linux-amd64.tar.gz" target="_blank" rel="noopener">https://github.com/adnanh/webhook/releases/download/2.6.11/webhook-linux-amd64.tar.gz</a></p><p>具体操作如下：</p><pre><code>// 下载对应的软件$ wget https://github.com/adnanh/webhook/releases/download/2.6.11/webhook-linux-amd64.tar.gz// 解压进入$ tar -zxf tar -zxf webhook-linux-amd64.tar.gz &amp;&amp; cd webhook-linux-amd64/$ ./webhook[webhook] 2020/02/23 22:44:43 couldn't load any hooks from file!aborting webhook execution since the -verbose flag is set to false.If, for some reason, you want webhook to start without the hooks, either use -verbose flag, or -nopanic</code></pre><h3 id="Golang-环境下安装"><a href="#Golang-环境下安装" class="headerlink" title="Golang 环境下安装"></a>Golang 环境下安装</h3><p>首先安装 Golang 环境（这里略过），然后安装 webhook，这里注意需要已经设置了 GOPATH</p><pre><code>// 安装对应的工具$ go get github.com/adnanh/webhook// 安装完成之后可以在 $GOPATH/bin 下找到对应的执行文件$ echo $GOPATH/root/go$ ls /root/go/binwebhook// 将路径写入到 shell 可以直接执行$ vi ~/.bash_profile// 在文件最后一行加入对应内容export PATH="/root/go/bin:$PATH"// 更新文件使其生效$ source ~/.bash_profile// 测试命令是否已经成功安装，得到输出说明安装完成$ webhook[webhook] 2020/02/23 22:44:43 couldn't load any hooks from file!aborting webhook execution since the -verbose flag is set to false.If, for some reason, you want webhook to start without the hooks, either use -verbose flag, or -nopanic</code></pre><h2 id="配置-webhook"><a href="#配置-webhook" class="headerlink" title="配置 webhook"></a>配置 webhook</h2><p>下一步是定义您希望 <a href="https://github.com/adnanh/webhook" target="_blank" rel="noopener">webhook</a> 提供的一些钩子，新建一个 <code>hook.json</code> 文件<br>该文件将包含 webhook 将提供的一系列钩子。检查 <a href="https://github.com/adnanh/webhook/blob/master/docs/Hook-Definition.md" target="_blank" rel="noopener">Hook 定义页面</a> 以查看钩子可以包含的属性的详细描述以及如何使用它们。</p><h2 id="定义和部署"><a href="#定义和部署" class="headerlink" title="定义和部署"></a>定义和部署</h2><p>下面的内容在 <code>~/notes-hooks</code> 文件夹下执行<br>让我们定义一个名为 <code>redeploy-webhook</code> 的简单钩子，新建一个 <code>redeploy.sh</code> 文件，确保你的 bash 脚本在顶部有 <code>#!/bin/sh</code></p><pre><code>#!/bin/shgit pull</code></pre><p>写完之后注意需要给文件增加执行权限<br><code>$ chmod a+x redeploy.sh</code><br>然后新建一个 <code>hooks.json</code> 文件，看代码就可以知道意思了</p><pre><code>[  {    "id": "redeploy-blog",    "execute-command": "/home/ubuntu/notes-hooks/redeploy.sh",    "command-working-directory": "/home/ubuntu/blog.cugxuan.cn"  }]</code></pre><p>这个 <code>hooks.json</code> 文件中各项的作用一看便知，注意 id 和监听的 URL 对应，webhook 默认监听的端口是 9000，根据上面写的可知监听的 URL 为 <code>http://yoursite.com:9000/hooks/redeploy-blog</code>，接下来执行命令部署即可</p><pre><code># 前台运行的方法，可以方便测试$ ./webhook -hooks hooks.json -verbose# 守护进程简单运行，这样就可以部署了$ nohup ./webhook -hooks hooks.json -verbose &amp;</code></pre><p>然后将 <code>http://yoursite.com:9000/hooks/redeploy-blog</code> 填到你的 GitHub 网站对应项目页面 <code>Settings → Webhooks</code> 中即可</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>写好博客然后 push，GitHub 收到你的更新之后就会触发 webhook 发送到服务器的监听位置，然后服务器完成更新部署<br>同时你可以在 GitHub 的 webhook 页面中看到发送的情况，还可以点击 Redeliver 重新测试<br><img src="https://image.cugxuan.cn/git/webhook-redeliver.png" alt="webhook-redeliver"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 转载文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外链视频测试</title>
      <link href="/posts/my-own-cinema/"/>
      <url>/posts/my-own-cinema/</url>
      
        <content type="html"><![CDATA[<h1 id="cloudreve-外链地址"><a href="#cloudreve-外链地址" class="headerlink" title="cloudreve 外链地址"></a>cloudreve 外链地址</h1><ol><li><p>来自pan.xfss.cc的外链视频。</p><div id="mmedia-auKmWUfY"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-auKmWUfY'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://pan.xfss.cc/api/v3/file/source/8/Emphasize.mp4?sign=L3oMB8_jJmuRduJsCOnGU9xT7B--Xef3CvrjljFNDRc%3D%3A0', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        </li></ol><h1 id="其他网站的视频"><a href="#其他网站的视频" class="headerlink" title="其他网站的视频"></a>其他网站的视频</h1><ol><li><p>better365官网的教学视频</p><div id="mmedia-ROhKdhje"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-ROhKdhje'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://13315641.s21v.faiusr.com/58/1/ABUIABA6GAAgxcPHgQYo2tfr2Qc.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        </li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种OneDrive网盘工具总结</title>
      <link href="/posts/OneDrive-pan/"/>
      <url>/posts/OneDrive-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h1><h2 id="OFDI"><a href="#OFDI" class="headerlink" title="OFDI"></a>OFDI</h2><p>部署地址 <a href="https://github.com/vcheckzen/FODI" target="_blank" rel="noopener">https://github.com/vcheckzen/FODI</a>.    <a href="https://www.shanyemangfu.com/cf-fodi.html" target="_blank" rel="noopener">https://www.shanyemangfu.com/cf-fodi.html</a></p><p>demo <a href="https://logi.im/fodi.html" target="_blank" rel="noopener">https://logi.im/fodi.html</a></p><p><a href="https://www.shanyemangfu.com/cf-fodi.html" target="_blank" rel="noopener">https://www.shanyemangfu.com/cf-fodi.html</a></p><p>效果</p><div id="mmedia-JzHqtsyI"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-JzHqtsyI'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://tight-bar-e3b3.logi.workers.dev/?file=/Media/Video/Common/Confession.of.Murder.2012.KOREAN.1080p.BluRay.H264.AAC-VXT/Confession.of.Murder.2012.KOREAN.1080p.BluRay.H264.AAC-VXT.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h2><p>项目地址: <a href="https://github.com/YukiCoco/OLAINDEX-Magic" target="_blank" rel="noopener">https://github.com/YukiCoco/OLAINDEX-Magic</a></p><p>效果: <a href="https://magic.yukino.co/home/1" target="_blank" rel="noopener">https://magic.yukino.co/home/1</a></p><div id="mmedia-qwqNMIpB"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-qwqNMIpB'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://magic.yukino.co/down/1/7.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="oneindex萌化版"><a href="#oneindex萌化版" class="headerlink" title="oneindex萌化版"></a>oneindex萌化版</h2><p>项目地址：<a href="https://github.com/Layne666/oneindex" target="_blank" rel="noopener">https://github.com/Layne666/oneindex</a></p><p>效果：<a href="https://pan.layne666.cn/" target="_blank" rel="noopener">https://pan.layne666.cn/</a></p><div id="mmedia-pDyGeBDU"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-pDyGeBDU'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://pan.layne666.cn/%E7%94%B5%E5%BD%B1/%E5%A4%A7%E4%BE%A6%E6%8E%A2%E7%9A%AE%E5%8D%A1%E4%B8%98/%E5%A4%A7%E4%BE%A6%E6%8E%A2%E7%9A%AE%E5%8D%A1%E4%B8%98.BD1280%E9%AB%98%E6%B8%85%E4%B8%AD%E8%8B%B1%E5%8F%8C%E5%AD%97%E7%89%88.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="OneManager-php"><a href="#OneManager-php" class="headerlink" title="OneManager-php"></a>OneManager-php</h2><p>项目地址: <a href="https://github.com/qkqpttgf/OneManager-php" target="_blank" rel="noopener">https://github.com/qkqpttgf/OneManager-php</a></p><p>效果: <a href="https://yun.rw/" target="_blank" rel="noopener">https://yun.rw/</a></p><div id="mmedia-gkaarYrA"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-gkaarYrA'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://yun.rw/DEMO/Videos/%E5%B0%91%E5%A5%B3%E6%97%B6%E4%BB%A3-Oh%21%28LG.HD%29.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="GONEList"><a href="#GONEList" class="headerlink" title="GONEList"></a>GONEList</h2><p>项目地址: <a href="https://github.com/qkqpttgf/OneManager-php" target="_blank" rel="noopener">https://github.com/qkqpttgf/OneManager-php</a></p><p>效果：<a href="https://gonelist.cugxuan.cn/" target="_blank" rel="noopener">https://gonelist.cugxuan.cn</a></p><div id="mmedia-gaVRngKq"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-gaVRngKq'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://gonelist.cugxuan.cn/d/exampleType/video/%E3%80%90%E9%AB%98%E6%B8%85%E3%80%91%E6%88%91%E6%98%AF%E8%B0%81-%E6%B2%A1%E6%9C%89%E7%BB%9D%E5%AF%B9%E5%AE%89%E5%85%A8%E7%9A%84%E7%B3%BB%E7%BB%9F.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>效果</p><div id="mmedia-kCtyeOlr"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-kCtyeOlr'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/周杰伦 - 说好不哭 (with 五月天阿信).mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneDrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频课程</title>
      <link href="/posts/7487cd50/"/>
      <url>/posts/7487cd50/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>没有记录，主要讲网络的发展与rdma的应用，计算机网络相关的东西。</p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><p>主要讲RDMA verbs api的使用，下面是3点以后的视频</p><div id="mmedia-NMfzITyh"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-NMfzITyh'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day02-15-16.mov', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="9点到10点"><a href="#9点到10点" class="headerlink" title="9点到10点"></a>9点到10点</h2><p>由于录制不熟练，分了三段</p><p>第一段</p><div id="mmedia-xocCkWak"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-xocCkWak'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-09-10-1.mov', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <p>第二段</p><div id="mmedia-wTfHBQeF"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-wTfHBQeF'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: ' https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-09-10-2.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <p>第三段</p><div id="mmedia-LcxhVHNu"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-LcxhVHNu'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-09-10-3.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="10点到11点"><a href="#10点到11点" class="headerlink" title="10点到11点"></a>10点到11点</h2><div id="mmedia-SQXtPKJp"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-SQXtPKJp'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-10-11.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="11点到12点"><a href="#11点到12点" class="headerlink" title="11点到12点"></a>11点到12点</h2><div id="mmedia-WTEBWlFY"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-WTEBWlFY'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-11-12.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="12点到13点"><a href="#12点到13点" class="headerlink" title="12点到13点"></a>12点到13点</h2><div id="mmedia-KOvzegfh"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-KOvzegfh'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-12-13.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="14点到15点"><a href="#14点到15点" class="headerlink" title="14点到15点"></a>14点到15点</h2><div id="mmedia-EoCDvMZz"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-EoCDvMZz'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-14-15-01.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <div id="mmedia-aQcCtAOY"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-aQcCtAOY'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-14-15-2.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="15点到16点"><a href="#15点到16点" class="headerlink" title="15点到16点"></a>15点到16点</h2><div id="mmedia-ashmntOo"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-ashmntOo'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-15-16.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="18-19meeting"><a href="#18-19meeting" class="headerlink" title="18-19meeting"></a>18-19meeting</h2><div id="mmedia-BkTJCJJj"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-BkTJCJJj'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day03-18-19-meeting.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><h2 id="9点到10点-1"><a href="#9点到10点-1" class="headerlink" title="9点到10点"></a>9点到10点</h2><div id="mmedia-hyKmVwTv"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-hyKmVwTv'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: '   https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day04-09-10.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="10点到11点-1"><a href="#10点到11点-1" class="headerlink" title="10点到11点"></a>10点到11点</h2><div id="mmedia-WtbdsaSD"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-WtbdsaSD'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: '   https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day04-10-11.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="11点到12点-1"><a href="#11点到12点-1" class="headerlink" title="11点到12点"></a>11点到12点</h2><div id="mmedia-aRQGEIge"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-aRQGEIge'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: '   https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day04-11-12.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="12点到13点-1"><a href="#12点到13点-1" class="headerlink" title="12点到13点"></a>12点到13点</h2><div id="mmedia-equeucDl"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-equeucDl'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: '   https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day04-12-13.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="14点到15点-1"><a href="#14点到15点-1" class="headerlink" title="14点到15点"></a>14点到15点</h2><div id="mmedia-sAxqkDmW"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-sAxqkDmW'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: '   https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day04-14-15.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="15点到16点-1"><a href="#15点到16点-1" class="headerlink" title="15点到16点"></a>15点到16点</h2><div id="mmedia-rEkXCmPI"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-rEkXCmPI'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: '   https://onedrive.ruitest.workers.dev?file=/videos/RdmaCourse/Day04-15-16.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <p>聊天记录</p><blockquote><p>Timothy Tan对所有人说： (9:39 上午)<br> Could you explain again why the server only needs to wait for one completion, instead of waiting for the same amount as tx_depth? <br>Dai Zhang对所有人说： (9:45 上午)<br> Is the NIC truly duplex, that is, can it write to RR receive buffer and read from SR send buffer at the same time, or it has to do them without overlap. <br>Timothy Tan对所有人说： (9:47 上午)<br> Okok thanks! <br>闫力敏对所有人说： (9:47 上午)<br> thankx <br>Timothy Tan对所有人说： (9:56 上午)<br> For the last point, is it correct to say that the NIC can overcome PCI latency by reading more data from the memory even before previous packets have started sending in the network? <br>Gil对所有人说： (9:58 上午)<br> Yes, it is. <br>Dai Zhang对所有人说： (10:00 上午)<br> If read &amp; write can be done at the same time, even though we don’t care about the actual data, will it cause some issues if we try to read/write the same part of memory from NIC, for example, conflicts in pcie bus or some software issues  (sorry for aggressive guesses, I have no idea about the pcie system). In ping-pong example, the SR/RR bufs are at the same place. <br>Dai Zhang对所有人说： (10:08 上午)<br> Thank you! <br>Timothy Tan对所有人说： (10:25 上午)<br> Not yet :( <br>Xinhao Kong对所有人说： (10:25 上午)<br> run the examples/ucp_client_server successfully <br>Lih Wei对所有人说： (10:25 上午)<br> Yes, but incomplete <br>Yuwei Xu对所有人说： (10:25 上午)<br> Yes <br>Dai Zhang对所有人说： (10:25 上午)<br> yes <br>zmc对所有人说： (10:25 上午)<br> Yes, but incomplete</p><p>Lih Wei对所有人说： (10:49 上午)<br> If we are not using the worker function on a separate thread, is there any guarantees in terms of how long the worker function will take to return?</p><p>Also, are there any dangers of lost data if we call the worker too infrequently? It seems that as long as we use separate buffers, regardless if we use eager or rendezvous, it should be safe? For the first part, coming from a perspective of cooperative multi-processing, if I have many requests in-flight, is there danger of starving my computations? Thank you </p><p>Qiang Wang对所有人说： (11:18 上午)<br> Hi, professor. It seems that the code tries to check the status in a loop while the request is uncompleted. Is it inefficient? Ok. I see.</p><p>Dai Zhang对所有人说： (11:39 上午)<br> Avoid disorder <br>Lih Wei对所有人说： (11:39 上午)<br> Is it some form of flow control? I see <br>Lih Wei对所有人说： (11:45 上午)<br> In UCX, is there any unreliable/UDP-like paradigm? Or is there a way to broadcast data (point-to-multipoint)? Thank you <br>Lih Wei对所有人说： (12:33 下午)<br> 6 seconds? *10 Apologies, I might have missed it, why can’t all the processes receive simultaneously? I’m assuming each process is on a different link <br>Lih Wei对所有人说： (12:39 下午)<br> I think I get it, thank you <br>Qiang Wang对所有人说： (12:48 下午)<br> Hi. Professor. I am still confused that why the shift algorithm is O(n) for MPI_Alltoall. Is it because that all the received processes can deal with data in parallel. Could you explain more, please?</p><p>Gil对所有人说： (1:09 下午)<br> If all processes will send data to one process at the same time, it takes { (N * DataSize) / BW ) time for this process to receive this data. Before the shift algorithm, in each [i Before the shift algorithm, in each [I] iteration we have all the processes sending to the i’th process. <br>Gil对所有人说： (1:11 下午)<br> So each iteration is in the order of N (number of processes). Now we have N such iterations (for loop) so we end up with o(N^2) So the problem is that we send from all processes to one process at the same time. <br>Gil对所有人说： (1:13 下午)<br> When we say that a receiving process can receive data from multiple processes in parallel, it is still limited in the link BW <br>Qiang Wang对所有人说： (1:18 下午)<br> I see. So it is O(N^2) for “all the processes sending to the i’th process in each [i] iteration.”. What about the shift? Does it mean that we have each process sending data to different processes in each iteration? <br>Gil对所有人说： (1:36 下午)<br> Yes, this is the idea behind the shift scheme At each iteration, each process is sending data to a different process <br>Gil对所有人说： (1:37 下午)<br> At first iteration,<br>process 1 sends to process 2<br>process 2 sends to process 3<br>…<br>Process N sends to process 1 <br>Qiang Wang对所有人说： (1:39 下午)<br> I see. It is somehow like multi-processing. However both two methods can still be limited in the link BW. Thank you very much!</p></blockquote><h1 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h1><p>聊天记录</p><pre><code>Pengzhi Zhu对所有人说： (12:31 下午) The next session will begin at 2:00 pm Pengzhi Zhu对所有人说： (2:46 下午) We will have a 10 minutes break at 14:50 pm and come back at 3:00 pm geofeng对所有人说： (3:51 下午) 10m break let's back at 4pm thanks Dr. Li for the great presentation geofeng对所有人说： (4:02 下午) we are now QA session, any question is welcome 我对所有人说： (4:03 下午) When we install pmdk in the cluster ,it needs root to install. So we can not install it. Ok, thank you Dai Zhang对所有人说： (4:07 下午) An question about the TAG SEND interface. the tag_send interface takes in arguments like. "request = ucp_tag_send_nb(ep, bm_ctx.buf, 1, ucp_dt_make_contig(1), TAG, send_cb);" Dai Zhang对所有人说： (4:07 下午) where a **count**, and a **datatype**, are used to describe the buffer size. How's the underlying differences about these two args, or it is just a semantic explanation about the memory layout, and the underlying just sends "count x datatype" size of data block no matter how these two args are specified. Dai Zhang对所有人说： (4:09 下午) Yes, ucx Nothing in doc about the underlying mechanisms Cheng Li对所有人说： (4:14 下午) Thanks all. Enjoy the rest of your journey! Dai Zhang对所有人说： (4:14 下午) Another question, is there any way to separate polling completion with another worker from the one sending requests in UCX. It seems that UCX interface has to progress the same worker to trigger callbacks on sent request. Is that means we always need to schedule the cpu time between sending requests and processing completions at the same core in UCX.Lih Wei对所有人说： (4:15 下午) Hi Dai Zhang, allow me to try replying: UCP tag is still based on stream in underlying protocol. So it is possible that a partial transfer occurs. The need to specify the datatype and size is to ensure that a complete data element is presented when there is partial transfer. I was looking into the same questions as well, this is my conclusion from reading the source. But it is better if Gil can confirm geofeng对所有人说： (4:18 下午)Thanks Lih Wei, very good practice. In the mean time, I'm check with UCX R&amp;D team, will get back to you once I get feedback Dai Zhang对所有人说： (4:18 下午) But I think the semantic of completion is all or nothing, even though the underlying method transfer the data in many pieces, we can only get completion notification when all pieces gathered. Lih Wei对所有人说： (4:21 下午) That is true for tag, maybe this only applies for the ucp_stream_* functions more geofeng对所有人说： (4:22 下午) Good discussion! Lih Wei对所有人说： (4:24 下午) My other theory is that underlying buffer may be scattered if no contiguous buffer can be found, datatype is required to ensure that the splitting of buffer occur at data boundary Dai Zhang对所有人说： (4:27 下午) Good point. But it's a contiguous memory, the splitting and scattering needs an additional memory-copy. I think which the RDMA want to avoid. Dai Zhang对所有人说： (4:28 下午) But for the benefit of specifing size, I think the ucx interface chooses the right recv buffer size to avoid watsing memory. Is there some thing related to that? Just in eager mode. Qingchun Song对所有人说： (4:31 下午) Hi, All, if you have any questions, please write in chat window. Dai Zhang对所有人说： (4:32 下午) Another another question, about the interface changes. In UCX v1.9, there is a new tag_send_nbx interface. It seems the datatype is put into the params argument, not the first-class argument yet. Is the interface of UCX not stable yet? Dai Zhang对所有人说： (4:35 下午) ucs_status_ptr_t ucp_stream_send_nbx(ucp_ep_h ep, const void *buffer, size_t count, const ucp_request_param_t *param) Qingchun Song对所有人说： (4:35 下午) Everyone can give the comments. this is the open discussion time. Dai Zhang对所有人说： (4:35 下午) The word may be improper. I means the datatype is not shown in function prototype Qingchun Song对所有人说： (4:35 下午) Welcome any comments. Gil will answer all questions later today. Dai Zhang对所有人说： (4:37 下午) ucs_status_ptr_t ucp_tag_send_nb    (    ucp_ep_h     ep, const void *     buffer, size_t     count, ucp_datatype_t     datatype, ucp_tag_t     tag, ucp_send_callback_t     cb  ) Here’s the old interface Qingchun Song对所有人说： (4:39 下午) we will set 1 hour Q&amp;A Tina again at tomorrow we will set 1 hour Q&amp;A time again at tomorrow Qingchun Song对所有人说： (4:40 下午) you can talk with Gil about your question not regard with the competition geofeng对所有人说： (4:45 下午) any more question? zmc对所有人说： (4:58 下午) Will there be more details about modifying the application interface to ucx, or we can start to modify it now. geofeng对所有人说： (5:00 下午) you can start to check and evaluate which part is good to modify, if you have solid plan, could start now Qingchun Song对所有人说： (5:05 下午) seems I have the issue in my mic please see the short summary in this week geofeng对所有人说： (5:06 下午) sure Qingchun Song对所有人说： (5:06 下午) in this week, we learned the network transport layer operations TCP communication RDMA communication with Verbs RDMA RDMA communication with UCX The network accelerate tools RDMA applications in computing RDMA Qingchun Song对所有人说： (5:08 下午) application in storage hope everyone can have the fruitful result by this lecture let’s start the hackathon After the discussion with Gil, we recommend to use SPDK to run the competition since the short time SPDK has already implemented RDMA based on verbs Qingchun Song对所有人说： (5:11 下午) please change the implementation from verbs to UCX according to what you learned in this week Pengzhi, please provide the reference link to all persons You will have the SPDK code download link start guideline some reference code  1.    Spdk dev env https://spdk.io/doc/vagrant.html2.    Spdk hello-world app https://software.intel.com/content/www/us/en/develop/articles/accelerating-your-nvme-drives-with-spdk.html3.    The perf utility is documented with example in link from [2]</code></pre><h1 id="Day06"><a href="#Day06" class="headerlink" title="Day06"></a>Day06</h1><p>聊天记录</p><pre><code>geofeng对所有人说： (9:05 上午) Answers for the questions of yesterday: geofeng对所有人说： (9:05 上午) 1.    About datatypes and buffers. In general case datatype may describe non-contig data, for example it may represent matrix (set of buffers + padding data) where useful data is split by holes which should not be processed during send/receive operations. But in simple case, when used contig datatypes, it is just solid buffer, size may be calculated as count * size(datatype). Such semantics is reflecting MPI datatypes. geofeng对所有人说： (9:05 上午) 2.    Cross-polling workers and requests. Worker progress is polling only own requests which were created using this particular worker. You have to progress all workers which were used to create request, there is no way to workers cross-polling of requests. There is no limitation for cores to progress workers: worker is representation of “thread context”, you may use one thread to post operation and another thread to progress it. If UCX is built with multithread mode and worker is created with multithreaded mode (see ucs_thread_mode_t, ucp_worker_params_t and ucp_worker_create) then UCX will serialize all operations for worker. geofeng对所有人说： (9:05 上午) 3.    NBX interface. In UCX 1.9 we added new set of API – request based interfaces named NBX (non-block extended). For params which may be omitted (for example your program is operating by single char based buffers, no complex data and no callbacks are used to notify completions) user may pass empty ucp_request_param_t parameter and UCX excludes some overhead from processing of data which may improve performance of data transfer and application. This interface is stable and we are not going to change it in nearest future. geofeng对所有人说： (9:05 上午) @Zai Zhang Dai Zhang对所有人说： (9:12 上午) Gotit! Thank you!! </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RDMA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站视频记录</title>
      <link href="/posts/bilibili-videos-in-hexo/"/>
      <url>/posts/bilibili-videos-in-hexo/</url>
      
        <content type="html"><![CDATA[<p>这篇文章暂时有两个目的，一是学习在hexo中插入B站视频，二是记录B站中感兴趣的视频。</p><p><strong>提示：如果视频无法播放，请使用https的方式打开</strong></p><p>看看视频就好，文字还是别看了。写的毫无逻辑可言，语言表达能力低下，想到哪写到哪:pensive:</p><h1 id="视频列表"><a href="#视频列表" class="headerlink" title="视频列表"></a>视频列表</h1><h2 id="2020B站跨年演唱会——好一朵美丽的茉莉花"><a href="#2020B站跨年演唱会——好一朵美丽的茉莉花" class="headerlink" title="2020B站跨年演唱会——好一朵美丽的茉莉花"></a>2020B站跨年演唱会——好一朵美丽的茉莉花</h2><p>2020年B站的跨年晚会可以算是一次很成功的晚会了，几乎是吊打各大卫视的晚会。小破站第一次举办跨年晚会并没有引起太多人的关注，所以第一次直播的时候并没有很多人观看。当有一部分人在网上“鼓吹”B站晚会的惊艳之时，越来越多的人都去一探究竟，最终获得了大部分人的肯定。为什么在各大卫视举办了好几年的跨年演唱会的情况下，B站的跨年演唱会却能脱引而出呢？我仅以我看过的一小部分来谈谈自己的想法。我观看的主要部分有五月天，邓紫棋和大碗宽面，当然了，还有下面的好一朵美丽的茉莉花。从这几个人和节目的选取就可以看出，B站在选材和明星的选择中不拘泥于传统，而是紧跟时代， 符合当代年轻人的审美与口味。</p><p>单就视频中选取的这个节目来说，我也是感慨良多，但是要写出来的时候却又没表达不出来…:sweat:洛天依对于B站的老用户们可能很熟悉，但是对于我这个不怎么熟悉B站不怎么喜欢二次元的人来说确实第一次认识的存在。在回看这个节目时，首先是被运用到的AR技术深深的震惊与吸引了。节目中飞来飞去的卡通人物，四季变换的场景，与孩童式的歌声相交错，让我在喧闹的城市成活中感受到了民谣的宁静与纯美。其次是洛天依的人物设计与歌喉的魅力，让我久久无法释怀。</p><p><a href="https://www.bilibili.com/bangumi/play/ep307691" target="_blank" rel="noopener">洛天依古筝首秀破次元合作方锦龙 带你穿越绝美四季 </a></p><p>若由于版权原因不能播放，请到原地址观看。</p>        <style>.bbplayer{width: 100%; max-width: undefined; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-VyEPGgcr" src="//player.bilibili.com/player.html?bvid=BV1TJ411h7HL&amp;page=1&amp;high_quality=1&amp;danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-VyEPGgcr").style.height=document.getElementById("mmedia-VyEPGgcr").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-VyEPGgcr").style.height=document.getElementById("mmedia-VyEPGgcr").scrollWidth*0.76+"px";            };        </script>        <h2 id="G-E-M-邓紫棋-Real-Talk版《差不多姑娘》MV-全新上线！满篇“人间真实”！"><a href="#G-E-M-邓紫棋-Real-Talk版《差不多姑娘》MV-全新上线！满篇“人间真实”！" class="headerlink" title="G.E.M.邓紫棋 | Real Talk版《差不多姑娘》MV 全新上线！满篇“人间真实”！"></a>G.E.M.邓紫棋 | Real Talk版《差不多姑娘》MV 全新上线！满篇“人间真实”！</h2><p><a href="https://www.bilibili.com/video/BV1Xt411n7iJ" target="_blank" rel="noopener">G.E.M.邓紫棋 | Real Talk版《差不多姑娘》MV 全新上线！满篇“人间真实”！</a></p>        <style>.bbplayer{width: 100%; max-width: undefined; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-cBGzKxiv" src="//player.bilibili.com/player.html?bvid=BV1Xt411n7iJ&amp;page=1&amp;high_quality=1&amp;danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-cBGzKxiv").style.height=document.getElementById("mmedia-cBGzKxiv").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-cBGzKxiv").style.height=document.getElementById("mmedia-cBGzKxiv").scrollWidth*0.76+"px";            };        </script>        <p>使用iframe方式插入</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=60016166&amp;bvid=BV1Xt411n7iJ&amp;cid=104514776&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><p>##【洛天依|薛之谦】江苏卫视2019跨年演唱会《达拉崩吧》</p><p><a href="https://www.bilibili.com/video/BV1Rt411B7z1" target="_blank" rel="noopener">【洛天依|薛之谦】江苏卫视2019跨年演唱会《达拉崩吧》</a></p>        <style>.bbplayer{width: 100%; max-width: undefined; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-sGJRiJAR" src="//player.bilibili.com/player.html?bvid=BV1Rt411B7z1&amp;page=1&amp;high_quality=1&amp;danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-sGJRiJAR").style.height=document.getElementById("mmedia-sGJRiJAR").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-sGJRiJAR").style.height=document.getElementById("mmedia-sGJRiJAR").scrollWidth*0.76+"px";            };        </script>        <p>使用dplayer插入</p><pre><code>{% dplayer "url:http://mpvideo.qpic.cn/0bf2waaaeaaayaakc7ocavpfbmgdakyaaaqa.f10002.mp4?dis_k=3489b5782cd9fd2785d771155e29c28c&amp;dis_t=1595721717" %}</code></pre><p>效果</p><div id="mmedia-AZhNXaYJ"></div><script src="https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"></script>        <script>        var dp = new DPlayer({            container: document.getElementById('mmedia-AZhNXaYJ'),            autoplay: false,            theme: '#b7daff',            loop: false,            lang: navigator.language,            screenshot: false,            hotkey: true,            preload: 'auto',            logo: '',            volume: 0.7,            mutex: true,            video: { url: 'https://13315641.s21v.faiusr.com/58/1/ABUIABA6GAAgtubtkAYo8MP2xAI.mp4', pic: '', thumbnails: '', type: 'auto'},                                    contextmenu: [{text: 'hexo-tag-mmedia', link: 'https://github.com/MonoLogueChi/hexo-tag-mmedia'}],            highlight: [],            undefined        });        dp.on("fullscreen", function () { if (/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) { screen.orientation.lock("landscape"); }});        </script>        <h2 id="【Indexql-Arcaea】Cyaegha-FTR10-PM"><a href="#【Indexql-Arcaea】Cyaegha-FTR10-PM" class="headerlink" title="【Indexql / Arcaea】Cyaegha FTR10+ PM"></a>【Indexql / Arcaea】Cyaegha FTR10+ PM</h2><p>膜拜大佬手速这么快。比我眼睛都快。。。</p><p><a href="https://www.bilibili.com/video/BV1Nf4y117Je" target="_blank" rel="noopener">【Indexql / Arcaea】Cyaegha FTR10+ PM</a></p>        <style>.bbplayer{width: 100%; max-width: undefined; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-IElFXjoJ" src="//player.bilibili.com/player.html?bvid=BV1Nf4y117Je&amp;page=1&amp;high_quality=1&amp;danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-IElFXjoJ").style.height=document.getElementById("mmedia-IElFXjoJ").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-IElFXjoJ").style.height=document.getElementById("mmedia-IElFXjoJ").scrollWidth*0.76+"px";            };        </script>        <h2 id="【键盘弹唱】周杰伦经典情歌《枫》"><a href="#【键盘弹唱】周杰伦经典情歌《枫》" class="headerlink" title="【键盘弹唱】周杰伦经典情歌《枫》"></a>【键盘弹唱】周杰伦经典情歌《枫》</h2><p>同学弹唱的枫。弹得好，唱的也好。我很羡慕。</p><p>周杰伦作为经典的永不过时歌手之一，他的强是我在最近两年才发现的（现在是2020年7月25日下午3点29分）。我很遗憾这么晚才发现这么一位才子。他在零几年发布的歌，在现在来听仍然谈不上一点过时，反而比当下的一些新歌要那啥。最近听的最多的就是枫和不能说的秘密了。</p><p>让我们欣赏一下枫吧。</p><p><a href="https://www.bilibili.com/video/BV1Ak4y1r7sa" target="_blank" rel="noopener">【键盘弹唱】周杰伦经典情歌《枫》</a></p>        <style>.bbplayer{width: 100%; max-width: undefined; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-wOKavVWI" src="//player.bilibili.com/player.html?bvid=BV1Ak4y1r7sa&amp;page=1&amp;high_quality=1&amp;danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-wOKavVWI").style.height=document.getElementById("mmedia-wOKavVWI").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-wOKavVWI").style.height=document.getElementById("mmedia-wOKavVWI").scrollWidth*0.76+"px";            };        </script>        <h2 id="冷静期？纠结期？换一个角度聊聊【婚前性行为-同居】"><a href="#冷静期？纠结期？换一个角度聊聊【婚前性行为-同居】" class="headerlink" title="冷静期？纠结期？换一个角度聊聊【婚前性行为/同居】"></a>冷静期？纠结期？换一个角度聊聊【婚前性行为/同居】</h2><p><a href="https://www.bilibili.com/video/BV1N54y1Q7gf" target="_blank" rel="noopener">冷静期？纠结期？换一个角度聊聊【婚前性行为/同居】</a></p>        <style>.bbplayer{width: 100%; max-width: undefined; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-xFeocspn" src="//player.bilibili.com/player.html?bvid=BV1N54y1Q7gf&amp;page=1&amp;high_quality=1&amp;danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-xFeocspn").style.height=document.getElementById("mmedia-xFeocspn").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-xFeocspn").style.height=document.getElementById("mmedia-xFeocspn").scrollWidth*0.76+"px";            };        </script>        <h1 id="静态资源地址"><a href="#静态资源地址" class="headerlink" title="静态资源地址"></a>静态资源地址</h1><ol><li><a href="https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/94e8483d022ba06a4a131efd0fa104e3.mp4" target="_blank" rel="noopener">https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/94e8483d022ba06a4a131efd0fa104e3.mp4</a> 来自小米10pro宣传页</li><li><a href="https://cdn.cnbj1.fds.api.mi-img.com/product-images/mi10pro/mi10pro-24v1.jpg" target="_blank" rel="noopener">https://cdn.cnbj1.fds.api.mi-img.com/product-images/mi10pro/mi10pro-24v1.jpg</a></li><li><a href="https://cdn.cnbj1.fds.api.mi-img.com/product-images/mi10pro/mi10pro-22-3.jpg" target="_blank" rel="noopener">https://cdn.cnbj1.fds.api.mi-img.com/product-images/mi10pro/mi10pro-22-3.jpg</a></li><li><a href="https://onedrive.ruitest.workers.dev?file=/pdf/使用CloudFlareWorkers零成本部署OneDrive文件列表程序FODI.pdf" target="_blank" rel="noopener">搭建网盘</a></li></ol><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><ol><li>必须使用https访问，否则会出现<code>No 'Access-Control-Allow-Origin' header is present on the requested resource</code>. <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/issues/561" target="_blank" rel="noopener">参考来源</a>.</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.cnblogs.com/wkfvawl/p/12268980.html" target="_blank" rel="noopener">关于博客园内嵌入bilibili视频</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>繁琐的小知识点记录</title>
      <link href="/posts/little-knowledge-points-record/"/>
      <url>/posts/little-knowledge-points-record/</url>
      
        <content type="html"><![CDATA[<h1 id="杂与乱"><a href="#杂与乱" class="headerlink" title="杂与乱"></a>杂与乱</h1><ol><li><p>更新jsDelivr缓存内容</p><p>以下内容转载于<a href="https://mazhuang.org/2020/05/01/cdn-for-github-pages/" target="_blank" rel="noopener">码志</a></p><blockquote><p>可以访问 <code>https://purge.jsdelivr.net/gh/mzlogin/mzlogin.github.io@1.2.0/assets/js/main.js</code> 来清除指定文件的缓存；（将引用的 CDN 链接里的 <code>cdn</code> 改成 <code>purge</code> 就是了）</p></blockquote></li><li><p>查看公网ip</p><pre class=" language-bash"><code class="language-bash">curl ip.sb   <span class="token comment" spellcheck="true"># 这个速度很快</span>curl ipv6.ip.sb <span class="token comment" spellcheck="true"># 获取ipv6</span>curl ifconfig.mecurl icanhazip.com</code></pre><p>感谢这位<a href="https://github.com/zhongyang219/TrafficMonitor/issues/394" target="_blank" rel="noopener">朋友</a>的提供，这也是一种途径。</p><p><a href="https://v4.yinghualuo.cn/bejson" target="_blank" rel="noopener">https://v4.yinghualuo.cn/bejson</a><br><a href="https://v6.yinghualuo.cn/bejson" target="_blank" rel="noopener">https://v6.yinghualuo.cn/bejson</a></p></li><li><p>iterm2中建立免输入密钥文件的配置文件</p><ol><li><p>创建登录脚本，保存到Documents/login.sh</p><pre class=" language-shell"><code class="language-shell">#!/usr/bin/expectset keyfilepath Downloads/id_rsaset keyfilepassword kskhJla23kJLset user rootset ip 192.168.101.1spawn ssh -i $keyfilepath $user@$ipexpect "Enter passphrase for key '$keyfilepath':"send "$keyfilepassword\r"interact}</code></pre></li><li><p>设置iterm2中的profile</p></li></ol></li><li><p>修改ubuntu用户的shell</p><p><a href="https://blog.csdn.net/iteye_4185/article/details/82564503" target="_blank" rel="noopener">https://blog.csdn.net/iteye_4185/article/details/82564503</a></p></li><li><p>npm临时使用源</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> --registry https://registry.npmjs.org/ <span class="token function">install</span> hexo-tag-mmedia --save</code></pre></li><li><p>mac录屏文件处理。<a href="https://zhuanlan.zhihu.com/p/86966045" target="_blank" rel="noopener">参考这里</a></p><p>step1 : 转换成 mp4 格式</p><pre class=" language-bash"><code class="language-bash">ffmpeg -i source.mov -vcodec copy -acodec copy temp.mp4</code></pre><p>step2 : 降低帧率</p><pre class=" language-bash"><code class="language-bash">ffmpeg -i temp.mp4 -r 20 des.mp4</code></pre><p>合并视频: ffmpeg -f concat -i file.txt -c copy output.mov</p><p>其中 file.txt 为</p><pre><code>file '1.mov'file '2.mov'</code></pre></li><li><p>hexo部署到服务器</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~<span class="token function">git</span> init --bare blog.git<span class="token function">vi</span> ~/blog.git/hooks/post-receive <span class="token comment" spellcheck="true"># 输入下一行的内容</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/www/website --git-dir<span class="token operator">=</span>/home/git/blog.git checkout -f</code></pre></li><li><p>grep查找当前文件夹下包含指定字符串的文件</p><p><a href="https://blog.csdn.net/BabyFish13/article/details/79709028" target="_blank" rel="noopener">https://blog.csdn.net/BabyFish13/article/details/79709028</a></p><pre class=" language-bash"><code class="language-bash">--递归查找目录下含有该字符串的所有文件<span class="token function">grep</span> -rn <span class="token string">"data_chushou_pay_info"</span>  /home/hadoop/nisj/automationDemand/--查找当前目录下后缀名过滤的文件<span class="token function">grep</span> -Rn <span class="token string">"data_chushou_pay_info"</span> *.py--当前目录及设定子目录下的符合条件的文件<span class="token function">grep</span> -Rn <span class="token string">"data_chushou_pay_info"</span> /home/hadoop/nisj/automationDemand/ *.py--结合find命令过滤目录及文件名后缀<span class="token function">find</span> /home/hadoop/nisj/automationDemand/ -type f -name <span class="token string">'*.py'</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">grep</span> -n <span class="token string">'data_chushou_pay_info'</span></code></pre><p><strong><em>\</em>Grep选项：**</strong><br>* : 表示当前目录所有文件，也可以是某个文件名<br>-r 是递归查找<br>-n 是显示行号<br>-R 查找所有文件包含子目录<br>-i 忽略大小写</p><p>*<em>有意思的命令行参数：<br>*</em>grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写<br>grep -l pattern files ：只列出匹配的文件名,不列出路径<br>grep -L pattern files ：列出不匹配的文件名<br>grep -w pattern files ：只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’）<br>grep -C number pattern files ：匹配的上下文分别显示[number]行<br>grep pattern1 | pattern2 files ：显示匹配 pattern1 或 pattern2 的行<br>grep pattern1 files | grep pattern2 ：显示既匹配 pattern1 又匹配 pattern2 的行</p><p>*<em>有些用于搜索的特殊符号：<br>*</em>&lt; 和 &gt; 分别标注单词的开始与结尾。<br>例如：<br>grep man * 会匹配 ‘Batman’、‘manic’、‘man’等<br>grep ‘&lt;man’ * 匹配‘manic’和‘man’，但不是‘Batman’<br>grep ‘&lt;man&gt;‘ 只匹配‘man’，而不是‘Batman’或‘manic’等其他的字符串。<br>‘^’：指匹配的字符串在行首<br>‘$’：指匹配的字符串在行尾</p></li><li><p>linux文件清理</p><ol><li><p>清除<code>linux-aws-headers-*</code>文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt autoremove<span class="token function">sudo</span> apt autoclean</code></pre></li><li><p>清除日志文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> journalctl --vacuum-time<span class="token operator">=</span>2d <span class="token comment" spellcheck="true"># 仅保留最近两天的系统日志，多余的都自动删掉</span><span class="token function">sudo</span> journalctl --vacuum-size<span class="token operator">=</span>50M <span class="token comment" spellcheck="true"># 仅保留50M大小的系统日志，多余的都自动删掉</span></code></pre></li></ol></li><li><p>centos非root用户安装软件的一种方法</p><ol><li><p>使用yum搜索包</p><pre class=" language-bash"><code class="language-bash">yum list  <span class="token string">'graphviz*'</span></code></pre></li><li><p>下载rpm包</p><pre class=" language-bash"><code class="language-bash">yumdownloader graphviz.x86_64 </code></pre></li><li><p>解压rpm包</p><pre class=" language-bash"><code class="language-bash">rpm2cpio graphviz-2.30.1-19.el7.x86_64.rpm <span class="token operator">|</span>cpio -idvm</code></pre></li><li><p>将可执行文件路径添加到环境变量</p><pre class=" language-bash"><code class="language-bash">vim  ~/.bashrc<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HOME</span>/usr/bin/</code></pre></li></ol></li><li><p>windows中U盘或者移动硬盘关不掉时，怎么知道是被哪个程序占用了呢？</p><ol><li>按下win键，直接搜索 事件查看器（或者eventvwr)。然后弹出u盘，再次出现错误</li></ol><p><img src="https://pic1.zhimg.com/80/v2-7bb79e4baba7a12c3a7b1aff1336f1bf_720w.jpg?source=1940ef5c" alt="img"></p><ol start="2"><li><p>在事件查看器里面对应的时间里找事件</p><p><img src="https://pic1.zhimg.com/80/v2-131a735a1594616aeeedfde58c0ac050_720w.jpg?source=1940ef5c" alt="img"></p></li><li><p>任务管理器结束该进程</p><p><img src="https://pic4.zhimg.com/80/v2-de817e37c68469cd39b5023f9d073d81_720w.jpg?source=1940ef5c" alt="img"></p></li></ol></li><li><p>生成网卡的UUID</p><p><a href="https://blog.csdn.net/quintind/article/details/79437838" target="_blank" rel="noopener">https://blog.csdn.net/quintind/article/details/79437838</a></p></li><li><p>win32 disk imager恢复U盘容量</p><p><a href="https://blog.csdn.net/u012400584/article/details/55506527" target="_blank" rel="noopener">https://blog.csdn.net/u012400584/article/details/55506527</a></p></li><li><p>centos开放端口</p><p>查看防火墙某个端口是否开放</p><p>firewall-cmd –query-port=3306/cp</p><p>开放防火墙端口3306</p><p>firewall-cmd –zone=public -add-port=3306/tcp –permanent</p><p>查看/开启/关闭防火墙</p><p>systemctl status/start/stop firewalld</p><p>开放一段端口</p><p>firewall-cmd –zone=public –add-port=4000-4500/tcp –permanent</p><p>查看开放的端口列表</p><p>firewall-cmd –zone=public –list-ports</p></li><li><p>安装php</p><p><a href="https://www.iemblog.com/?p=2399&amp;lang=zh" target="_blank" rel="noopener">https://www.iemblog.com/?p=2399&amp;lang=zh</a></p></li><li><p>typora标题加上序号</p><p><a href="https://blog.csdn.net/jiangxiulilinux/article/details/100666051" target="_blank" rel="noopener">https://blog.csdn.net/jiangxiulilinux/article/details/100666051</a></p></li><li><p>centos查看某个进程当前线程数</p><p>方式一：</p><pre><code>cat /proc/[pid]/status</code></pre><p>展示结果中，Threads后边对应的数字就是进程拥有的线程数量</p><p>方式二：</p><pre><code>ps hH p 3805|wc -l</code></pre></li><li><p>dpdk插入IgbUIO驱动报错：## ERROR: Target does not have the DPDK UIO Kernel Module.To fix, please try to rebuild target.</p><p>解决方法：<br>[root@localhost dpdk-18.11]# modprobe uio<br>[root@localhost dpdk-18.11]# cd build/kmod/<br>[root@localhost kmod]# insmod igb_uio.ko<br>[root@localhost kmod]# lsmod | grep uio<br>再次运次<br>[root@localhost dpdk-18.11]# ./usertools/dpdk-devbind.py –bind=uio_pci_generic enp0s8</p></li><li><p>ubuntu安装gcc10 <a href="https://www.itcoder.tech/posts/how-to-install-gcc-on-ubuntu-20-04/" target="_blank" rel="noopener">https://www.itcoder.tech/posts/how-to-install-gcc-on-ubuntu-20-04/</a></p></li><li><p>LIBRARY_PATH和LD_LIBRARY_PATH环境变量的区别</p><p>LIBRARY_PATH环境变量用于在<strong><em>程序编译期间</em></strong>查找动态链接库时指定查找共享库的路径，例如，指定gcc编译需要用到的动态链接库的目录。设置方法如下（其中，LIBDIR1和LIBDIR2为两个库目录）：</p><pre><code>export LIBRARY_PATH=LIBDIR1:LIBDIR2:$LIBRARY_PATH</code></pre><p>LD_LIBRARY_PATH环境变量用于在<strong><em>程序加载运行期间</em></strong>查找动态链接库时指定除了系统默认路径之外的其他路径，注意，LD_LIBRARY_PATH中指定的路径会在系统默认路径之前进行查找。设置方法如下（其中，LIBDIR1和LIBDIR2为两个库目录）：</p><pre><code>export LD_LIBRARY_PATH=LIBDIR1:LIBDIR2:$LD_LIBRARY_PATH</code></pre><p>举个例子，我们开发一个程序，经常会需要使用某个或某些动态链接库，为了保证程序的可移植性，可以先将这些编译好的动态链接库放在自己指定的目录下，然后按照上述方式将这些目录加入到LD_LIBRARY_PATH环境变量中，这样自己的程序就可以动态链接后加载库文件运行了。</p><p>开发时，设置LIBRARY_PATH，以便gcc能够找到编译时需要的动态链接库。</p><p>发布时，设置LD_LIBRARY_PATH，以便程序加载运行时能够自动找到需要的动态链接库。</p></li><li><p>更改用户组信息</p><p><a href="https://blog.csdn.net/train006l/article/details/79007483" target="_blank" rel="noopener">Linux中修改用户UID和组GID的方法_train006l的博客-CSDN博客_linux 修改uid</a></p><blockquote><p>例如测试用户foo和测试组foo。</p></blockquote><blockquote><p>foo old UID: 1005</p></blockquote><blockquote><p>foo new UID: 2005</p></blockquote><blockquote><p>foo old GID: 2000</p></blockquote><blockquote><p>foo new GID: 3000</p></blockquote><blockquote><p>命令：</p></blockquote><blockquote><p>1、修改foo用户的uid</p></blockquote><blockquote><p>usermod -u 2005 foo</p></blockquote><blockquote><p>2、修改foo组的gid</p></blockquote><blockquote><p>groupmod -g 3000 foo</p></blockquote><blockquote><p>3、foo用户的家目录下面的文件属主和属组会在1、2命令执行后自动修改成新的uid、gid对应的属主属组，但是其他文件目录需要手动修改。手动修改的命令也比较简单。</p></blockquote><blockquote><p>find / -user 1005 -exec chown -h foo {} ;</p></blockquote><blockquote><p>find / -group 2000 -exec chgrp -h foo {} ;</p></blockquote><blockquote><p>这样用户和组的uid、gid就修改好了。可以用id命令看下是否修改的如我们所愿。</p></blockquote><blockquote><p>ls -l /home/foo/</p></blockquote><blockquote><p>id -u foo</p></blockquote><blockquote><p>id -g foo</p></blockquote><blockquote><p>grep foo /etc/passwd</p></blockquote><blockquote><p>grep foo /etc/group</p></blockquote></li><li><p>创建用户并添加到admin和docker组</p><p>useradd rui -m -s /bin/zsh -G docker,admin</p></li><li><p>添加rui用户到docker用户组</p><p>Sudo usermod -aG docker rui</p></li><li></li></ol><h1 id="centos硬件信息查询"><a href="#centos硬件信息查询" class="headerlink" title="centos硬件信息查询"></a>centos硬件信息查询</h1><ol><li><p>查询服务器型号:<code>sudo dmidecode | grep "Product"</code></p><pre class=" language-bash"><code class="language-bash">    Product Name: PowerEdge R730    Product Name: 072T6D</code></pre></li></ol><ol start="2"><li><p>查询cpu信息。 <code>lscpu</code></p><pre class=" language-bash"><code class="language-bash">Architecture:          x86_64CPU op-mode<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:        32-bit, 64-bitByte Order:            Little EndianCPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                24On-line CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span> list:   0-23Thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per core:    2Core<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per socket:    6Socket<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:             2NUMA node<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:          2Vendor ID:             GenuineIntelCPU family:            6Model:                 79Model name:            Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Xeon<span class="token punctuation">(</span>R<span class="token punctuation">)</span> CPU E5-2643 v4 @ 3.40GHzStepping:              1CPU MHz:               1200.292CPU max MHz:           3700.0000CPU min MHz:           1200.0000BogoMIPS:              6799.25Virtualization:        VT-xL1d cache:             32KL1i cache:             32KL2 cache:              256KL3 cache:              20480KNUMA node0 CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:     0,2,4,6,8,10,12,14,16,18,20,22NUMA node1 CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:     1,3,5,7,9,11,13,15,17,19,21,23Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts</code></pre><p>cat /proc/cpuinfo 查看CPU 的详细信息 (型号, 家族, 缓存大小等)</p><p>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 查看CPU型号</p><p>cat /proc/cpuinfo |grep “physical id”|sort |uniq|wc -l 查看物理CPU的个数</p><p>cat /proc/cpuinfo |grep “processor”|wc -l 查看逻辑CPU的个数</p><p>cat /proc/cpuinfo |grep MHz|uniq 查看CPU的主频</p></li><li><p>centos查看cpu核数</p><p>1、查看 CPU 物理个数<br>　　grep ‘physical id’ /proc/cpuinfo | sort -u | wc -l</p><p>2、查看 CPU 核心数量<br>　　grep ‘core id’ /proc/cpuinfo | sort -u | wc -l</p><p>3、查看 CPU 线程数<br>　　grep ‘processor’ /proc/cpuinfo | sort -u | wc -l</p><p>4、查看 CPU  型号<br>　　dmidecode -s processor-version</p><p>5、查看 CPU 的详细信息：<br>　　cat /proc/cpuinfo</p></li><li><p>查询硬盘数量及大小。 <code>lsblk</code></p><pre class=" language-bash"><code class="language-bash">NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTsda               8:0    0 931.5G  0 disk├─sda1            8:1    0     1G  0 part /boot└─sda2            8:2    0 930.5G  0 part  └─centos-root 253:0    0   1.2T  0 lvm  /sdb               8:16   0 894.3G  0 disk└─sdb1            8:17   0 894.3G  0 part  ├─centos-root 253:0    0   1.2T  0 lvm  /  ├─centos-swap 253:1    0    64G  0 lvm  └─centos-home 253:2    0 570.8G  0 lvm  /homesr0              11:0    1  1024M  0 romnvme0n1         259:0    0 349.3G  0 disk</code></pre><p>这表示该机器游三块硬盘，分别是sda,sdb,nvme0n1.</p></li><li><p>查询内存条数量: <code>sudo dmidecode|grep -P -A5 "Memory\s+Device"|grep Size|grep -v Range</code> 有数据的表示插了内存条</p><pre class=" language-bash"><code class="language-bash">Size: 16384 MB    Size: 16384 MB    Size: 16384 MB    Size: 16384 MB    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: 16384 MB    Size: 16384 MB    Size: 16384 MB    Size: 16384 MB    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed    Size: No Module Installed</code></pre></li></ol><ol start="6"><li><p>ubuntu lvm扩容</p><p>抄袭自<a href="https://blog.csdn.net/Fly_1213/article/details/105142427" target="_blank" rel="noopener">https://blog.csdn.net/Fly_1213/article/details/105142427</a></p><pre class=" language-bash"><code class="language-bash">// 按百分比进行磁盘扩容root@ubuntu:~<span class="token comment" spellcheck="true"># lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv</span>  Size of logical volume ubuntu-vg/ubuntu-lv changed from 4.00 GiB <span class="token punctuation">(</span>1024 extents<span class="token punctuation">)</span> to <span class="token operator">&lt;</span>19.00 GiB <span class="token punctuation">(</span>4863 extents<span class="token punctuation">)</span>.  Logical volume ubuntu-vg/ubuntu-lv successfully resized.// 刷新分区 root@ubuntu:~<span class="token comment" spellcheck="true"># resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv </span>resize2fs 1.44.1 <span class="token punctuation">(</span>24-Mar-2018<span class="token punctuation">)</span>Filesystem at /dev/mapper/ubuntu--vg-ubuntu--lv is mounted on /<span class="token punctuation">;</span> on-line resizing requiredold_desc_blocks <span class="token operator">=</span> 3, new_desc_blocks <span class="token operator">=</span> 3The filesystem on /dev/mapper/ubuntu--vg-ubuntu--lv is now 4979712 <span class="token punctuation">(</span>4k<span class="token punctuation">)</span> blocks long.// 查看文件系统磁盘空间的使用情况（发现此时已经扩容到19G）root@ubuntu:~<span class="token comment" spellcheck="true"># df -h</span>Filesystem                         Size  Used Avail Use% Mounted onudev                               451M     0  451M   0% /devtmpfs                               97M  1.3M   96M   2% /run/dev/mapper/ubuntu--vg-ubuntu--lv   19G  3.9G   14G  22% /tmpfs                              482M     0  482M   0% /dev/shmtmpfs                              5.0M     0  5.0M   0% /run/locktmpfs                              482M     0  482M   0% /sys/fs/cgroup/dev/loop0                          92M   92M     0 100% /snap/core/8689/dev/loop1                          90M   90M     0 100% /snap/core/8268/dev/sda2                          976M   77M  832M   9% /boottmpfs                               97M     0   97M   0% /run/user/0// 再次查看LVM卷组的信息（可扩容的空间已经成为0）root@ubuntu:~<span class="token comment" spellcheck="true"># vgdisplay</span>  --- Volume group ---  VG Name               ubuntu-vg  System ID               Format                lvm2  Metadata Areas        1  Metadata Sequence No  4  VG Access             read/write  VG Status             resizable  MAX LV                0  Cur LV                1  Open LV               1  Max PV                0  Cur PV                1  Act PV                1  VG Size               <span class="token operator">&lt;</span>19.00 GiB  PE Size               4.00 MiB  Total PE              4863  Alloc PE / Size       4863 / <span class="token operator">&lt;</span>19.00 GiB  Free  PE / Size       0 / 0     VG UUID               hZPoxm-kSBU-fmKs-2yXD-hHoe-3T7e-PCIFSe</code></pre></li></ol><ol start="7"><li></li></ol><h1 id="Git-操作"><a href="#Git-操作" class="headerlink" title="Git 操作"></a>Git 操作</h1><ol><li><p>git远程与本地的操作</p><ol><li><p>git重新设置远程仓库地址</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rm</span> origin<span class="token function">git</span> remote add origin 你的新远程仓库地址</code></pre></li><li><p>git删除远程分支</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push origin --delete Chapater6  </code></pre></li><li><p>git 建立本地分支与远程分支的关联</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch –set-upstream 本地新建分支名 origin/远程分支名</code></pre></li><li><p>git重命名分支</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -m old new</code></pre></li><li><p>git拉取远程分支</p></li></ol></li><li><p>git放弃本地修改</p><ul><li><p>未使用git add缓存代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -- filepathname <span class="token comment" spellcheck="true"># 放弃指定文件的缓存</span><span class="token function">git</span> checkout <span class="token keyword">.</span>               <span class="token comment" spellcheck="true"># 放弃所有的文件修改</span></code></pre></li><li><p>已经使用git add缓存代码</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">git</span> reset HEAD filepathname <span class="token comment" spellcheck="true">#放弃指定文件的缓存</span> <span class="token function">git</span> reset HEAD <span class="token keyword">.</span>            <span class="token comment" spellcheck="true"># 放弃所有的文件修改</span></code></pre></li><li><p>已经用 git commit提交代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD^      <span class="token comment" spellcheck="true"># 回到上一次commit的状态</span></code></pre></li></ul></li><li><p>git使用远程仓库代码覆盖本地代码</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">git</span> fetch --all <span class="token function">git</span> reset --hard origin/master <span class="token function">git</span> pull</code></pre><p>第一个是：拉取所有更新，不同步；</p><p>第二个是：本地代码同步线上最新版本(会覆盖本地所有与远程仓库上同名的文件)；</p><p>第三个是：再更新一次（其实也可以不用，第二步命令做过了其实）</p></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未找到相关的Issues进行评论 请联系XXX初始化创建</title>
      <link href="/posts/Related-Issues-were-not-found-to-comment/"/>
      <url>/posts/Related-Issues-were-not-found-to-comment/</url>
      
        <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>今天晚上在配置hexo博客的评论时，使用gittalk的过程中遇到了点小麻烦，正如题中说道的那样。</p><p><img src="https://i.loli.net/2020/07/24/HkOUmpTFYLGAb67.png" alt="gitalk无法使用"></p><p>倒腾了我接近一个小时终于弄好的，还是马虎的原因导致的。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>我使用的是<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a>主题，gitalk是在这个主题的_config.yml中配置的。</p><p><img src="https://i.loli.net/2020/07/24/7rXBl2KS46hsFNk.png" alt="配置文件中gitalk的配置信息"></p><p>问题就出在这个admin的配置上。admin字段就是用来初始化评论的github用户名，之前我这个填错了导致一直不能初始化。更改为你的github用户名就可以了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软路由做旁路由时电脑无法上网</title>
      <link href="/posts/computer-cannot-access-Internet-when-the-soft-route-is-used-as-a-bypass/"/>
      <url>/posts/computer-cannot-access-Internet-when-the-soft-route-is-used-as-a-bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本科用了四年的华硕笔记本，淘汰下来放在那里吃灰。最近不想学习，所以折腾起了软路由玩。按照网上的教程装好了openwrt，在设置电脑时却无论如何都无法上网，断断续续尝试了一个星期后终于解决了。</p><h1 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h1><p>基本设置大家应该都知道，软路由的ip设置为主路由ip段中的某个合法ip，网关为主路由的ip地址，dns啥的可以是主路由地址也可以是114.114.114.114啥的。这个都可以。dhcp关掉，使用主路由的dhcp。</p><p>电脑端设置为静态ip，ip地址为主路由ip段中的某个合法ip，子网掩码为225.225.225.0，网关为软路由的ip地址。但是设置为这些后还是无法上网，我很郁闷。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>（暂时没有贴图，等我有图了我就来贴上）</p><ol><li><p>在接口中的高级设置中取消桥接。</p></li><li><p>防火墙的自定义规则中添加如下规则，并让他生效。</p><pre class=" language-shell"><code class="language-shell">iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</code></pre></li></ol><p>进行这些设置后应该就可以了。如果还不行那我也不知道了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gdb的学习与错误解决</title>
      <link href="/posts/5f54a3c8/"/>
      <url>/posts/5f54a3c8/</url>
      
        <content type="html"><![CDATA[<h1 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h1><p>在写某个程序时，出现错误，想要使用gdb进行调试，但是在使用<code>b</code>命令设置断点后出现如下错误，并且运行后不能在断点处暂停。</p><pre class=" language-shell"><code class="language-shell">No symbol table is loaded.  Use the "file" command.Make breakpoint pending on future shared library load? (y or [n])</code></pre><p>经过搜索资料发现是在编译的时候没有加上<code>-g</code>选项，导致无法进行断点调试，因此在<code>Makefile</code>文件中的<code>CPPFLAGS</code>（如果是C语言就是<code>CFLAGS</code>)中加上<code>-g</code>    选项后，就能够正常进行断点调试了。</p><h1 id="gdb的简单使用方法"><a href="#gdb的简单使用方法" class="headerlink" title="gdb的简单使用方法"></a>gdb的简单使用方法</h1><ol><li>设置断点<ul><li>根据函数名设置断点：<code>b func_name</code></li><li>根据代码行位置设置断点: <code>b src/mycode.cc:81</code> gdb运行到该文件的地81行处中断。</li><li>根据运行时的地址进行设置断点: <code>b *0x5859c0</code> </li></ul></li><li>跳入或跳出指令<ul><li>执行到某个函数时<strong>不进入</strong>函数体内: <code>n</code></li><li>执行到某个函数时<strong>进入</strong>函数体内: <code>s</code></li><li>跳出当前函数（执行完当前函数返回到调用它的函数）: <code>f</code></li></ul></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li>No symbol table is loaded. Use the “file” command.解决方法: <a href="https://blog.csdn.net/pinghegood/article/details/8512747" target="_blank" rel="noopener">https://blog.csdn.net/pinghegood/article/details/8512747</a></li><li>gdb几种设置断点的方式: <a href="https://blog.csdn.net/wojiuguowei/article/details/82386567" target="_blank" rel="noopener">https://blog.csdn.net/wojiuguowei/article/details/82386567</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摸鱼记录-我的第一篇博客文章</title>
      <link href="/posts/b24dd347/"/>
      <url>/posts/b24dd347/</url>
      
        <content type="html"><![CDATA[<h1 id="2020年7月1日"><a href="#2020年7月1日" class="headerlink" title="2020年7月1日"></a>2020年7月1日</h1><p>事情很多，但是我仍然很摸鱼。今天看到了许多优秀的博客，我也想弄一个自己的博客。然后就开始尝试了</p><p>搞了一晚上，终于弄了个雏形出来了，多谢大佬的<a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">指点</a>，让我的搭建过程顺利了许多。这位学长的<a href="https://godweiyang.com/" target="_blank" rel="noopener">博客</a>写的真的不错，是我学习的榜样。可是我太懒了，只想摸鱼，唉。</p><h1 id="2020年7月2日"><a href="#2020年7月2日" class="headerlink" title="2020年7月2日"></a>2020年7月2日</h1><p>早上一大早起来就开始着手实行博客访问速度的优化方式。使用国外CDN的速度还是不理想，使用国内CDN需要备案太麻烦。于是只是想静态的js和css资源使用了cdn，速度似乎提高了一点。接下来需要做的是将图片换成其他的图床，避免从国外服务器拉取。</p><p>测试博文中图床的使用：</p><p>sm.ms</p><p><img src="https://i.loli.net/2020/07/02/xgAZMPk6yXstFnT.png" alt="sm.ms图床的照片"></p><p>路过图床</p><p><img src="https://s1.ax1x.com/2020/05/05/YiphlD.png" alt="路过图床的照片"></p><h2 id="待完成的任务"><a href="#待完成的任务" class="headerlink" title="待完成的任务"></a>待完成的任务</h2><ol><li><p>将图片从图床上获取。</p><p>目前域名已经在备案过程中，备案成功过使用cdn加速。文章中的图片使用图床。</p></li><li><p>消除文章正文后面的冗余信息。</p><p>已经消除</p></li></ol><h1 id="摸鱼计划"><a href="#摸鱼计划" class="headerlink" title="摸鱼计划"></a>摸鱼计划</h1><h2 id="2020年7月26日"><a href="#2020年7月26日" class="headerlink" title="2020年7月26日"></a>2020年7月26日</h2><ol><li>使用Docsify搭建一个文档网站。</li><li><del>使用oneindex和onedrive倒腾一下云盘和在线视频播放。</del> 7月底已经完成。<ol><li>参考视频:<a href="https://www.bilibili.com/video/av27789262/" target="_blank" rel="noopener">https://www.bilibili.com/video/av27789262/</a></li></ol></li></ol><h2 id="2020年7月27日"><a href="#2020年7月27日" class="headerlink" title="2020年7月27日"></a>2020年7月27日</h2><ol><li>python下载m3u8视频<ol><li>参考链接：<a href="https://blog.csdn.net/s_kangkang_A/article/details/103071822" target="_blank" rel="noopener">https://blog.csdn.net/s_kangkang_A/article/details/103071822</a></li><li><a href="https://blog.csdn.net/makefool/article/details/104807029" target="_blank" rel="noopener">https://blog.csdn.net/makefool/article/details/104807029</a></li><li><a href="https://zhuanlan.zhihu.com/p/70290764" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/70290764</a></li></ol></li></ol><h2 id="2020年7月28日"><a href="#2020年7月28日" class="headerlink" title="2020年7月28日"></a>2020年7月28日</h2><ol><li>今天备案通过了，有时间用七牛云和又拍云加速博客。现在有备案域名了，看看还能做啥。</li><li><del>开通域名邮箱</del> 8月2日开通完成，邮箱地址为<a href="http://mail.zhangruiahu.cn" target="_blank" rel="noopener">http://mail.zhangruiahu.cn</a>, 邮箱账号为<a href="mailto:zhangrui@zhangruiahu.cn">zhangrui@zhangruiahu.cn</a>.</li></ol><h2 id="2020年7月31日"><a href="#2020年7月31日" class="headerlink" title="2020年7月31日"></a>2020年7月31日</h2><ol><li>实现OFDI的防盗链功能，通过判断requestheader中的refer判断。</li></ol><h1 id="2020年7月5日"><a href="#2020年7月5日" class="headerlink" title="2020年7月5日"></a>2020年7月5日</h1><p>今天是两门课作业的最后一个晚上。本来是完全有时间来写这两门作业的，可是刚开始的时候仍然是不着急，一拖再拖，拖到只剩最后一个周末。即使到了最后的晚上仍然是懈怠。作业完成的质量真的是呵呵了。我不知道我为什么会成为现在这个样子。看着室友完成的作业再看看自己的。我很难过，想发奋努力。不知道明天又会是怎样。别人的态度比我好，也找到了实习，确实比我优秀。我整天在家里这么干我真的能行吗？唉，无奈，却又仍然不努力，我该怎么办。有点慌了，却又无动于衷。</p><h1 id="2020年7月17日"><a href="#2020年7月17日" class="headerlink" title="2020年7月17日"></a>2020年7月17日</h1><p>今天和昨天，又是日子混的好快的两天。每天什么都没做，时间就过去了。 </p><h1 id="2020年7月24日"><a href="#2020年7月24日" class="headerlink" title="2020年7月24日"></a>2020年7月24日</h1><p>这一个星期一晃又过去了。心惊胆颤，却又完全不想学习。我也不知道我该怎么办了，别人都能学进去，我这样搞该怎么办哦。很懒，什么都不想做。</p><h1 id="2020年7月26日-1"><a href="#2020年7月26日-1" class="headerlink" title="2020年7月26日"></a>2020年7月26日</h1><p>摸鱼一星期没学习了。下星期摸鱼的时候记得倒腾下Docsify。</p><h1 id="参考站点"><a href="#参考站点" class="headerlink" title="参考站点"></a>参考站点</h1><ol><li>godweiyang的博客<a href="https://godweiyang.com/" target="_blank" rel="noopener">https://godweiyang.com/</a></li><li>hexo-theme-matery主题<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 摸鱼记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
